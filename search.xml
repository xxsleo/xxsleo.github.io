<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Servlet</title>
      <link href="/2022/04/10/JavaWeb/Maven/POM%E6%96%87%E4%BB%B6%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/"/>
      <url>/2022/04/10/JavaWeb/Maven/POM%E6%96%87%E4%BB%B6%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="POM文件总体配置说明"><a href="#POM文件总体配置说明" class="headerlink" title="POM文件总体配置说明"></a>POM文件总体配置说明</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd &quot;</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。</span></span><br><span class="line"><span class="comment">         坐标包括group ID，artifact ID和 version。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 被继承的父项目的构件标识符 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 被继承的父项目的全球唯一标识符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 被继承的父项目的版本 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。</span></span><br><span class="line"><span class="comment">             Maven首先在构建当前项目的地方寻找父项目的pom，其次在文件系统的这个位置（relativePath位置），</span></span><br><span class="line"><span class="comment">             然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，</span></span><br><span class="line"><span class="comment">         这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span> 4.0.0 <span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， </span></span><br><span class="line"><span class="comment">         如com.mycompany.app生成的相对路径为：/com/mycompany/app --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID</span></span><br><span class="line"><span class="comment">         和groupID；在某个特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven</span></span><br><span class="line"><span class="comment">         为项目产生的构件包括：JARs，源码，二进制发布和WARs等。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span> jar <span class="tag">&lt;/<span class="name">packaging</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span> 1.0-SNAPSHOT <span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目的名称, Maven产生的文档用 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span> xxx-maven <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目主页的URL, Maven产生的文档用 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://maven.apache.org <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，</span></span><br><span class="line"><span class="comment">         就可以包含HTML标签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的</span></span><br><span class="line"><span class="comment">         索引页文件，而不是调整这里的文档。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span> A maven project to study maven. <span class="tag">&lt;/<span class="name">description</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 描述了这个项目构建环境中的前提条件。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">prerequisites</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 构建该项目或使用该插件所需要的Maven的最低版本 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">maven</span>&gt;</span><span class="tag">&lt;/<span class="name">maven</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">prerequisites</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 问题管理系统（例如jira）的名字， --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">system</span>&gt;</span> jira <span class="tag">&lt;/<span class="name">system</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 该项目使用的问题管理系统的URL --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://jira.baidu.com/banseon <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目持续集成信息 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ciManagement</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 持续集成系统的名字，例如continuum --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">system</span>&gt;</span><span class="tag">&lt;/<span class="name">system</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">notifiers</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 配置一种方式，当构建中断时，以该方式通知用户/开发者 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">notifier</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 传送通知的途径 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span><span class="tag">&lt;/<span class="name">type</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 发生错误时是否通知 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnError</span>&gt;</span><span class="tag">&lt;/<span class="name">sendOnError</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 构建失败时是否通知 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnFailure</span>&gt;</span><span class="tag">&lt;/<span class="name">sendOnFailure</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 构建成功时是否通知 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnSuccess</span>&gt;</span><span class="tag">&lt;/<span class="name">sendOnSuccess</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 发生警告时是否通知 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnWarning</span>&gt;</span><span class="tag">&lt;/<span class="name">sendOnWarning</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 不赞成使用。通知发送到哪里 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">address</span>&gt;</span><span class="tag">&lt;/<span class="name">address</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 扩展配置项 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">notifier</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">notifiers</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ciManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目创建年份，4位数字。当产生版权信息时需要使用这个值。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目相关邮件列表信息 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mailingLists</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">mailingList</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 邮件的名称 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> Demo <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">post</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">post</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">subscribe</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">subscribe</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">unsubscribe</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">unsubscribe</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 你可以浏览邮件信息的URL --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">archive</span>&gt;</span> http:/hi.baidu.com/banseon/demo/dev/ <span class="tag">&lt;/<span class="name">archive</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">mailingList</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mailingLists</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目开发者列表 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 某个项目开发者的信息 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- SCM里项目开发者的唯一标识符 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span> HELLO WORLD <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者的全名 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> banseon <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者的email --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">email</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者的主页的URL --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者在项目中扮演的角色，角色元素描述了各种角色 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span> Project Manager <span class="tag">&lt;/<span class="name">role</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span> Architect <span class="tag">&lt;/<span class="name">role</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">roles</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者所属组织 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span>&gt;</span> demo <span class="tag">&lt;/<span class="name">organization</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者所属组织的URL --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span> http://hi.baidu.com/xxx <span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者属性，如即时消息如何处理等 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">dept</span>&gt;</span> No <span class="tag">&lt;/<span class="name">dept</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者所在时区， -11到12范围内的整数。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">timezone</span>&gt;</span> -5 <span class="tag">&lt;/<span class="name">timezone</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目的其他贡献者列表 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">contributors</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 项目的其他贡献者。参见developers/developer元素 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">contributor</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者的全名 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者的email --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span><span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者的主页的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者所属组织 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span>&gt;</span><span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者所属组织的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span><span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者在项目中扮演的角色，角色元素描述了各种角色 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span> Project Manager <span class="tag">&lt;/<span class="name">role</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span> Architect <span class="tag">&lt;/<span class="name">role</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者所在时区， -11到12范围内的整数。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">timezone</span>&gt;</span><span class="tag">&lt;/<span class="name">timezone</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者属性，如即时消息如何处理等 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">dept</span>&gt;</span> No <span class="tag">&lt;/<span class="name">dept</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">contributor</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">contributors</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。</span></span><br><span class="line"><span class="comment">         如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- license用于法律上的名称 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> Apache 2 <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 官方的license正文页面的URL --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://www.baidu.com/banseon/LICENSE-2.0.txt <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目分发的主要方式： </span></span><br><span class="line"><span class="comment">                    repo，可以从Maven库下载 </span></span><br><span class="line"><span class="comment">                    manual， 用户必须手动下载和安装依赖 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">distribution</span>&gt;</span> repo <span class="tag">&lt;/<span class="name">distribution</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 关于license的补充信息 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">comments</span>&gt;</span> A business-friendly OSS license <span class="tag">&lt;/<span class="name">comments</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">connection</span>&gt;</span> </span><br><span class="line">            scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">connection</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 给开发者使用的，类似connection元素。即该连接不仅仅只读 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span> </span><br><span class="line">            scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk </span><br><span class="line">        <span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 当前代码的标签，在开发阶段默认为HEAD --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span>&gt;</span><span class="tag">&lt;/<span class="name">tag</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://svn.baidu.com/banseon <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 描述项目所属组织的各种属性。Maven产生的文档用 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 组织的全名 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span> demo <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 组织主页的URL --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://www.baidu.com/banseon <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">organization</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 构建项目需要的信息 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对</span></span><br><span class="line"><span class="comment">             于pom.xml的相对路径。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容会</span></span><br><span class="line"><span class="comment">             被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">scriptSourceDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">scriptSourceDirectory</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。</span></span><br><span class="line"><span class="comment">             该路径是相对于pom.xml的相对路径。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 被编译过的应用程序class文件存放的目录。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 被编译过的测试class文件存放的目录。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">testOutputDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">testOutputDirectory</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 使用来自该项目的一系列构建扩展 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">extensions</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 描述使用到的构建扩展。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">extension</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 构建扩展的groupId --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 构建扩展的artifactId --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 构建扩展的版本 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">extension</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">defaultGoal</span>&gt;</span><span class="tag">&lt;/<span class="name">defaultGoal</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在</span></span><br><span class="line"><span class="comment">             最终的打包文件里。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 这个元素描述了项目相关或测试相关的所有资源路径 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。</span></span><br><span class="line"><span class="comment">                     举个例子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为</span></span><br><span class="line"><span class="comment">                    org/apache/maven/messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span><span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素</span></span><br><span class="line"><span class="comment">                     里列出。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span><span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 描述存放资源的目录，该路径相对POM路径 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 包含的模式列表，例如**/*.xml. --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 排除的模式列表，例如**/*.xml --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">testResources</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 描述了测试相关的资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。</span></span><br><span class="line"><span class="comment">                     举个例子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为</span></span><br><span class="line"><span class="comment">                    org/apache/maven/messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span><span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素</span></span><br><span class="line"><span class="comment">                     里列出。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span><span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 描述存放测试相关的资源的目录，该路径相对POM路径 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 包含的模式列表，例如**/*.xml. --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 排除的模式列表，例如**/*.xml --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 构建产生的所有文件存放的目录 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span><span class="tag">&lt;/<span class="name">finalName</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 当filtering开关打开时，使用到的过滤器属性文件列表 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">filters</span>&gt;</span><span class="tag">&lt;/<span class="name">filters</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本</span></span><br><span class="line"><span class="comment">             地配置都会覆盖这里的配置 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 使用的插件列表 。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- plugin元素包含描述插件所需要的信息。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 插件在仓库里的group ID --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 插件在仓库里的artifact ID --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 被使用的插件的版本（或版本范围） --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该</span></span><br><span class="line"><span class="comment">                         元素才被设置成enabled。 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span> </span><br><span class="line">                        <span class="comment">&lt;!-- execution元素包含了插件执行需要的信息 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span> </span><br><span class="line">                            <span class="comment">&lt;!-- 执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">&lt;!-- 绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span>&gt;</span><span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">&lt;!-- 配置的执行目标 --&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                            <span class="comment">&lt;!-- 配置是否被传播到子POM --&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                            <span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 项目引入插件所需要的额外依赖 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 任何配置是否被传播到子项目 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 该项目使用的插件列表 。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- plugin元素包含描述插件所需要的信息。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 插件在仓库里的group ID --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 插件在仓库里的artifact ID --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 被使用的插件的版本（或版本范围） --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该</span></span><br><span class="line"><span class="comment">                     元素才被设置成enabled。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- execution元素包含了插件执行需要的信息 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span> </span><br><span class="line">                        <span class="comment">&lt;!-- 执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span><span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 配置的执行目标 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 配置是否被传播到子POM --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 项目引入插件所需要的额外依赖 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 任何配置是否被传播到子项目 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在列的项目构建profile，如果被激活，会修改构建处理 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 根据环境参数或命令行参数激活某个构建处理 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它能够</span></span><br><span class="line"><span class="comment">                 在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元</span></span><br><span class="line"><span class="comment">                 素并不是激活profile的唯一方式。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- profile默认是否激活的标志 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本</span></span><br><span class="line"><span class="comment">                     不是以1.4开头的JDK。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>jdk版本，如:1.7<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">os</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的操作系统的名字 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span> Windows XP <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的操作系统所属家族(如 &#x27;windows&#x27;) --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">family</span>&gt;</span> Windows <span class="tag">&lt;/<span class="name">family</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的操作系统体系结构 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">arch</span>&gt;</span> x86 <span class="tag">&lt;/<span class="name">arch</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的操作系统版本 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span> 5.1.2600 <span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">os</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 如果Maven检测到某一个属性（其值可以在POM中通过$&#123;名称&#125;引用），其拥有对应的名称和值，Profile</span></span><br><span class="line"><span class="comment">                     就会被激活。如果值字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹</span></span><br><span class="line"><span class="comment">                     配属性值字段 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的属性的名称 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span> mavenVersion <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的属性的值 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span> 2.0.3 <span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活 </span></span><br><span class="line"><span class="comment">                     profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">file</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 如果指定的文件存在，则激活profile。 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">exists</span>&gt;</span> /usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/ <span class="tag">&lt;/<span class="name">exists</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 如果指定的文件不存在，则激活profile。 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">missing</span>&gt;</span> /usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/ <span class="tag">&lt;/<span class="name">missing</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">file</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 构建项目所需要的信息。参见build元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">build</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">defaultGoal</span> /&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span><span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span><span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">testResources</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">testResource</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span><span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span><span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">finalName</span>&gt;</span><span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filters</span>&gt;</span><span class="tag">&lt;/<span class="name">filters</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">                        <span class="comment">&lt;!-- 参见build/pluginManagement/plugins/plugin元素 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">executions</span>&gt;</span> </span><br><span class="line">                                <span class="tag">&lt;<span class="name">execution</span>&gt;</span> </span><br><span class="line">                                    <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span><span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">                                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">                                <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">                                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 参见build/pluginManagement/plugins/plugin元素 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span> </span><br><span class="line">                                <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span>&gt;</span><span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">                            <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">build</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的</span></span><br><span class="line"><span class="comment">                 相对路径 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--子项目相对路径--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">module</span>&gt;</span><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">modules</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 发现依赖和扩展的远程仓库列表。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 参见repositories/repository元素 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>&gt;</span><span class="tag">&lt;/<span class="name">layout</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>&gt;</span><span class="tag">&lt;/<span class="name">layout</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的</span></span><br><span class="line"><span class="comment">                 仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 不赞成使用. 现在Maven忽略该元素. --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">reports</span>&gt;</span><span class="tag">&lt;/<span class="name">reports</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 该元素包括使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看</span></span><br><span class="line"><span class="comment">                 到所有报表的链接。参见reporting元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">reporting</span>&gt;</span><span class="tag">&lt;/<span class="name">reporting</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 参见dependencyManagement元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 参见distributionManagement元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 参见properties元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--子项目相对路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 发现依赖和扩展的远程仓库列表。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 包含需要连接到远程仓库的信息 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 如何处理远程仓库里发布版本的下载 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），</span></span><br><span class="line"><span class="comment">                     daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，</span></span><br><span class="line"><span class="comment">                 为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-repository-proxy <span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 远程仓库名称 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> banseon-repository-proxy <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 远程仓库URL，按protocol://hostname/path形式 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://192.168.1.169:9999/repository/ <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认</span></span><br><span class="line"><span class="comment">                 的布局；然而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span> default <span class="tag">&lt;/<span class="name">layout</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。</span></span><br><span class="line"><span class="comment">         要获取更多信息，请看项目依赖机制。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 依赖的group ID --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span> org.apache.maven <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 依赖的artifact ID --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span> maven-artifact <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span> 3.8.1 <span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展</span></span><br><span class="line"><span class="comment">                 名或分类器。类型经常和使用的打包方式对应，尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。</span></span><br><span class="line"><span class="comment">                 如果设置extensions为 true，就可以在plugin里定义新的类型。所以前面的类型的例子不完整。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span> jar <span class="tag">&lt;/<span class="name">type</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，</span></span><br><span class="line"><span class="comment">                 如果你想要构建两个单独的构件成JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生</span></span><br><span class="line"><span class="comment">                 成两个单独的JAR构件。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">classifier</span>&gt;</span><span class="tag">&lt;/<span class="name">classifier</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 </span></span><br><span class="line"><span class="comment">                - compile ：默认范围，用于编译 </span></span><br><span class="line"><span class="comment">                - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath </span></span><br><span class="line"><span class="comment">                - runtime: 在执行时需要使用 </span></span><br><span class="line"><span class="comment">                - test: 用于test任务时使用 </span></span><br><span class="line"><span class="comment">                - system: 需要外在提供相应的元素。通过systemPath来取得 </span></span><br><span class="line"><span class="comment">                - systemPath: 仅用于范围为system。提供相应的路径 </span></span><br><span class="line"><span class="comment">                - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span> test <span class="tag">&lt;/<span class="name">scope</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件</span></span><br><span class="line"><span class="comment">                 系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如$&#123;java.home&#125;。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span><span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的</span></span><br><span class="line"><span class="comment">                 依赖。此元素主要用于解决版本冲突问题 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span> spring-core <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span> org.springframework <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。</span></span><br><span class="line"><span class="comment">                 可选依赖阻断依赖的传递性。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span> true <span class="tag">&lt;/<span class="name">optional</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 不赞成使用. 现在Maven忽略该元素. --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">reports</span>&gt;</span><span class="tag">&lt;/<span class="name">reports</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">reporting</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">excludeDefaults</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;/site。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 使用的报表插件和他们的配置。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- plugin元素包含描述报表插件需要的信息 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 报表插件在仓库里的group ID --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 报表插件在仓库里的artifact ID --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 被使用的报表插件的版本（或版本范围） --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 任何配置是否被传播到子项目 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 报表插件的配置 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，</span></span><br><span class="line"><span class="comment">                     有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报</span></span><br><span class="line"><span class="comment">                     表集，对应另一个执行目标 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">reportSets</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 表示报表的一个集合，以及产生该集合的配置 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">reportSet</span>&gt;</span> </span><br><span class="line">                        <span class="comment">&lt;!-- 报表集合的唯一标识符，POM继承时用到 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 产生报表集合时，被使用的报表的配置 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 配置是否被继承到子POMs --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 这个集合里使用到哪些报表 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">reports</span>&gt;</span><span class="tag">&lt;/<span class="name">reports</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">reportSet</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">reportSets</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖</span></span><br><span class="line"><span class="comment">        （必须描述group ID和artifact ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过</span></span><br><span class="line"><span class="comment">            group ID和artifact ID匹配到这里的依赖，并使用这里的依赖信息。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者</span></span><br><span class="line"><span class="comment">         把构件部署到远程仓库。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 部署项目产生的构件到远程仓库需要的信息 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见</span></span><br><span class="line"><span class="comment">                 repositories/repository元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">uniqueVersion</span> /&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-maven2 <span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> banseon maven2 <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span> file://$&#123;basedir&#125;/target/deploy <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span><span class="tag">&lt;/<span class="name">layout</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见</span></span><br><span class="line"><span class="comment">             distributionManagement/repository元素 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">uniqueVersion</span> /&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-maven2 <span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> Banseon-maven2 Snapshot Repository <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span> scp://svn.baidu.com/banseon:/usr/local/maven-snapshot <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 部署项目的网站需要的信息 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">site</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-site <span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 部署位置的名称 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> business api website <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 部署位置的URL，按protocol://hostname/path形式 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span> </span><br><span class="line">                scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web </span><br><span class="line">            <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">site</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位</span></span><br><span class="line"><span class="comment">             那些不在仓库里的构件（由于license限制）。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">downloadUrl</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">relocation</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 构件新的group ID --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 构件新的artifact ID --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 构件新的版本号 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 显示给用户的，关于移动的额外信息，例如原因。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span>&gt;</span><span class="tag">&lt;/<span class="name">message</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值</span></span><br><span class="line"><span class="comment">             有：none（默认），converted（仓库管理员从Maven 1 POM转换过来），partner（直接从伙伴Maven </span></span><br><span class="line"><span class="comment">             2仓库同步过来），deployed（从Maven 2实例部署），verified（被核实时正确的和最终的）。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">status</span>&gt;</span><span class="tag">&lt;/<span class="name">status</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里</span></span><br><span class="line"><span class="comment">         activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>value<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span> </span><br></pre></td></tr></table></figure><h1 id="附件2：POM文件单项配置说明"><a href="#附件2：POM文件单项配置说明" class="headerlink" title="附件2：POM文件单项配置说明"></a>附件2：POM文件单项配置说明</h1><h2 id="localRepository"><a href="#localRepository" class="headerlink" title="localRepository"></a>localRepository</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 本地仓库的路径。默认值为$&#123;user.home&#125;/.m2/repository。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>usr/local/maven<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="interactiveMode"><a href="#interactiveMode" class="headerlink" title="interactiveMode"></a>interactiveMode</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Maven是否需要和用户交互以获得输入。如果Maven需要和用户交互以获得输入，则设置成true，反之则应为false。默认为true。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interactiveMode</span>&gt;</span>true<span class="tag">&lt;/<span class="name">interactiveMode</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="usePluginRegistry"><a href="#usePluginRegistry" class="headerlink" title="usePluginRegistry"></a>usePluginRegistry</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Maven是否需要使用plugin-registry.xml文件来管理插件版本。如果需要让Maven使用文件$&#123;user.home&#125;/.m2/plugin-registry.xml来管理插件版本，则设为true。默认为false。--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">usePluginRegistry</span>&gt;</span>false<span class="tag">&lt;/<span class="name">usePluginRegistry</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="offline"><a href="#offline" class="headerlink" title="offline"></a>offline</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--表示Maven是否需要在离线模式下运行。如果构建系统需要在离线模式下运行，则为true，默认为false。当由于网络设置原因或者安全因素，构建服务器不能连接远程仓库的时候，该配置就十分有用。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">offline</span>&gt;</span>false<span class="tag">&lt;/<span class="name">offline</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="pluginGroups"><a href="#pluginGroups" class="headerlink" title="pluginGroups"></a>pluginGroups</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--当插件的组织Id（groupId）没有显式提供时，供搜寻插件组织Id（groupId）的列表。该元素包含一个pluginGroup元素列表，每个子元素包含了一个组织Id（groupId）。当我们使用某个插件，并且没有在命令行为其提供组织Id（groupId）的时候，Maven就会使用该列表。默认情况下该列表包含了org.apache.maven.plugins和org.codehaus.mojo --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--plugin的组织Id（groupId） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="proxies"><a href="#proxies" class="headerlink" title="proxies"></a>proxies</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--用来配置不同的代理，多代理profiles 可以应对笔记本或移动设备的工作环境：通过简单的设置profile id就可以很容易的更换整个代理配置。 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--代理元素包含配置代理时需要的信息--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxy</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--代理的唯一定义符，用来区分不同的代理元素。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>myproxy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--该代理是否是激活的那个。true则激活代理。当我们声明了一组代理，而某个时候只需要激活一个代理的时候，该元素就可以派上用处。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">active</span>&gt;</span>true<span class="tag">&lt;/<span class="name">active</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--代理的协议。 协议://主机名:端口，分隔成离散的元素以方便配置。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">protocol</span>&gt;</span>http<span class="tag">&lt;/<span class="name">protocol</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--代理的主机名。协议://主机名:端口，分隔成离散的元素以方便配置。  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">host</span>&gt;</span>proxy.somewhere.com<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--代理的端口。协议://主机名:端口，分隔成离散的元素以方便配置。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--代理的用户名，用户名和密码表示代理服务器认证的登录名和密码。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">username</span>&gt;</span>proxyuser<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--代理的密码，用户名和密码表示代理服务器认证的登录名和密码。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">password</span>&gt;</span>somepassword<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--不该被代理的主机名列表。该列表的分隔符由代理服务器指定；例子中使用了竖线分隔符，使用逗号分隔也很常见。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">nonProxyHosts</span>&gt;</span>*.google.com|ibiblio.org<span class="tag">&lt;/<span class="name">nonProxyHosts</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">proxy</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="servers"><a href="#servers" class="headerlink" title="servers"></a>servers</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置服务端的一些设置。一些设置如安全证书不应该和pom.xml一起分发。这种类型的信息应该存在于构建服务器上的settings.xml文件中。--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--服务器元素包含配置服务器时需要的信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>server001<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--鉴权用户名。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">username</span>&gt;</span>my_login<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--鉴权密码 。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。密码加密功能已被添加到2.1.0 +。详情请访问密码加密页面--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">password</span>&gt;</span>my_password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--鉴权时使用的私钥位置。和前两个元素类似，私钥位置和私钥密码指定了一个私钥的路径（默认是$&#123;user.home&#125;/.ssh/id_dsa）以及如果需要的话，一个密语。将来passphrase和password元素可能会被提取到外部，但目前它们必须在settings.xml文件以纯文本的形式声明。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">privateKey</span>&gt;</span>$&#123;usr.home&#125;/.ssh/id_dsa<span class="tag">&lt;/<span class="name">privateKey</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--鉴权时使用的私钥密码。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">passphrase</span>&gt;</span>some_passphrase<span class="tag">&lt;/<span class="name">passphrase</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。这两个元素合法的值是一个三位数字，其对应了unix文件系统的权限，如664，或者775。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filePermissions</span>&gt;</span>664<span class="tag">&lt;/<span class="name">filePermissions</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--目录被创建时的权限。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">directoryPermissions</span>&gt;</span>775<span class="tag">&lt;/<span class="name">directoryPermissions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="mirrors"><a href="#mirrors" class="headerlink" title="mirrors"></a>mirrors</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--为仓库列表配置的下载镜像列表。高级设置请参阅镜像设置页面 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--给定仓库的下载镜像。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--该镜像的唯一标识符。id用来区分不同的mirror元素。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>planetmirror.com<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--镜像名称 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>PlanetMirror Australia<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://downloads.planetmirror.com/pub/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--被镜像的服务器的id。例如，如果我们要设置了一个Maven中央仓库（http://repo.maven.apache.org/maven2/）的镜像，就需要将该元素设置成central。这必须和中央仓库的id central完全一致。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="profiles"><a href="#profiles" class="headerlink" title="profiles"></a>profiles</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据环境参数来调整构建配置的列表。settings.xml中的profile元素是pom.xml中profile元素的裁剪版本。它包含了id，activation, repositories, pluginRepositories和 properties元素。这里的profile元素只包含这五个子元素是因为这里只关心构建系统这个整体（这正是settings.xml文件的角色定位），而非单独的项目对象模型设置。如果一个settings中的profile被激活，它的值会覆盖任何其它定义在POM中或者profile.xml中的带有相同id的profile。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--根据环境参数来调整的构件的配置--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--该配置的唯一标识符。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Activation"><a href="#Activation" class="headerlink" title="Activation"></a>Activation</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。如POM中的profile一样，profile的力量来自于它能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。settings.xml文件中的activeProfile元素可以包含profile的id。profile也可以通过在命令行，使用-P标记和逗号分隔的列表来显式的激活（如，-P test）。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--profile默认是否激活的标识--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>false<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--激活profile的操作系统的名字 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows XP<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--激活profile的操作系统所属家族(如 &#x27;windows&#x27;)  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--激活profile的操作系统体系结构  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--激活profile的操作系统版本--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2600<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果Maven检测到某一个属性（其值可以在POM中通过$&#123;name&#125;引用），其拥有对应的name = 值，Profile就会被激活。如果值字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--激活profile的属性的名称--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>mavenVersion<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--激活profile的属性的值 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--如果指定的文件存在，则激活profile。 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">exists</span>&gt;</span>$&#123;basedir&#125;/file2.properties<span class="tag">&lt;/<span class="name">exists</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--如果指定的文件不存在，则激活profile。--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">missing</span>&gt;</span>$&#123;basedir&#125;/file1.properties<span class="tag">&lt;/<span class="name">missing</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Repositories"><a href="#Repositories" class="headerlink" title="Repositories"></a>Repositories</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--远程仓库列表，它是Maven用来填充构建系统本地仓库所使用的一组远程项目。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--包含需要连接到远程仓库的信息 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--远程仓库唯一标识--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>codehausSnapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--远程仓库名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Codehaus Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如何处理远程仓库里发布版本的下载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--当Maven验证构件校验文件失败时该怎么做-ignore（忽略），fail（失败），或者warn（警告）。--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--远程仓库URL，按protocol://hostname/path形式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://snapshots.maven.codehaus.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--发现插件的远程仓库列表。仓库是两种主要构件的家。第一种构件被用作其它构件的依赖。这是中央仓库中存储的大部分构件类型。另外一种构件类型是插件。Maven插件是一种特殊类型的构件。由于这个原因，插件仓库独立于其它仓库。pluginRepositories元素的结构和repositories元素的结构类似。每个pluginRepository元素指定一个Maven可以用来寻找新插件的远程地址。--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--包含需要连接到远程插件仓库的信息.参见profiles/profile/repositories/repository元素的说明--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span>           </span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span>      </span><br><span class="line">     <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>/&gt;</span><span class="tag">&lt;<span class="name">name</span>/&gt;</span><span class="tag">&lt;<span class="name">url</span>/&gt;</span><span class="tag">&lt;<span class="name">layout</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="activeProfiles"><a href="#activeProfiles" class="headerlink" title="activeProfiles"></a>activeProfiles</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--手动激活profiles的列表，按照profile被应用的顺序定义activeProfile。 该元素包含了一组activeProfile元素，每个activeProfile都含有一个profile id。任何在activeProfile中定义的profile id，不论环境设置如何，其对应的</span></span><br><span class="line"><span class="comment">        profile都会被激活。如果没有匹配的profile，则什么都不会发生。例如，env-test是一个activeProfile，则在pom.xml（或者profile.xml）中对应id的profile会被激活。如果运行过程中找不到这样一个profile，Maven则会像往常一样运行。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>env-test<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EL&amp;Filter&amp;Listener</title>
      <link href="/2022/02/25/JavaWeb/JavaWeb%E6%A0%B8%E5%BF%83/EL&amp;Filter&amp;Listener/"/>
      <url>/2022/02/25/JavaWeb/JavaWeb%E6%A0%B8%E5%BF%83/EL&amp;Filter&amp;Listener/</url>
      
        <content type="html"><![CDATA[<h1 id="EL-amp-Filter-amp-Listener"><a href="#EL-amp-Filter-amp-Listener" class="headerlink" title="EL&amp;Filter&amp;Listener"></a>EL&amp;Filter&amp;Listener</h1><h2 id="EL"><a href="#EL" class="headerlink" title="EL"></a>EL</h2><h3 id="1-对不同数据类型的对象"><a href="#1-对不同数据类型的对象" class="headerlink" title="1.对不同数据类型的对象"></a>1.对不同数据类型的对象</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;EL表达式获取不同类型数据&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--<span class="number">1.</span>获取基本数据类型--%&gt;</span><br><span class="line">    &lt;% pageContext.setAttribute(<span class="string">&quot;num&quot;</span>,<span class="number">10</span>); %&gt;</span><br><span class="line">    基本数据类型: $&#123;num&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--<span class="number">2.</span>获取自定义对象类型--%&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;20&quot;</span>);</span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;stu&quot;</span>,stu);</span><br><span class="line">    %&gt;</span><br><span class="line">    自定义对象: $&#123;stu&#125; &lt;br&gt;</span><br><span class="line">    学生姓名: $&#123;stu.name&#125; &lt;br&gt;</span><br><span class="line">    学生年龄: $&#123;stu.age&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--<span class="number">3.</span>获取数组类型--%&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;world&quot;</span>&#125;;</span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;arr&quot;</span>,arr);</span><br><span class="line">    %&gt;</span><br><span class="line">    数组: $&#123;arr&#125; &lt;br&gt;</span><br><span class="line">    <span class="number">0</span>索引元素: $&#123;arr[<span class="number">0</span>]&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--<span class="number">4.</span>获取List集合--%&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;nihao&quot;</span>);</span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">    %&gt;</span><br><span class="line">    集合: $&#123;list&#125; &lt;br&gt;</span><br><span class="line">    <span class="number">0</span>索引元素: $&#123;list[<span class="number">0</span>]&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--<span class="number">5.</span>获取Map集合--%&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        HashMap&lt;String,Student&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;j01&quot;</span>,<span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;20&quot;</span>));</span><br><span class="line">        map.put(<span class="string">&quot;j02&quot;</span>,<span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;23&quot;</span>));</span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;map&quot;</span>,map);</span><br><span class="line">    %&gt;</span><br><span class="line">    Map集合: $&#123;map&#125; &lt;br&gt;</span><br><span class="line">    第一个学生对象: $&#123;map.j01&#125; &lt;br&gt;</span><br><span class="line">    第一个学生对象的值: $&#123;map.j01.name&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="2-注意"><a href="#2-注意" class="headerlink" title="2.注意"></a>2.注意</h3><ol><li>没有空指针异常</li><li>没有数组越界</li><li>没有字符串拼接</li></ol><h3 id="3-两个特殊运算符"><a href="#3-两个特殊运算符" class="headerlink" title="3.两个特殊运算符"></a>3.两个特殊运算符</h3><h4 id="1-emty"><a href="#1-emty" class="headerlink" title="1.emty"></a>1.emty</h4><ul><li>可以判断null</li><li>可以判断“”</li><li>可以判断 0</li></ul><h4 id="2-三目运算"><a href="#2-三目运算" class="headerlink" title="2. 三目运算"></a>2. 三目运算</h4><ul><li>类似于java</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;EL表达式运算&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--empty--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String str1 = <span class="keyword">null</span>;</span><br><span class="line">    String str2 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;&#125;;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">$&#123;empty str1&#125; &lt;br&gt;</span><br><span class="line">$&#123;empty str2&#125; &lt;br&gt;</span><br><span class="line">$&#123;empty arr&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--三元运算符--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;gender&quot;</span>,<span class="string">&quot;men&quot;</span>);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;gender&quot;</span> value=<span class="string">&quot;men&quot;</span> $&#123;gender == <span class="string">&quot;men&quot;</span> ? <span class="string">&quot;checked&quot;</span> : <span class="string">&quot;&quot;</span>&#125;&gt;男</span><br><span class="line">&lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;gender&quot;</span> value=<span class="string">&quot;women&quot;</span> $&#123;gender == <span class="string">&quot;women&quot;</span> ? <span class="string">&quot;checked&quot;</span> : <span class="string">&quot;&quot;</span>&#125;&gt;女</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="4-获取四大域对象-amp-获取JSP中其他八个隐式对象"><a href="#4-获取四大域对象-amp-获取JSP中其他八个隐式对象" class="headerlink" title="4.获取四大域对象&amp;获取JSP中其他八个隐式对象"></a>4.获取四大域对象&amp;获取JSP中其他八个隐式对象</h3><ol><li>${username}</li><li>${pageContext.request.contextPath}</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;EL使用细节&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--获取四大域对象中的数据--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//pageContext.setAttribute(&quot;username&quot;,&quot;zhangsan&quot;);</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">    <span class="comment">//session.setAttribute(&quot;username&quot;,&quot;wagnmazi&quot;);</span></span><br><span class="line">    <span class="comment">//application.setAttribute(&quot;username&quot;,&quot;dasahibi&quot;);</span></span><br><span class="line">%&gt;</span><br><span class="line">    $&#123;username&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%--获取JSP中其他八个隐私对象 获取虚拟目录名称--%&gt;</span><br><span class="line">    &lt;%=</span><br><span class="line">        request.getContextPath()</span><br><span class="line">    %&gt;</span><br><span class="line">    $&#123;pageContext.request.contextPath&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-EL表达式11个隐式对象使用"><a href="#5-EL表达式11个隐式对象使用" class="headerlink" title="5. EL表达式11个隐式对象使用"></a>5. EL表达式11个隐式对象使用</h3><ul><li>代码<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;EL表达式<span class="number">11</span>个隐式对象&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--pageContext对象 可以获取其他三个域对象和JSP中八个隐式对象--%&gt;</span><br><span class="line">    $&#123;pageContext.request.contextPath&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--applicationScope sessionScope requestScope pageScope 操作四大域对象中的数据--%&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        request.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">    $&#123;username&#125; &lt;br&gt;</span><br><span class="line">    $&#123;requestScope.username&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--header headerValues  获取请求头数据--%&gt;</span><br><span class="line">    $&#123;header[<span class="string">&quot;connection&quot;</span>]&#125; &lt;br&gt;</span><br><span class="line">    $&#123;headerValues[<span class="string">&quot;connection&quot;</span>][<span class="number">0</span>]&#125; &lt;br&gt;</span><br><span class="line">    $&#123;headerValues&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--param paramValues 获取请求参数数据--%&gt;</span><br><span class="line">    $&#123;param.username&#125; &lt;br&gt;</span><br><span class="line">    $&#123;paramValues.hobby[<span class="number">0</span>]&#125; &lt;br&gt;</span><br><span class="line">    $&#123;paramValues.hobby[<span class="number">1</span>]&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--initParam 获取全局配置参数--%&gt;</span><br><span class="line">    $&#123;initParam[<span class="string">&quot;pname&quot;</span>]&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--cookie 获取cookie信息--%&gt;</span><br><span class="line">    $&#123;cookie&#125; &lt;br&gt; &lt;%--获取map集合--%&gt;</span><br><span class="line">    $&#123;cookie.JSESSIONID&#125; &lt;br&gt;</span><br><span class="line">    $&#123;cookie.JSESSIONID.name&#125; &lt;br&gt;</span><br><span class="line">    $&#123;cookie.JSESSIONID.value&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> JavaWeb核心 </category>
          
          <category> EL&amp;Filter&amp;Listener </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EL&amp;Filter&amp;Listener </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie&amp;Session&amp;Jsp</title>
      <link href="/2022/02/21/JavaWeb/JavaWeb%E6%A0%B8%E5%BF%83/Cookie&amp;Session&amp;Jsp/"/>
      <url>/2022/02/21/JavaWeb/JavaWeb%E6%A0%B8%E5%BF%83/Cookie&amp;Session&amp;Jsp/</url>
      
        <content type="html"><![CDATA[<h1 id="Cookie-amp-Session-amp-Jsp"><a href="#Cookie-amp-Session-amp-Jsp" class="headerlink" title="Cookie&amp;Session&amp;Jsp"></a>Cookie&amp;Session&amp;Jsp</h1><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ol><li>会生成一个本地文件</li></ol><h3 id="基本创建和使用"><a href="#基本创建和使用" class="headerlink" title="基本创建和使用"></a>基本创建和使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/ServletDemo01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.通过响应对象写出提示信息</span></span><br><span class="line">        PrintWriter pw = resp.getWriter();</span><br><span class="line">        pw.write(<span class="string">&quot;Welcome this Web! last accent time: &lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建Cookie对象，用于记录最后访问的时间</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;time&quot;</span>,System.currentTimeMillis() + <span class="string">&quot;&quot;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.设置最大存活时间</span></span><br><span class="line">        cookie.setMaxAge(<span class="number">3600</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.将cookie对象添加到客户端</span></span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.获取cookie</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;time&quot;</span>.equals(c.getName())) &#123;</span><br><span class="line">                <span class="comment">//6.获取cookie对象中的value,进行写出</span></span><br><span class="line">                String value = c.getValue();</span><br><span class="line">                SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">                pw.write(sdf.format(<span class="keyword">new</span> Date(Long.parseLong(value))));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//CookieDetails.png" alt="CookieDetail"></p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="HttpSession介绍"><a href="#HttpSession介绍" class="headerlink" title="HttpSession介绍"></a>HttpSession介绍</h3><ol><li>会话域</li></ol><h3 id="1-3-4禁用Cookie"><a href="#1-3-4禁用Cookie" class="headerlink" title="1.3.4禁用Cookie"></a>1.3.4禁用Cookie</h3><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//SessionDetails.png" alt="Details"></p><ul><li>我们平常浏览网页，产生的数据是用Cookie记录的，有些网站需要获取他们，给我们推送信息，如淘宝给我们推送感兴趣的东西和购物车记录等。</li><li>禁用后不会生效</li><li>用户禁用解决办法：</li></ul><ol><li>提示接触</li><li>更改url,加上jsessionid</li></ol><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%--<span class="number">1.</span>这是注释--%&gt;</span><br><span class="line">    &lt;%--<span class="number">2.</span>java代码块--%&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello,Jsp!&quot;</span>); <span class="comment">//输出控制台</span></span><br><span class="line">        out.println(<span class="string">&quot;Hello JSP&lt;br&gt;&quot;</span>); <span class="comment">// 输出页面</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// println和&lt;br&gt;同时存在才能换行</span></span><br><span class="line">        String str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        out.println(str);</span><br><span class="line">    %&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%--</span><br><span class="line">        <span class="number">3.</span> Jsp表达式</span><br><span class="line">        相当于: out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    --%&gt;</span><br><span class="line">    &lt;%=<span class="string">&quot;Hello&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%--</span><br><span class="line">        <span class="number">4.</span> jsp中的声明</span><br><span class="line">    --%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%! String s = <span class="string">&quot;abv&quot;</span>; %&gt;</span><br><span class="line">    &lt;% String s = <span class="string">&quot;def&quot;</span>; %&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%=s%&gt;</span><br></pre></td></tr></table></figure></li></ul><p>** 注意： &lt;%! %&gt;中定义的变量方法相当于全局变量、方法；而在&lt;% %&gt;中定义的变量为、_jspService方法中的局部变量**</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> JavaWeb核心 </category>
          
          <category> Cookie&amp;Session&amp;Jsp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cookie&amp;Session&amp;Jsp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求和响应</title>
      <link href="/2022/02/19/JavaWeb/JavaWeb%E6%A0%B8%E5%BF%83/Request&amp;Response/"/>
      <url>/2022/02/19/JavaWeb/JavaWeb%E6%A0%B8%E5%BF%83/Request&amp;Response/</url>
      
        <content type="html"><![CDATA[<h1 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h1><h1 id="请求对象"><a href="#请求对象" class="headerlink" title="请求对象"></a>请求对象</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>请求：获取资源。在BS架构中，就是客户端浏览器向服务器端发出询问。</li><li>请求对象：就是在项目中用于发送请求的对象。如：ServletRequest、HttpServletRequest。</li></ul><h2 id="常用方法介绍"><a href="#常用方法介绍" class="headerlink" title="常用方法介绍"></a>常用方法介绍</h2><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//%E5%93%8D%E5%BA%94%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3.png" alt="响应方法详解"></p><h2 id="请求对象的使用示例"><a href="#请求对象的使用示例" class="headerlink" title="请求对象的使用示例"></a>请求对象的使用示例</h2><h3 id="1-获取各种路径"><a href="#1-获取各种路径" class="headerlink" title="1. 获取各种路径"></a>1. 获取各种路径</h3><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//1.png" alt="Request获取各种路径"></p><ul><li>代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//本机地址：服务器地址</span></span><br><span class="line">        String localAddr = request.getLocalAddr();</span><br><span class="line">        <span class="comment">//本机名称：服务器名称</span></span><br><span class="line">        String localName = request.getLocalName();</span><br><span class="line">        <span class="comment">//本机端口：服务器端口</span></span><br><span class="line">        <span class="keyword">int</span> localPort = request.getLocalPort();</span><br><span class="line">        <span class="comment">//来访者ip</span></span><br><span class="line">        String remoteAddr = request.getRemoteAddr();</span><br><span class="line">        <span class="comment">//来访者主机</span></span><br><span class="line">        String remoteHost = request.getRemoteHost();</span><br><span class="line">        <span class="comment">//来访者端口</span></span><br><span class="line">        <span class="keyword">int</span> remotePort = request.getRemotePort();</span><br><span class="line">        <span class="comment">//统一资源标识符</span></span><br><span class="line">        String URI = request.getRequestURI();</span><br><span class="line">        <span class="comment">//统一资源定位符</span></span><br><span class="line">        String URL = request.getRequestURL().toString();</span><br><span class="line">        <span class="comment">//获取查询字符串</span></span><br><span class="line">        String queryString = request.getQueryString();</span><br><span class="line">        <span class="comment">//获取Servlet映射路径</span></span><br><span class="line">        String servletPath = request.getServletPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出内容</span></span><br><span class="line">System.out.println(<span class="string">&quot;getLocalAddr() is :&quot;</span>+localAddr);</span><br><span class="line">System.out.println(<span class="string">&quot;getLocalName() is :&quot;</span>+localName);</span><br><span class="line">System.out.println(<span class="string">&quot;getLocalPort() is :&quot;</span>+localPort);</span><br><span class="line">System.out.println(<span class="string">&quot;getRemoteAddr() is :&quot;</span>+remoteAddr);</span><br><span class="line">System.out.println(<span class="string">&quot;getRemoteHost() is :&quot;</span>+remoteHost);</span><br><span class="line">System.out.println(<span class="string">&quot;getRemotePort() is :&quot;</span>+remotePort);</span><br><span class="line">System.out.println(<span class="string">&quot;getRequestURI() is :&quot;</span>+URI);</span><br><span class="line">System.out.println(<span class="string">&quot;getRequestURL() is :&quot;</span>+URL);</span><br><span class="line">        System.out.println(<span class="string">&quot;getQueryString() is :&quot;</span>+queryString);</span><br><span class="line">        System.out.println(<span class="string">&quot;getServletPath() is :&quot;</span>+servletPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-获取请求头信息"><a href="#2-获取请求头信息" class="headerlink" title="2. 获取请求头信息"></a>2. 获取请求头信息</h3><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//ObtainRequestGeader.png" alt="获取请求头信息"></p><ul><li>其实getHeaders()、和getHeader()并不是获取一个值和多个值的区别，区别在于：getHeader()是将头所有的值按字符串的形式返回，而getHeaders()是将头的值的每一项保存在枚举集合中返回。</li><li>代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xxsleo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022/2/17 - 11:08</span></span><br><span class="line"><span class="comment"> * 获取请求头信息</span></span><br><span class="line"><span class="comment"> */</span><span class="meta">@WebServlet(&quot;/servletDemo02&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据请求头名称获取一个值</span></span><br><span class="line">        String connection = req.getHeader(<span class="string">&quot;connection&quot;</span>);</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        System.out.println(<span class="string">&quot;========&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.根据请求头名称获取多个值</span></span><br><span class="line">        Enumeration&lt;String&gt; values = req.getHeaders(<span class="string">&quot;accept-encoding&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (values.hasMoreElements())&#123;</span><br><span class="line">            String value = values.nextElement();</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取所有请求头的名称</span></span><br><span class="line">        Enumeration&lt;String&gt; headerNames = req.getHeaderNames();</span><br><span class="line">        <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">            String name = headerNames.nextElement();</span><br><span class="line">            String value = req.getHeader(name);</span><br><span class="line">            System.out.println(name +<span class="string">&quot;:&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-获取请求参数信息"><a href="#3-获取请求参数信息" class="headerlink" title="3. 获取请求参数信息"></a>3. 获取请求参数信息</h3><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//ObtainRequestParameter.png" alt="获取请求参数信息"></p><ul><li>代码:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletDemo03&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo03</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据名称获取数据   getParameter()</span></span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.根据名称获取所有数据 getParameterValues()</span></span><br><span class="line">        String[] hobbies = req.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String hobby : hobbies) &#123;</span><br><span class="line">            System.out.println(hobby);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取所有名称  getParameterNames()</span></span><br><span class="line">        Enumeration&lt;String&gt; parameterNames = req.getParameterNames();</span><br><span class="line">        <span class="keyword">while</span>(parameterNames.hasMoreElements()) &#123;</span><br><span class="line">            String name = parameterNames.nextElement();</span><br><span class="line">            String value = req.getParameter(name);</span><br><span class="line">            System.out.println(name + <span class="string">&quot;:&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.获取所有参数的键值对 getParameterMap()</span></span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();</span><br><span class="line">        <span class="keyword">for</span> (String key : parameterMap.keySet()) &#123;</span><br><span class="line">            String[] values = parameterMap.get(key);</span><br><span class="line">            System.out.print(key + <span class="string">&quot;:&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String value : values) &#123;</span><br><span class="line">                System.out.print(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/RequestDemo01_war_exploded/servletDemo03&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">        姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;study&quot;</span>&gt;</span>学习</span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span>&gt;</span>游戏 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>注意：getParameterMap()为最常用方法</strong></li></ul><h2 id="获取请求对象并封装对象"><a href="#获取请求对象并封装对象" class="headerlink" title="获取请求对象并封装对象"></a>获取请求对象并封装对象</h2><ul><li>我们通过上面的方法可以获取到请求参数，但是如果参数过多，在进行传递时，方法的形参定义将会变得非常难看。此时我们应该用一个对象来描述这些参数，它就是实体类。这种类的定义，从基础阶段我们就开始使用了。在基础阶段，我们做过一个学生管理系统，用到了一个Student的类，它就是用于描述一个学生的实体类。<h3 id="1-手动封装"><a href="#1-手动封装" class="headerlink" title="1. 手动封装"></a>1. 手动封装</h3></li><li>创建一个对象</li><li>用req.getParameter、req.getParameterValues()获取数据，用该数据创造对象</li></ul><p><strong>优点：实现了对象的重复利用</strong><br><strong>缺点：一次只能拿一个数据，太麻烦</strong></p><h3 id="2-反射封装"><a href="#2-反射封装" class="headerlink" title="2. 反射封装"></a>2. 反射封装</h3><ul><li>创建一个对象</li><li>用req. ParameterMap()获取数据，用该数据<strong>利用反射的方式</strong>创造对象</li></ul><p><strong>优点：实现了一次只赋值数据</strong><br><strong>缺点：但是书写麻烦</strong></p><p><strong>反射方式解释：PropertyDescriptor对象的属性描述器，用它获得的是对象其中一个属性的类，有get、set方法，再通过writeMethod（）相当于set方法，给该对象的该属性赋值。</strong></p><ul><li>代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    封装对象-反射方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servletDemo05&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo05</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取所有数据</span></span><br><span class="line">        Map&lt;String, String[]&gt; map = req.getParameterMap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.封装学生对象--反射</span></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//2.1遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (String  name : map.keySet()) &#123;</span><br><span class="line">            String[] value = map.get(name);</span><br><span class="line">            <span class="comment">//2.2获取Student对象的属性描述器</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                PropertyDescriptor pd = <span class="keyword">new</span> PropertyDescriptor(name,stu.getClass());</span><br><span class="line">                <span class="comment">//2.3获取对应的setXxx方法</span></span><br><span class="line">                Method writeMethod = pd.getWriteMethod();</span><br><span class="line">                <span class="comment">//2.4执行方法</span></span><br><span class="line">                <span class="keyword">if</span> (value.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    writeMethod.invoke(stu, (Object) value);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    writeMethod.invoke(stu,value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.输出对象</span></span><br><span class="line">        System.out.println(stu);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-工具类封装"><a href="#3-工具类封装" class="headerlink" title="3. 工具类封装"></a>3. 工具类封装</h3><ul><li>创建一个对象</li><li>用req. ParameterMap()获取数据，用工具类中的方法创造对象。</li><li></li></ul><p><strong>优点：简单、省事</strong><br><strong>缺点：需要导包</strong></p><p><em>需要的两个jar包：1.commons-beanutils-1.9.4.jar,2.commons-logging-1.2.jar<br> 来自阿帕奇</em></p><ul><li>代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    封装对象-工具类方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servletDemo06&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo06</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取所有数据</span></span><br><span class="line">        Map&lt;String, String[]&gt; map = req.getParameterMap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.封装学生对象--反射</span></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.populate(stu, map);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.输出对象</span></span><br><span class="line">            System.out.println(stu);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="流对象获取请求数据"><a href="#流对象获取请求数据" class="headerlink" title="流对象获取请求数据"></a>流对象获取请求数据</h2><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//StreamObtainRequest.png" alt="流对象获取请求数据"><br>==只适用于post方式==<br><strong>作用：主要用字节流来读一些二进制的文件</strong></p><ul><li>代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符流</span></span><br><span class="line">        BufferedReader br = req.getReader();</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//br.close();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字节流</span></span><br><span class="line">        ServletInputStream is = req.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(arr)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(arr,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><p><em>注意：字节流和字符流只能同时用一个</em></p><h2 id="请求正文中中文编码问题"><a href="#请求正文中中文编码问题" class="headerlink" title="请求正文中中文编码问题"></a>请求正文中中文编码问题</h2><h3 id="1-GET方式"><a href="#1-GET方式" class="headerlink" title="1. GET方式"></a>1. GET方式</h3><ul><li>没有乱码问题，在Tomcat8版本后已经解决 ！</li></ul><h3 id="1-POST方式"><a href="#1-POST方式" class="headerlink" title="1. POST方式"></a>1. POST方式</h3><ul><li>有乱码问题，可以通过setCharacterEncoding()方法来解决！<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><ul><li>客户端的一次请求到达后，发现需要借助其他Servlet来实现功能。</li></ul><p><strong>+ 特点</strong>：</p><ol><li>浏览器地址栏不变</li><li>域对象中的数据不变</li><li>负责转发的Servlet转发前后的响应正文会丢失</li><li>由转发的目的地来影响客户端</li></ol><h3 id="请求域"><a href="#请求域" class="headerlink" title="请求域"></a>请求域</h3><ul><li>又称request域：可以在一次请求范围内进行共享数据</li><li>一般用于请求转发的多个资源中共享数据</li><li>请求对象操作共享数据的方法：<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//RequestShareData.png" alt="请求对象操作共享数据的方法"></li></ul><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//RequestForward.png" alt="请求转发"></p><ul><li>ServletDemo09代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/ServletDemo09&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo09</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置共享数据</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;encoding&quot;</span>,<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取请求调度对象</span></span><br><span class="line">        RequestDispatcher rd = req.getRequestDispatcher(<span class="string">&quot;/ServletDemo10&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实现转发功能</span></span><br><span class="line">        rd.forward(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>ServletDemo10代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/ServletDemo10&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo10</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取共享数据</span></span><br><span class="line">        Object encoding = req.getAttribute(<span class="string">&quot;encoding&quot;</span>);</span><br><span class="line">        System.out.println(encoding);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ServletDemo10执行了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求包含"><a href="#请求包含" class="headerlink" title="请求包含"></a>请求包含</h2></li></ul><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><ul><li>可以合并其他Servlet中的功能，一起响应给客户端</li><li>** 特点：**</li></ul><ol><li>浏览器地址栏不变</li><li>域对象中的数据不丢失</li><li>被包含的Servlet响应头会丢失</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//RequestContain.png" alt="请求包含方法"></p><ul><li>ServletDemo11代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Servlet(<span class="string">&quot;/ServletDemo11&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo11</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取请求调度对象</span></span><br><span class="line">        RequestDispatcher rd = req.getRequestDispatcher(<span class="string">&quot;/ServletDemo12&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实现包含功能</span></span><br><span class="line">        rd.include(req,resp);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ServletDemo11执行了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>ServletDemo12代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/ServletDemo12&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo12</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ServletDemo12执行了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3></li></ul><p><strong>获取调度对象，实现包含在代码中位置不同，两个Servlet起作用时间不同</strong></p><h2 id="URI和URL的区别"><a href="#URI和URL的区别" class="headerlink" title="URI和URL的区别"></a>URI和URL的区别</h2><ul><li>URI：Universal Resource Identifier</li><li>URL：Universal Resource Locator</li><li>URL是URI的子集</li><li>URL就是用定位的方式实现的URI</li><li>假设所有的Html文档都有唯一的编号，记作html:xxxxx，xxxxx是一串数字，即Html文档的身份证号码，这个能唯一标识一个Html文档，那么这个号码就是一个URI。而URL则通过描述是哪个主机上哪个路径上的文件来唯一确定一个资源，也就是定位的方式来实现的URI</li></ul><h1 id="响应对象"><a href="#响应对象" class="headerlink" title="响应对象"></a>响应对象</h1><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><h2 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h2><p>常用状态码：</p><table><thead><tr><th align="center">状态码</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">200</td><td align="center">执行成功</td></tr><tr><td align="center">302</td><td align="center">它和307一样，都是用于重定向的状态码。只是307目前已不再使用</td></tr><tr><td align="center">304</td><td align="center">请求资源未改变，使用缓存。</td></tr><tr><td align="center">400</td><td align="center">请求错误。最常见的就是请求参数有问题</td></tr><tr><td align="center">404</td><td align="center">请求资源未找到</td></tr><tr><td align="center">405</td><td align="center">请求方式不被支持</td></tr><tr><td align="center">500</td><td align="center">服务器运行内部错误</td></tr></tbody></table><p>状态码首位含义：</p><table><thead><tr><th align="center">状态码</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">1xx</td><td align="center">消息</td></tr><tr><td align="center">2xx</td><td align="center">成功</td></tr><tr><td align="center">3xx</td><td align="center">重定向</td></tr><tr><td align="center">4xx</td><td align="center">客户端错误</td></tr><tr><td align="center">5xx</td><td align="center">服务器错误</td></tr></tbody></table><h2 id="字节流响应消息"><a href="#字节流响应消息" class="headerlink" title="字节流响应消息"></a>字节流响应消息</h2><ul><li>ServletOutputStream os = resp.getOutputStream()</li><li>os.write(str.getBytes(“UTF-8”))</li></ul><h2 id="字符流响应消息"><a href="#字符流响应消息" class="headerlink" title="字符流响应消息"></a>字符流响应消息</h2><ul><li>PrintStream ps = resp.getWrite();</li><li>ps.write(str)</li></ul><p><em>注意：因为idea为utf-8编码，浏览器默认为gbk编码，说以会出现乱码问题</em><br><strong>需在开头加一个resp.setContentType(“text/html:charset=UTF-8”)</strong></p><h2 id="响应图片"><a href="#响应图片" class="headerlink" title="响应图片"></a>响应图片</h2><ol><li>创建字节流输入对象，关联读取图片路径</li><li>通过响应对象获取字节输出流对象</li><li>循环读取和写出图片</li></ol><ul><li>代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/ServletDemo03&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo03</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//通过文件相对路径获取绝对路径</span></span><br><span class="line">        String realPath = getServletContext().getRealPath(<span class="string">&quot;/img/RequestForward.png&quot;</span>);</span><br><span class="line">        System.out.println(realPath);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建字节输入流对象，关联图片路径</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(realPath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过响应对象获取字节输出流对象</span></span><br><span class="line">        ServletOutputStream os = resp.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环读写</span></span><br><span class="line">        <span class="keyword">byte</span> [] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(arr)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(arr,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意：图片路径为虚拟路径，需要利用获取ServletContext()的getrealPath方法，获取真实路径</strong></p><h2 id="设置缓存"><a href="#设置缓存" class="headerlink" title="设置缓存"></a>设置缓存</h2><h2 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h2><ul><li>客户端的一次请求到达后，发现需要借助其他Servlet来实现功能。</li><li><strong>特点：</strong></li></ul><ol><li>浏览器地址栏会发生改变</li><li>两次请求</li><li>请求域对象助攻不能共享数据</li><li>可以重定向到其他服务器</li></ol><ul><li><p>实现原理：<br>  设置响应状态码为：302.<br>  resp.setStatus(302);<br>  设置响应的资源路径(响应到哪里，通过响应头location来指定)<br>  resp.setHeader(“location”, “/responseDemo07”);</p></li><li><p>响应重定向==方法==： void     sendRedirect(String name)    设置重定向</p></li><li><p>ServletDemo06代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/ServletDemo06&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo06</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletDemo06执行了&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置请求域共享对象</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置重定向</span></span><br><span class="line">        resp.sendRedirect(req.getContextPath() + <span class="string">&quot;/ServletDemo07&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以重定向到其他服务器</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ServletDemo07代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/ServletDemo07&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo07</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletDemo07执行了&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取共享数据</span></span><br><span class="line">        Object username = req.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="请求转发和请求重定向使用选择"><a href="#请求转发和请求重定向使用选择" class="headerlink" title="请求转发和请求重定向使用选择"></a>请求转发和请求重定向使用选择</h3><p><strong>是否需要共享数据</strong></p><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//ResponseFileDownload.png" alt="文件下载设置步骤"></p><ul><li>代码:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">```java</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo8</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 文件下载的思路：</span></span><br><span class="line"><span class="comment">         * 1.获取文件路径</span></span><br><span class="line"><span class="comment">         * 2.把文件读到字节输入流中</span></span><br><span class="line"><span class="comment">         * 3.告知浏览器，以下载的方式打开（告知浏览器下载文件的MIME类型）</span></span><br><span class="line"><span class="comment">         * 4.使用响应对象的字节输出流输出到浏览器上</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//1.获取文件路径（绝对路径）</span></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String filePath = context.getRealPath(<span class="string">&quot;/uploads/6.jpg&quot;</span>);<span class="comment">//通过文件的虚拟路径，获取文件的绝对路径</span></span><br><span class="line">        <span class="comment">//2.通过文件路径构建一个字节输入流</span></span><br><span class="line">        InputStream in  = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line">        <span class="comment">//3.设置响应消息头</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *  Content-Type 消息头名称 支持类型</span></span><br><span class="line"><span class="comment">        *  application/octet-stream 消息头参数 应用的类型为字节流*/</span></span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/octet-stream&quot;</span>);<span class="comment">//注意下载的时候，设置响应正文的MIME类型，用application/octet-stream</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *  Content-Disposition 消息头名称 处理方式</span></span><br><span class="line"><span class="comment">        *  attachment;filename=000 消息头参数 附件形式进行处理 指定下载文件的名称*/</span></span><br><span class="line">        </span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);<span class="comment">//告知浏览器以下载的方式打开</span></span><br><span class="line">        <span class="comment">//4.使用响应对象的字节输出流输出</span></span><br><span class="line">        OutputStream out = response.getOutputStream();</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] by = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span>((len = in.read(by)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(by, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>```</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> JavaWeb核心 </category>
          
          <category> 请求和响应 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 请求和响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet</title>
      <link href="/2022/02/16/JavaWeb/JavaWeb%E6%A0%B8%E5%BF%83/ServletStudent/"/>
      <url>/2022/02/16/JavaWeb/JavaWeb%E6%A0%B8%E5%BF%83/ServletStudent/</url>
      
        <content type="html"><![CDATA[<h1 id="ServletStudent"><a href="#ServletStudent" class="headerlink" title="ServletStudent"></a>ServletStudent</h1><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="Servlet快速入门"><a href="#Servlet快速入门" class="headerlink" title="Servlet快速入门"></a>Servlet快速入门</h2><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E6%89%A7%E8%A1%8C.png" alt="测试入门案例执行"></p><h2 id="Servlet执行过程"><a href="#Servlet执行过程" class="headerlink" title="Servlet执行过程"></a>Servlet执行过程</h2><p>** 一句话总结执行过程：<br>浏览器——&gt;Tomcat服务器——&gt;我们的应用——&gt;应用中的web.xml——&gt;FirstServlet——&gt;响应浏览器**</p><h2 id="Servlet关系视图"><a href="#Servlet关系视图" class="headerlink" title="Servlet关系视图"></a>Servlet关系视图</h2><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//Servlet%E5%85%B3%E7%B3%BB%E8%A7%86%E5%9B%BE.png" alt="Servlet关系视图"></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>实现Servlet接口需要重写所有方法</li><li>继承GenericServlet只需要重写service()方法</li><li>继承HttpServlet需要重写**doGet()、doPost()**方法</li></ol><h2 id="Servlet编写方式"><a href="#Servlet编写方式" class="headerlink" title="Servlet编写方式"></a>Servlet编写方式</h2><h3 id="1）编写方式说明"><a href="#1）编写方式说明" class="headerlink" title="1）编写方式说明"></a>1）编写方式说明</h3><p>我们在实现Servlet功能时，可以选择以下三种方式：</p><p>第一种：实现Servlet接口，接口中的方法必须全部实现。</p><p>​              使用此种方式，表示接口中的所有方法在需求方面都有重写的必要。此种方式支持最大程度的自定义。</p><p>第二种：继承GenericServlet，service方法必须重写，其他方可根据需求，选择性重写。</p><p>​              使用此种方式，表示只在接收和响应客户端请求这方面有重写的需求，而其他方法可根据实际需求选择性重写，使我们的开发Servlet变得简单。但是，此种方式是和HTTP协议无关的。</p><p>第三种：继承HttpServlet，它是javax.servlet.http包下的一个抽象类，是GenericServlet的子类。<b><font color='red'>如果我们选择继承HttpServlet时，只需要重写doGet和doPost方法，不要覆盖service方法。</font></b></p><p>​                使用此种方式，表示我们的请求和响应需要和HTTP协议相关。也就是说，我们是通过HTTP协议来访问的。那么每次请求和响应都符合HTTP协议的规范。请求的方式就是HTTP协议所支持的方式（目前我们只知道GET和POST，而实际HTTP协议支持7种请求方式，GET POST PUT DELETE TRACE OPTIONS HEAD )。</p><h3 id="2）HttpServlet的使用细节"><a href="#2）HttpServlet的使用细节" class="headerlink" title="2）HttpServlet的使用细节"></a>2）HttpServlet的使用细节</h3><p><strong>第一步：在入门案例的工程中创建一个Servlet继承HttpServlet</strong></p><p><font color='red'>注意：不要重写任何方法</font><br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//HttpServlet%E7%9A%84%E4%BD%BF%E7%94%A82.png" alt="HttpServlet的使用2"></p><p><strong>第二步：部署项目并测试访问</strong></p><p>当我们在地址栏输入ServletDemo2的访问URL时，出现了访问错误，状态码是405。提示信息是：方法不允许。</p><p><strong>第三步：分析原因</strong> </p><p>得出HttpServlet的使用结论：</p><p>​     <b><font color='red'>我们继承了HttpServlet，需要重写里面的doGet和doPost方法来接收get方式和post方式的请求。</font></b></p><p>为了实现代码的可重用性，我们只需要在doGet或者doPost方法中一个里面提供具体功能即可，而另外的那个方法只需要调用提供了功能的方法。</p><h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><ul><li>对象的生命周期，就是对象从生到死的过程，即：出生——活着——死亡。用更偏向 于开发的官方说法就是对象创建到销毁的过程。</li><li>出生：请求第一次到达Servlet时，对象就创建出来，并且初始化成功。只出生一次，就放到内存中。</li><li>活着：服务器提供服务的整个过程中，该对象一直存在，每次只是执行service方法。</li><li>死亡：当服务停止时，或者服务器宕机时，对象消亡。</li><li>结论：通过分析Servlet的生命周期我们发现，它的实例化和初始化只会在请求第一次到达Servlet时执行，而销毁只会在Tomcat服务器停止时执行，由此我们得出一个结论，Servlet对象只会创建一次，销毁一次。所以，Servlet对象只有一个实例。如果一个对象实例在应用中是唯一的存在，那么我们就说它是单实例的，即运用了==单例模式==。</li></ul><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo03</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象出生的过程</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;对象创建并初始化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象的服务过程</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收到了客户端的请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象销毁的过程</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;对象销毁了。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>打开浏览器访问时：创建并初始化成功、接收到客户端请求</li><li>关闭tomcat服务器时：对象销毁</li><li>单例模式的应用</li></ul><h2 id="Servlet线程安全"><a href="#Servlet线程安全" class="headerlink" title="Servlet线程安全"></a>Servlet线程安全</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ul><li>由于Servlet运用了单例模式，即整个应用中只有一个实例对象，所以我们需要分析这个唯一的实例中的类成员是否线程安全。接下来，我们来看下面的的示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo04</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 定义一个用户名的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//String username = null;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">//2. 获取用户名</span></span><br><span class="line">            username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3. 将用户名响应给浏览器</span></span><br><span class="line">            PrintWriter pw = resp.getWriter();</span><br><span class="line">            pw.println(<span class="string">&quot;Welcome:&quot;</span> + username);</span><br><span class="line">            pw.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>启动两个浏览器，输入不同的参数，访问之后发现输出的结果都是一样，所以出现线程安全问题</li></ul><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//Servlet%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98.png" alt="Servlet的线程安全问题"></p><p>通过上面的测试我们发现，在Servlet中定义了类成员之后，多个浏览器都会共享类成员的数据。其实每一个浏览器端发送请求，就代表是一个线程，那么多个浏览器就是多个线程，所以测试的结果说明了多个线程会共享Servlet类成员中的数据，其中任何一个线程修改了数据，都会影响其他线程。因此，我们可以认为Servlet它不是线程安全的。</p><p>分析产生这个问题的根本原因，其实就是因为Servlet是单例，单例对象的类成员只会随类实例化时初始化一次，之后的操作都是改变，而不会重新初始化。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>解决这个问题也非常简单，就是在Servlet中定义类成员要慎重。如果类成员是共用的，并且只会在初始化时赋值，其余时间都是获取的话，那么是没问题。<strong>1. 如果类成员并非共用，或者每次使用都有可能对其赋值，那么就要考虑线程安全问题了，把它定义到doGet或者doPost方法里面去就可以了。2. 或者设置synchronized同步块</strong></p><h2 id="Servlet映射方式"><a href="#Servlet映射方式" class="headerlink" title="Servlet映射方式"></a>Servlet映射方式</h2><h3 id="1-第一种"><a href="#1-第一种" class="headerlink" title="1. 第一种"></a>1. 第一种</h3><ul><li>/具体名称的方式。访问的资源路径必须和映射配置完全相同.</li></ul><p>​               此种方式，只有和映射配置一模一样时，Servlet才会接收和响应来自客户端的请求。</p><p>​               例如：映射为：/servletDemo5</p><p>​                           访问URL：<a href="http://localhost:8585/servlet_demo/servletDemo5">http://localhost:8585/servlet_demo/servletDemo5</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletDemo05<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-第二种"><a href="#2-第二种" class="headerlink" title="2. 第二种"></a>2. 第二种</h3><ul><li>/开头 + 通配符的方式。只要符合目录结构即可，不用考虑结尾是什么。</li></ul><p>​               此种方式，只要符合目录结构即可，不用考虑结尾是什么。</p><p>​                例如：映射为：/servlet/*</p><p>​                            访问URL：<a href="http://localhost:8585/servlet/itheima">http://localhost:8585/servlet/itheima</a></p><p>​                                               <a href="http://localhost:8585/servlet/itcast.do">http://localhost:8585/servlet/itcast.do</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servle/* <span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-第三种"><a href="#3-第三种" class="headerlink" title="3. 第三种"></a>3. 第三种</h3><ul><li>通配符 + 固定格式结尾的方式。只要符合固定结尾格式即可，不用考虑前面的路径。</li></ul><p>​                此种方式，只要符合固定结尾格式即可，其前面的访问URI无须关心（注意协议，主机和端口必须正确）</p><p>​                例如：映射为：*.do</p><p>​                            访问URL：<a href="http://localhost:8585/servlet/itcast.do">http://localhost:8585/servlet/itcast.do</a></p><p>​                                                <a href="http://localhost:8585/itheima.do">http://localhost:8585/itheima.do</a></p><p>​                            这两个URL都可以方法。因为都是以.do作为结尾，而前面用*号通配符配置的映射，所有无须关心。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p><strong>越是具体的优先级越高，越是模糊通用的优先级越低</strong><br><em>第一种 &gt; 第二种 &gt; 第三种</em></p><h2 id="Servlet多路径映射"><a href="#Servlet多路径映射" class="headerlink" title="Servlet多路径映射"></a>Servlet多路径映射</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//Servlet%E5%A4%9A%E8%B7%AF%E5%BE%84%E6%98%A0%E5%B0%84.png" alt="Servlet多路径衍射"></p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>在.java中用req.getRequestURL()获取url,用String的subSting()、和lastIndexOf()方法截取url最后一个/开始的内容，和”/vip”、”/vvip”进行对比。</li><li>在xml配置文件中pattern设置为== /xxsleo/* ==</li><li>代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo06</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.定义一个商品金额</span></span><br><span class="line">        <span class="keyword">int</span> money = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.获取访问资源路径</span></span><br><span class="line"></span><br><span class="line">        String path = req.getRequestURI();</span><br><span class="line">        path = path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>)); <span class="comment">// 截取字符串</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.条件判断</span></span><br><span class="line">        <span class="keyword">if</span> (path.equals(<span class="string">&quot;/vip&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;商品原价：&quot;</span> + money + <span class="string">&quot;打九折后：&quot;</span> + (money*<span class="number">0.9</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;/vvip&quot;</span>.equals(path)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;商品原价：&quot;</span> + money + <span class="string">&quot;打八折后：&quot;</span> + (money*<span class="number">0.8</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;商品原价：&quot;</span> + money);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Servelet多映射的配置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servletDemo06<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.example.servlet_demo1.ServletDemo06<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servletDemo06<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/xxsleo/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Servlet-创建时机"><a href="#Servlet-创建时机" class="headerlink" title="Servlet 创建时机"></a>Servlet 创建时机</h2><h3 id="第一次访问时创建"><a href="#第一次访问时创建" class="headerlink" title="第一次访问时创建"></a>第一次访问时创建</h3><ul><li>优势：减少对服务器内存的浪费。提高了服务器的启动效率</li><li>弊端：如果有一些要在应用加载时就做的初始化操作，无法完成</li></ul><h3 id="服务器加载时创建"><a href="#服务器加载时创建" class="headerlink" title="服务器加载时创建"></a>服务器加载时创建</h3><ul><li>优势：提前创建好对象，提高了首次执行的效率。可以完成一下应用加载时要做的初始化操作。</li><li>弊端：对服务器内存占用较多，影响了服务器的启动效率。</li></ul><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul><li>在&lt;servlet&gt;标签中，添加&lt;load-on-starup&gt;标签。</li></ul><p>** 正整数代表服务/器加载时创建，值越小、优先级越高。负整数或者不写代表第一次访问时创建**<br>如图：<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//Servlet%E5%88%9B%E5%BB%BA%E6%97%B6%E6%9C%BA.png" alt="Servlet访问时机"></p><h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><p><strong>就是当需要在应用加载就要完成一些工作时，就需要选择服务器加载方式。当有很多Servlet的使用时机并不确定是，就选择第一次访问时创建。</strong></p><h2 id="默认Servlet"><a href="#默认Servlet" class="headerlink" title="默认Servlet"></a>默认Servlet</h2><p>默认Servlet是由服务器提供的一个Servlet，它配置在Tomcat的conf目录下的web.xml中。如下图所示：</p><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//%E9%BB%98%E8%AE%A4Servlet.png" alt="默认Servlet"></p><p>它的映射路径是<b><font color='red'><code>&lt;url-pattern&gt;/&lt;url-pattern&gt;</code></font></b>，我们在发送请求时，首先会在我们应用中的web.xml中查找映射配置，找到就执行，这块没有问题。但是当找不到对应的Servlet路径时，就去找默认的Servlet，由默认Servlet处理。所以，一切都是Servlet。</p><h2 id="Servelet关系总图"><a href="#Servelet关系总图" class="headerlink" title="Servelet关系总图"></a>Servelet关系总图</h2><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//Servlet%E7%B1%BB%E5%85%B3%E7%B3%BB%E6%80%BB%E8%A7%86%E5%9B%BE.png" alt="Servlet关系总图"></p><ul><li>继承: —&gt;</li><li>实现接口：—&gt;</li><li>依赖：—-▷</li><li>关联：—▷</li></ul><h1 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ul><li>ServletConfig是Servlet的配置参数对象，在Servlet规范中，允许为每个Servlet都提供一些初始化配置。所以，每个Servlet都一个自己的ServletConfig。</li><li>作用：在Servlet初始化期间，把一些配置信息传递给Servlet。</li><li>生命周期：由于它是在初始化阶段读取了web.xml中为Servlet准备的初始化配置，并把配置信息传递给Servlet，所以<strong>生命周期与Servlet相同</strong>。这里需要注意的是，如果Servlet配置了<code>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code>，那么ServletConfig也会在应用加载时创建。</li></ul><h2 id="ServletConfig-配置方式"><a href="#ServletConfig-配置方式" class="headerlink" title="ServletConfig 配置方式"></a>ServletConfig 配置方式</h2><ul><li>在&lt;Servlet&gt;标签中，通过&lt;init-param&gt;标签来配置。有两个子标签。</li><li>&lt;param-name&gt;: 代表初始化参数的key</li><li>&lt;param-value&gt;: 代表初始化参数的value</li><li>如图：<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//%E9%85%8D%E7%BD%AEServletConfig.png" alt="配置ServletConfig"></li></ul><h2 id="ServletConfig-常用方法"><a href="#ServletConfig-常用方法" class="headerlink" title="ServletConfig 常用方法"></a>ServletConfig 常用方法</h2><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//ServletConfig%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png" alt="ServletConfig常用方法"></p><ul><li>代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletConfigDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.声明ServletConfig</span></span><br><span class="line">    <span class="keyword">private</span> ServletConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.通过init方法，来对ServletConfig对象进行赋值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 3.演示ServletConfig常用方法</span></span><br><span class="line">        <span class="comment">// 根据key获取value</span></span><br><span class="line">        String encodingValue = config.getInitParameter(<span class="string">&quot;encoding&quot;</span>);</span><br><span class="line">        System.out.println(encodingValue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取所有的key</span></span><br><span class="line">        Enumeration&lt;String&gt; keys = config.getInitParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (keys.hasMoreElements()) &#123;</span><br><span class="line">            <span class="comment">// 获取到每一个key</span></span><br><span class="line">            String key = keys.nextElement();</span><br><span class="line">            <span class="comment">// 根据key获取到value</span></span><br><span class="line">            String value = config.getInitParameter(key);</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取Servlet名称</span></span><br><span class="line">        String servletName = config.getServletName();</span><br><span class="line">        System.out.println(servletName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取servletContext对象</span></span><br><span class="line">        ServletContext servletContext = config.getServletContext();</span><br><span class="line">        System.out.println(servletContext);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h1><h2 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>ServletContext对象，它是应用上下文对象。每一个应用有且只有一个ServletContext对象。它可以实现让应用中所有Servlet间的数据共享。 </p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>出生——活着——死亡</p><p>出生： 应用一加载，该对象就被创建出来了。一个应用只有一个实例对象。(Servlet和ServletContext都是单例的)</p><p>活着：只要应用一直提供服务，该对象就一直存在。</p><p>死亡：应用被卸载（或者服务器挂了），该对象消亡。</p><h2 id="域对象概念"><a href="#域对象概念" class="headerlink" title="域对象概念"></a>域对象概念</h2><p>域对象的概念，它指的是对象有作用域，即有作用范围。</p><p>域对象的作用，域对象可以实现数据共享。不同作用范围的域对象，共享数据的能力不一样。</p><p>在Servlet规范中，一共有4个域对象。今天我们讲解的ServletContext就是其中一个。它也是我们接触的第一个域对象。它是web应用中最大的作用域，叫application域。每个应用只有一个application域。它可以实现整个应用间的数据共享功能。</p><h2 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h2><ul><li><p>ServletContext既然被称之为应用上下文对象，所以它的配置是针对整个应用的配置，而非某个特定Servlet的配置。它的配置被称为应用的初始化参数配置。</p></li><li><p>配置的方式，需要在**<code>&lt;web-app&gt;</code>标签中使用<code>&lt;context-param&gt;</code>来配置初始化参数。有两个子标签**。</p></li><li><p>&lt;param-name&gt;: 代表初始化参数的key</p></li><li><p>&lt;param-value&gt;: 代表初始化参数的value</p></li><li><p>代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servletContext<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.example.servlet_demo02.ServletContextDemo<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servletContext<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletContextDemo<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置ServletContext--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>globalEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置ServletContext--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>globalDesc<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>This is ServletContext<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="常用方法1"><a href="#常用方法1" class="headerlink" title="常用方法1"></a>常用方法1</h2><ul><li><p>如图：<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//SerletContext%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%9501.png" alt="ServletContext常用方法"></p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContextDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取SC对象</span></span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line"><span class="comment">//2.方法演示</span></span><br><span class="line">        String value = context.getInitParameter(<span class="string">&quot;globalDesc&quot;</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        String contextPath = context.getContextPath();</span><br><span class="line">        System.out.println(contextPath);</span><br><span class="line"></span><br><span class="line">        String realPath = context.getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        System.out.println(realPath);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>**注意：</p><ol><li>获取ServletContext的方法。</li><li>getRealPath()方法的使用</li></ol><h2 id="项目发布路径"><a href="#项目发布路径" class="headerlink" title="项目发布路径"></a>项目发布路径</h2><ul><li>项目发布路径为getRealPath()所输出得到路径，可以使用该方法查看路径</li></ul><ol><li>首先我们要知道，<strong>虚拟路径和，项目发布路径不同，而项目发布路径也不是我们之间写代码的路径</strong>，如图:(上部分为写的路径，下部分为发布路径)<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//web%E6%9C%AC%E5%9C%B0%E5%92%8C%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83%E8%B7%AF%E5%BE%84.png" alt="Web本地和项目发布路径"></li><li>图中有a、b、c三个tex文件，如何查找呢？</li></ol><ul><li>可以用getRealPath()方法</li><li>代码:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContextDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取SC对象</span></span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line">        </span><br><span class="line">        String b = context.getRealPath(<span class="string">&quot;/b.txt&quot;</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        String c = context.getRealPath(<span class="string">&quot;/WEB-INF/c.txt&quot;</span>);</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        String a = context.getRealPath(<span class="string">&quot;/WEB-INF/classes/a.txt&quot;</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>结果：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>-<span class="number">1.0</span>-SNAPSHOT\b.txt</span><br><span class="line">D:\IdeaWorkspaceJavaWeb\Servlet_demo02\target\Servlet_demo02-<span class="number">1.0</span>-SNAPSHOT\WEB-INF\c.txt</span><br><span class="line">D:\IdeaWorkspaceJavaWeb\Servlet_demo02\target\Servlet_demo02-<span class="number">1.0</span>-SNAPSHOT\a.txt</span><br></pre></td></tr></table></figure></li></ol><p><strong>注意a.txt查找时，虚拟路径的不同</strong></p><h2 id="常用方法2"><a href="#常用方法2" class="headerlink" title="常用方法2"></a>常用方法2</h2><ul><li><p>共享数据<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//ServletContext%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%9502.png" alt="ServletContext常用方法02"></p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置共享数据</span></span><br><span class="line">       context.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">       <span class="comment">//删除共享数据</span></span><br><span class="line">       context.removeAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">               <span class="comment">//获取共享数据</span></span><br><span class="line">       Object stxtd = servletContext.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">       System.out.println(stxtd);</span><br></pre></td></tr></table></figure></li></ul><p><em>获取共享数据，可以在任意文件中</em></p><h1 id="注解开发Servlet"><a href="#注解开发Servlet" class="headerlink" title="注解开发Servlet"></a>注解开发Servlet</h1><h2 id="4-1-Servlet3-0规范"><a href="#4-1-Servlet3-0规范" class="headerlink" title="4.1 Servlet3.0规范"></a>4.1 Servlet3.0规范</h2><ul><li><p>在《Tomcat和HTTP协议》课程中已经介绍了，我们使用的是Tomcat9，JavaEE规范要求是8，对应的Servlet规范规范应该是JavaEE8包含的4.x版本。</p></li><li><p>但是，，在企业级应用的开发中，稳定远比追新版本重要的多。所以，我们虽然用到了Tomcat9和对应的JavaEE8，但是涉及的Servlet规范我们降板使用，用的是Servlet3.1版本。关于兼容性问题，同学们也无须担心，向下兼容的特性，在这里也依然适用。</p></li><li><p>接下来，还有可能疑惑的地方就是，我们课程中明明使用的是Servlet3.1版本的规范，但是却总听老师提Servlet3.0规范，这两个到底有怎样的联系呢？</p></li><li><p>现在就给大家解惑，在大概十多年前，那会还是Servlet2.5的版本的天下，它最明显的特征就是Servlet的配置要求配在web.xml中，<b><font color='red'>我们今天课程中在第4章节《注解开发Servlet》之前，全都是基于Servlet2.5规范编写的。</font></b>从2007年开始到2009年底，在这个时间段，软件开发开始逐步的演变，基于注解的配置理念开始逐渐出现，大量注解配置思想开始用于各种框架的设计中，例如：Spring3.0版本的Java Based Configuration，JPA规范，apache旗下的struts2和mybatis的注解配置开发等等。</p></li><li><p>JavaEE6规范也是在这个期间设计并推出的，与之对应就是它里面包含了新的Servlet规范：<b><font color='red'>Servlet3.0版本！</font></b></p></li></ul><h2 id="自动注解配置"><a href="#自动注解配置" class="headerlink" title="自动注解配置"></a>自动注解配置</h2><h3 id="1-配置步骤"><a href="#1-配置步骤" class="headerlink" title="1.配置步骤"></a>1.配置步骤</h3><ol><li>创建web项目。</li><li>定义一个类，继承HttpServlet</li><li>重写doGet和doPost方法</li><li><strong>在类上使用@WebServlet注解配置Servlet</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletDemo01&quot;)</span></span><br></pre></td></tr></table></figure></li><li>部署并启动项目</li><li>通过浏览器测试</li></ol><h3 id="2-注解详情"><a href="#2-注解详情" class="headerlink" title="2.注解详情"></a>2.注解详情</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebServlet注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Servlet 3.0 (Section 8.1.1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定Servlet的名称。</span></span><br><span class="line"><span class="comment">     * 相当于xml配置中&lt;servlet&gt;标签下的&lt;servlet-name&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于映射Servlet访问的url映射</span></span><br><span class="line"><span class="comment">     * 相当于xml配置时的&lt;url-pattern&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 相当于xml配置时的&lt;url-pattern&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于配置Servlet的启动时机</span></span><br><span class="line"><span class="comment">     * 相当于xml配置的&lt;load-on-startup&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于配置Servlet的初始化参数</span></span><br><span class="line"><span class="comment">     * 相当于xml配置的&lt;init-param&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于配置Servlet是否支持异步</span></span><br><span class="line"><span class="comment">     * 相当于xml配置的&lt;async-supported&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于指定Servlet的小图标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于指定Servlet的大图标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于指定Servlet的描述信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于指定Servlet的显示名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">displayName</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手动创建容器"><a href="#手动创建容器" class="headerlink" title="手动创建容器"></a>手动创建容器</h2><h3 id="1-前置说明"><a href="#1-前置说明" class="headerlink" title="1.前置说明"></a>1.前置说明</h3><p>在使用Servlet3.1版本的规范时，脱离了web.xml进行注解开发，它除了支持使用注解的配置方式外，还支持纯手动创建Servlet容器的方式。要想使用的话，必须遵循它的编写规范。它是从Servlet3.0规范才开始引入的，加入了一个新的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化Servlet容器必须实现此接口</span></span><br><span class="line"><span class="comment"> * 它是Servlet3.0规范提供的标准接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Servlet 3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletContainerInitializer</span> </span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动容器时做一些初始化操作，例如注册Servlet,Filter,Listener等等。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@since</span> Servlet 3.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; c, ServletContext ctx)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-配置步骤"><a href="#2-配置步骤" class="headerlink" title="2.配置步骤"></a>2.配置步骤</h3><ol><li>创建web项目。</li><li>定义一个类，继承HttpServlet,</li><li>重写doGet和doPost方法</li><li><strong>定义一个容器类，实现ServletContainerInitializer接口</strong></li><li>在src目录下创建一个META-INF的包</li><li>在META-INF包下创建一个services的包</li><li>在services包下创建一个javax.servlet.ServletContainerInitializer的文件</li><li>文件中的内容为容器实现类的全类名</li><li>在容器实现类中的onStartup方法中完成注册Servlet</li><li>部署并启动项目</li><li>通过浏览器测试</li></ol><h3 id="3-容器类中的配置"><a href="#3-容器类中的配置" class="headerlink" title="3.容器类中的配置"></a>3.容器类中的配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRegister</span> <span class="keyword">implements</span> <span class="title">ServletContainerInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; set, ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//完成Servlet的创建和配置</span></span><br><span class="line">        <span class="comment">//1.创建ServletDemo02的对象</span></span><br><span class="line">        ServletDemo02 servletDemo02 = <span class="keyword">new</span> ServletDemo02();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.在ServletContext中添加Servlet，并得到Servlet的动态配置对象</span></span><br><span class="line">        ServletRegistration.Dynamic registration = servletContext.addServlet(<span class="string">&quot;servletDemo02&quot;</span>, servletDemo02);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.配置Servlet</span></span><br><span class="line">        registration.addMapping(<span class="string">&quot;/ServletDemo02&quot;</span>);  <span class="comment">//映射访问路径</span></span><br><span class="line">        registration.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="案例学生管理系统"><a href="#案例学生管理系统" class="headerlink" title="案例学生管理系统"></a>案例学生管理系统</h1><p><strong>只实现保存学生信息一个功能，用来应用学到的内容</strong></p><h2 id="案例效果"><a href="#案例效果" class="headerlink" title="案例效果"></a>案例效果</h2><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//StudentManager%E6%95%88%E6%9E%9C.png" alt="案例效果"></p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ol><li>创建一个web项目</li><li>创建一个用于保存学生信息的html文件</li><li>创建一个类，继承HttpServlet</li><li><strong>重写doGet和doPost方法</strong></li><li>在web.xml文件中修改默认主页和配置Servlet</li><li><strong>在doGet方法中接收表单数据保存到文件中，并响应给浏览器结果</strong></li><li>部署并启动项目</li><li>通过浏览器测试</li></ol><h3 id="html文件的编写"><a href="#html文件的编写" class="headerlink" title="html文件的编写"></a>html文件的编写</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>保存学生信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/servlet_text_war_exploded/studentServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>学生信息表<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>学生姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;age&quot;</span>&gt;</span>学生年龄:<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;grade&quot;</span>&gt;</span>学生成绩<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;grade&quot;</span> <span class="attr">name</span>=<span class="string">&quot;grade&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>提交表单地址action=”/servlet_text_war_exploded/studentServlet”为重点</strong></p><h3 id="Studentservlet服务创建"><a href="#Studentservlet服务创建" class="headerlink" title="Studentservlet服务创建"></a>Studentservlet服务创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取表单数据，并保存到文件中</span></span><br><span class="line">        String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        String age = req.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        String grade = req.getParameter(<span class="string">&quot;grade&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//采用字符输出流，写入文件中</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;d:\\stu.txt&quot;</span>,<span class="keyword">true</span>));</span><br><span class="line">        bw.write(name + <span class="string">&quot;,&quot;</span> + age + <span class="string">&quot;,&quot;</span> + grade);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//响应客户端浏览器</span></span><br><span class="line">        PrintWriter pw = resp.getWriter();</span><br><span class="line">        pw.println(<span class="string">&quot;Save Success&quot;</span>);</span><br><span class="line">        pw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="web-xml的配置"><a href="#web-xml的配置" class="headerlink" title="web.xml的配置"></a>web.xml的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    修改默认主页--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/addStudent.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    配置Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>studentServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.example.servlet_text.StudentServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>studentServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/studentServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="成功实现"><a href="#成功实现" class="headerlink" title="成功实现"></a>成功实现</h2><ul><li><p>浏览器页面<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A1%B5%E9%9D%A2.png" alt="浏览器页面"></p></li><li><p>提示信息<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF.png" alt="提示信息"></p></li><li><p>本地显示<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E6%9C%AC%E5%9C%B0%E6%98%BE%E7%A4%BA.png" alt="本地显示"></p></li></ul><h1 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h1><ol><li>&lt;url-pattern&gt; 中是地址栏路径 需要加 / 否则报错：==error starting child==</li><li>地址栏区分大小写</li><li>path.substring(path.lastIndexOf(“/“)); // 从最后一个/开始截取字符串</li><li>java常犯错误</li></ol><ul><li>对变量进行操作后，没有赋值给另一个变量，后面还是使用的操作前的变量，导致结果出错。列：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String path = req.getRequestURI();</span><br><span class="line">path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>)); <span class="comment">// 截取字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.条件判断</span></span><br><span class="line"><span class="keyword">if</span> (path.equals(<span class="string">&quot;/vip&quot;</span>)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;商品原价：&quot;</span> + money + <span class="string">&quot;打九折后：&quot;</span> + (money*<span class="number">0.9</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> JavaWeb核心 </category>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat</title>
      <link href="/2022/02/15/ToolsUseing/Tomcat/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/02/15/ToolsUseing/Tomcat/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat-服务器"><a href="#Tomcat-服务器" class="headerlink" title="Tomcat 服务器"></a>Tomcat 服务器</h1><h2 id="服务器介绍"><a href="#服务器介绍" class="headerlink" title="服务器介绍"></a>服务器介绍</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>服务器是计算机的一种，它比普通计算机运行更快，负载更高，价格更贵。</li><li>服务器在网络中为其他客户机（如PC机、智能设备等)提供计算或者应用服务。</li><li>服务器具有高数的CPU运算能力，长时间的可靠运行，强大的I/O外部数据吞吐能力以及更好的扩展。</li></ul><p><strong>而Tomcat服务器，其实是Web服务器，或者应用服务器。本质就是一个软件，通过和硬件结合，从而达到帮助我们来发布应用的功能，让用户通过客户机访问我们的应用。</strong></p><h3 id="常用的应用服务器"><a href="#常用的应用服务器" class="headerlink" title="常用的应用服务器"></a>常用的应用服务器</h3><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="应用服务器"></p><h2 id="Tomcat介绍"><a href="#Tomcat介绍" class="headerlink" title="Tomcat介绍"></a>Tomcat介绍</h2><ul><li>Apache软件基金会的Jakarta项目中的核心项目，由Apache、Sun和其他公司和个人共同开发。</li><li>技术先进、性能稳定、免费</li><li>官网：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></li><li>各个版本所需要的支持：<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//Tomcat%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E6%89%80%E9%9C%80%E6%94%AF%E6%8C%81.png" alt="Tomcat"></li></ul><h2 id="Tomcat的下载和安装"><a href="#Tomcat的下载和安装" class="headerlink" title="Tomcat的下载和安装"></a>Tomcat的下载和安装</h2><ol><li>下载：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></li><li>安装：解压即可</li><li>目录结构<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//Tomcat%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="Tomcat目录结构"></li></ol><h2 id="Tomcat基本使用"><a href="#Tomcat基本使用" class="headerlink" title="Tomcat基本使用"></a>Tomcat基本使用</h2><h3 id="1-启动"><a href="#1-启动" class="headerlink" title="1. 启动"></a>1. 启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">startup.bat windwos下启动执行文件</span><br><span class="line">startup.sh linux下启动执行文件</span><br></pre></td></tr></table></figure><h3 id="2-停止"><a href="#2-停止" class="headerlink" title="2.停止"></a>2.停止</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shutdown.bat windows下关闭执行文件</span><br><span class="line">shutdown.sh linux下关闭执行文件</span><br></pre></td></tr></table></figure><h3 id="3-启动问题"><a href="#3-启动问题" class="headerlink" title="3.启动问题"></a>3.启动问题</h3><ul><li>启动窗口一闪而过：没有配置jdk环境变量</li><li>java.net.BindException：端口8080被占用</li></ul><h3 id="4-部署自己的项目"><a href="#4-部署自己的项目" class="headerlink" title="4.部署自己的项目"></a>4.部署自己的项目</h3><ol><li>在webapps目录下创建一个文件夹</li><li>将资源放到该文件夹里</li><li>启动Tomact，输入正确路径</li></ol><h3 id="5-解决cmd乱码问题"><a href="#5-解决cmd乱码问题" class="headerlink" title="5.解决cmd乱码问题"></a>5.解决cmd乱码问题</h3><ul><li>在conf中打开logging.properties进行编辑，在51行中将utf-8改为gbk。</li></ul><h2 id="IDEA集成Tomcat"><a href="#IDEA集成Tomcat" class="headerlink" title="IDEA集成Tomcat"></a>IDEA集成Tomcat</h2><ol><li>Run -&gt; Edit Configurations</li><li>Defaults -&gt; Tomcat Server -&gt; Local</li><li>点击Configure -&gt; Tomcat Home -&gt; 选择Tomcat所在路径</li></ol><h2 id="Linux安装Tomcat"><a href="#Linux安装Tomcat" class="headerlink" title="Linux安装Tomcat"></a>Linux安装Tomcat</h2><ol><li>上传压缩包到/home路径: put d:/apache-tomcat-9.0.29.tar.gz</li><li>解压压缩包：tar-zxvf apache-tomcat-9.0.29.tar.gz</li><li>进入bin目录下：cd apache-tomcat-9.0.29/bin</li><li>启动Tomcat服务: ./startup.sh</li><li>使用浏览器测试：<a href="http://ip:8080/">http://ip:8080/</a></li></ol><h2 id="JavaWeb项目创建"><a href="#JavaWeb项目创建" class="headerlink" title="JavaWeb项目创建"></a>JavaWeb项目创建</h2><ol><li>新建项目 选择java Enterprise</li><li>注意选择Tomcat、JavaEE8、jdk8</li><li>目录详解：</li></ol><ul><li>src 存放源码</li><li>webapp 存放项目相关资源(html、css、js、jsp、图片等)</li><li>WEB-INF 存放相关配置(web、xml等)</li></ul><h2 id="JavaWeb项目发布"><a href="#JavaWeb项目发布" class="headerlink" title="JavaWeb项目发布"></a>JavaWeb项目发布</h2><h3 id="1-通过idea直接发布"><a href="#1-通过idea直接发布" class="headerlink" title="1. 通过idea直接发布"></a>1. 通过idea直接发布</h3><ul><li>点击Run -&gt; configuration</li><li>点击Tomcat Server -&gt; Deployment</li><li>点击Tomcat Server -&gt; Server<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//TomcatServer.png/" alt="Tomcat Server"></li><li>启动Tomcat</li><li>验证结果： connected to server    浏览器可以访问index.jsp文件</li></ul><h3 id="2-通过war包发布"><a href="#2-通过war包发布" class="headerlink" title="2. 通过war包发布"></a>2. 通过war包发布</h3><ul><li>在项目的webapp路径下打war包：jar -cvf web_demo.war ==.==</li><li>将打好的war包剪切到Tomcat的webapps路径下</li><li>启动tomcat,自动解压war包</li><li>验证结果</li></ul><h2 id="Tomcat配置文件"><a href="#Tomcat配置文件" class="headerlink" title="Tomcat配置文件"></a>Tomcat配置文件</h2><ul><li>主配置文件server.xml<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//Tomcat%E7%AB%AF%E5%8F%A3.png" alt="Tomcat端口"></li></ul><h2 id="Tomcat配置虚拟目录"><a href="#Tomcat配置虚拟目录" class="headerlink" title="Tomcat配置虚拟目录"></a>Tomcat配置虚拟目录</h2><p><strong>虚拟目录作用：可以发布任意目录下的项目</strong></p><ol><li>编辑server.xml配置文件，找到&lt;Host&gt;标签</li><li>加入以下内容：<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//Tomcat%E4%BF%AE%E6%94%B9%E4%BB%BB%E6%84%8F%E8%B7%AF%E5%BE%84.png" alt="TomcatServer修改"></li></ol><h2 id="Tomcat配置虚拟主机"><a href="#Tomcat配置虚拟主机" class="headerlink" title="Tomcat配置虚拟主机"></a>Tomcat配置虚拟主机</h2><p><strong>虚拟主机作用：可以指定访问路径的名称</strong></p><ol><li>编辑server.xml配置文件，找到&lt;Engine&gt;标签</li><li>加入以下内容<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//Tomcat%E8%AE%BE%E7%BD%AE%E5%9F%9F%E5%90%8D.png" alt="Tomcat设置域名"></li><li>修改hosts文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1www.webdemo.com</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> ToolsUseing </category>
          
          <category> Tomcat </category>
          
          <category> Tomcat应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布资源</title>
      <link href="/2022/02/15/ToolsUseing/Tomcat/%E5%8F%91%E5%B8%83%E8%B5%84%E6%BA%90/"/>
      <url>/2022/02/15/ToolsUseing/Tomcat/%E5%8F%91%E5%B8%83%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1 id="发布资源"><a href="#发布资源" class="headerlink" title="发布资源"></a>发布资源</h1><h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>创建一个JavaWeb项目。</li><li>将静态页面所需资源导入到该项目的web目录下。</li><li>修改web.xml文件，修改默认主页。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--修改默认主页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/news/news.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>将项目部署到tomcat中</li><li>启动tomcat服务</li><li>浏览器测试</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><p>为什么css效果没了？</p></li><li><p>资源用一套</p></li><li><p>仔细观看，注意细节</p></li><li><p>理解一些，当时觉得不必要的东西</p></li></ul><h2 id="动态资源"><a href="#动态资源" class="headerlink" title="动态资源"></a>动态资源</h2><h3 id="Servlet介绍"><a href="#Servlet介绍" class="headerlink" title="Servlet介绍"></a>Servlet介绍</h3><ul><li>Servlet是运行在java服务器端的程序，用于接受和响应来自客户端基于http协议的请求。</li></ul><h3 id="如何实现Servlet的功能？"><a href="#如何实现Servlet的功能？" class="headerlink" title="如何实现Servlet的功能？"></a>如何实现Servlet的功能？</h3><ol><li>实现javax.servlet.Servlet接口</li><li>继承它的实现类</li></ol><h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><ul><li>servlet(), 任何客户端的请求都会经过该方法。</li></ul><h3 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>创建一个JavaWeb项目。</li><li>将静态页面所需资源导入到该项目的web目录下。</li><li>修改web.xml文件，修改默认主页。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--修改默认主页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/news/news.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在项目的src路劲下编写一个类，实现Servelet接口。<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//852.png" alt="目录"></li><li>重写service（）方法，输出一句话即可。</li><li>修改web.xml配置文件,配置Servlet相关资源。<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//ServletXml%E9%85%8D%E7%BD%AE.png" alt="ServletXml配置"></li><li>将项目部署到tomcat中</li><li>启动tomcat服务</li><li>浏览器测试</li></ol><ul><li>在输入框中输入编写Servlet的类名，idea中会调用service方法，输出文字。</li></ul><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//servlet%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="servlet执行流程"></p><ul><li>JBDC三天</li><li>Mybatis三天</li><li>JavaScript三天</li><li>JavaWeb核心三天</li><li>LeetCode两天15道</li></ul>]]></content>
      
      
      <categories>
          
          <category> ToolsUseing </category>
          
          <category> Tomcat </category>
          
          <category> Tomcat发布资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat发布资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议</title>
      <link href="/2022/02/14/JavaWeb/JavaWeb%E6%A0%B8%E5%BF%83/HTTP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2022/02/14/JavaWeb/JavaWeb%E6%A0%B8%E5%BF%83/HTTP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h1><h2 id="HTTP协议的介绍"><a href="#HTTP协议的介绍" class="headerlink" title="HTTP协议的介绍"></a>HTTP协议的介绍</h2><ul><li>http（Hyper Text Transfer Protocol）：超文本传输协议。</li><li>http协议是基于TCP/IP协议的。</li><li>超文本：比普通文本更强大</li><li>传输协议：客户端和服务端的通信规则（握手规则）</li><li>客户端发起请求，服务器相应</li><li><em>注意：JavaScript、CSS、图片资源会自动发起请求</em></li></ul><h2 id="HTTP协议的请求"><a href="#HTTP协议的请求" class="headerlink" title="HTTP协议的请求"></a>HTTP协议的请求</h2><h3 id="1-请求的组成部分"><a href="#1-请求的组成部分" class="headerlink" title="1. 请求的组成部分"></a>1. 请求的组成部分</h3><ul><li>请求行</li><li>请求头</li><li>请求空行</li><li>请求体</li></ul><ol><li>请求行</li></ol><ul><li>请求方式、提交路径（提交参数）HTTP/版本号</li></ul><ol start="2"><li><p>请求头<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4.png" alt="http请求头"></p></li><li><p>请求空行</p></li></ol><ul><li>普通换行，用于区分请求头和请求体</li></ul><ol start="4"><li>请求体</li></ol><ul><li>只有POST提交方式才有请求体</li></ul><h3 id="2-请求的方式"><a href="#2-请求的方式" class="headerlink" title="2.请求的方式"></a>2.请求的方式</h3><ul><li>GET</li><li>POST</li></ul><p><em>注意：只有POST方式有请求体</em><br>agent cookie upgrade match insecure</p><h3 id="GET方式"><a href="#GET方式" class="headerlink" title="GET方式"></a>GET方式</h3><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//GET%E6%96%B9%E5%BC%8F.png" alt="get方式"></p><h3 id="POST方式"><a href="#POST方式" class="headerlink" title="POST方式"></a>POST方式</h3><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//POST%E6%96%B9%E5%BC%8F.png" alt="POST方式"></p><h2 id="HTTP协议的响应"><a href="#HTTP协议的响应" class="headerlink" title="HTTP协议的响应"></a>HTTP协议的响应</h2><h3 id="1-响应的组成部分"><a href="#1-响应的组成部分" class="headerlink" title="1.响应的组成部分"></a>1.响应的组成部分</h3><ul><li>响应行</li><li>响应头</li><li>响应空行</li><li>响应体</li></ul><ol><li>响应行</li></ol><ul><li>请求方式HTTP/版本号 状态码 状态描述</li></ul><ol start="2"><li><p>响应头<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//HTTP%E5%93%8D%E5%BA%94%E5%A4%B4.png" alt="http响应头"></p></li><li><p>响应空行</p></li></ol><ul><li>普通换行、区分响应头和响应体</li></ul><ol start="4"><li>响应体</li></ol><ul><li>将资源文件发送给客户端浏览器进行解析</li></ul><h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81.png" alt="常见状态码"></p><h3 id="2-列如"><a href="#2-列如" class="headerlink" title="2.列如"></a>2.列如</h3><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//HTTP%E5%93%8D%E5%BA%94.png" alt="HTTP响应"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> JavaWeb核心 </category>
          
          <category> HTTP协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb概述</title>
      <link href="/2022/02/12/JavaWeb/JavaWeb%E6%A0%B8%E5%BF%83/javaWeb%E6%A0%B8%E5%BF%83/"/>
      <url>/2022/02/12/JavaWeb/JavaWeb%E6%A0%B8%E5%BF%83/javaWeb%E6%A0%B8%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb核心"><a href="#JavaWeb核心" class="headerlink" title="JavaWeb核心"></a>JavaWeb核心</h1><h2 id="企业开发简介"><a href="#企业开发简介" class="headerlink" title="企业开发简介"></a>企业开发简介</h2><h3 id="JavaSE和JavaEE的区别"><a href="#JavaSE和JavaEE的区别" class="headerlink" title="JavaSE和JavaEE的区别"></a>JavaSE和JavaEE的区别</h3><ul><li><p>JavaEE：Java Enterprise Edition，Java企业版，多用于企业级开发，包括web开发等等。企业版本帮助开发和部署可移植、健壮、可伸缩切安全的服务端Java应用。Java EE是在JavaSE的基础上构建的他提供Web 服务、组建模型、管理和通信API.可以用来实现企业级的面向服务体系结构(service-oriented architecture,SOA)和web2.0应用程序。</p></li><li><p>JavaSE：通常是指Java Standard Edition，Java标准版，就是一般Java程序的开发就可以(如桌面程序)，可以看作是JavaEE的子集。它允许开发和部署在桌面、服务器、嵌入式环境和实施环境中使用的Java应用程序。JavaSE 包括支持Java　Ｗeb服务开发的类，并为Java Platform,Enterprise Edition(Java EE)提供基础。</p></li></ul><h3 id="JavaEE-规范"><a href="#JavaEE-规范" class="headerlink" title="JavaEE 规范"></a>JavaEE 规范</h3><ul><li>JavaEE（Java Enterprise Edition)：Java企业版。</li><li>JavaEE规范是很多java开发技术的总称。一共包括13个技术规范</li></ul><p><strong>包括：JBDC、JNDI、EJB、RMI、IDL/CORBA、JSP、Servlet、XML、JMS、JTA、JavaMail、JAF</strong></p><h3 id="Web概述"><a href="#Web概述" class="headerlink" title="Web概述"></a>Web概述</h3><ul><li>Web在计算机领域中代表网络</li><li>像www,是World Wide Web，称为：==万维网==。</li><li>网络出现是为了在网络世界中==获取资源==，资源存放的地方，就叫==网站==。</li><li>输入网址，就可以访问网站中提供的资源（不区分局域网和广域网）</li></ul><h4 id="资源分类"><a href="#资源分类" class="headerlink" title="资源分类"></a>资源分类</h4><h5 id="1-静态资源"><a href="#1-静态资源" class="headerlink" title="1. 静态资源"></a>1. 静态资源</h5><ul><li>网站中提供给人们展示的资源是一成不变的，也就是说不同人或者在不同时间，看到内容是一样的</li><li>作为开发者来说，我们编写的HTML、CSS、JavaScript都属于静态资源</li></ul><h5 id="2-动态资源"><a href="#2-动态资源" class="headerlink" title="2.动态资源"></a>2.动态资源</h5><ul><li>网站中提供给人们展示的资源是由程序产生的，也就是说不同人或者在不同时间，看到内容是不一样的(如每个人的购物车)</li><li>作为开发者来说，我们编写的JSP、Servlet都属于动态资源</li></ul><h3 id="系统结构"><a href="#系统结构" class="headerlink" title="系统结构"></a>系统结构</h3><h4 id="结构划分"><a href="#结构划分" class="headerlink" title="结构划分"></a>结构划分</h4><ol><li>基础结构划分<ul><li>CS结构</li><li>BS结构</li></ul></li><li>技术选型划分<ul><li>Model1模型</li><li>Model2模型</li><li>MVC模型</li><li>三层架构+MVC模型</li></ul></li><li>部署方式划分：<ul><li>一体化结构</li><li>垂直拆分结构</li><li>分布式结构</li><li>微服务结构</li></ul></li></ol><h4 id="CS结构"><a href="#CS结构" class="headerlink" title="CS结构"></a>CS结构</h4><ul><li>（Client Server)客户端+服务器的方式</li></ul><h4 id="BS结构"><a href="#BS结构" class="headerlink" title="BS结构"></a>BS结构</h4><ul><li>（Browser Server)浏览器+服务器的方式</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> JavaWeb核心 </category>
          
          <category> JavaWeb概述 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb概述 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置成功并开启，ip地址无法访问解决方案</title>
      <link href="/2022/02/10/ToolsUseing/Nginx/Nginx%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F%E5%B9%B6%E5%BC%80%E5%90%AF%EF%BC%8Cip%E5%9C%B0%E5%9D%80%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2022/02/10/ToolsUseing/Nginx/Nginx%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F%E5%B9%B6%E5%BC%80%E5%90%AF%EF%BC%8Cip%E5%9C%B0%E5%9D%80%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx配置成功并开启，ip地址无法访问解决方案"><a href="#Nginx配置成功并开启，ip地址无法访问解决方案" class="headerlink" title="Nginx配置成功并开启，ip地址无法访问解决方案"></a>Nginx配置成功并开启，ip地址无法访问解决方案</h1><h2 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h2><p>** 防火墙开启 **</p><ul><li>在Linux系统中默认有防火墙Iptables管理者所有的端口，只启用默认远程连接22端口其他都关闭，咱们上面设置的80等等也是关闭的，所以我们需要先把应用的端口开启<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3></li><li>下载更换防火墙<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">安装systemctl：</span><br><span class="line">yum install iptables-services</span><br><span class="line"></span><br><span class="line">设置开机启动</span><br><span class="line">systemctl enable iptables.service</span><br><span class="line"></span><br><span class="line">如果报错:Failed to start IPv4 firewall with iptables.</span><br><span class="line"></span><br><span class="line">因为centos7默认的防火墙是firewalld防火墙，不是使用iptables，因此需要先关闭firewalld服务，或者干脆使用默认的firewalld防火墙。</span><br><span class="line">关闭firewalld：</span><br><span class="line">systemctl stop firewalld  </span><br><span class="line">systemctl mask firewalld</span><br><span class="line"></span><br><span class="line">开启443端口</span><br><span class="line">iptables -A INPUT -p tcp --dport 443 -j ACCEPT</span><br><span class="line"></span><br><span class="line">保存规则</span><br><span class="line">service iptables save</span><br><span class="line"></span><br><span class="line">开启服务</span><br><span class="line">systemctl restart iptables.service</span><br></pre></td></tr></table></figure><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3></li><li>直接关闭防火墙，这样性能较好，但安全性较差，如果有前置防火墙可以采取这种方式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">关闭防火墙</span><br><span class="line">[root@localhost ~]# service iptables stop</span><br><span class="line">关闭开机自启动防火墙</span><br><span class="line">[root@localhost ~]# chkconfig iptables off</span><br><span class="line">[root@localhost ~]# chkconfig --list|grep ipt</span><br></pre></td></tr></table></figure></li><li>其他防火墙命令<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//Linux%E9%98%B2%E7%81%AB%E5%A2%99%E5%91%BD%E4%BB%A4.png" alt="防火墙命令"><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3></li><li>将开启的端口加入防火墙白名单中，这种方式较安全但性能也相对较差<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">编辑防火墙白名单</span><br><span class="line">[root@localhost ~]# vim /etc/sysconfig/iptables</span><br><span class="line">增加下面一行代码</span><br><span class="line">-A INPUT -p tcp -m state -- state NEW -m tcp --dport 80 -j ACCEPT</span><br><span class="line">保存退出，重启防火墙</span><br><span class="line">[root@localhost ~]# service iptables restart</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> ToolsUseing </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx安装及使用</title>
      <link href="/2022/02/09/ToolsUseing/Nginx/Nginx%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/02/09/ToolsUseing/Nginx/Nginx%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx安装及使用"><a href="#Nginx安装及使用" class="headerlink" title="Nginx安装及使用"></a>Nginx安装及使用</h1><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>下载Nginx</li></ol><p>进入<a href="http://nginx.org/">http://nginx.org/</a><br>下载nginx-1.17.5.tar.gz文件</p><ol start="2"><li>上传到虚拟机</li></ol><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//Nginx%E4%B8%8A%E4%BC%A0linux.png" alt="Nginx上传linux"></p><p>使用客户端将刚下载好的nginx-1.17.5.tar.gz文件上传到home目录下。</p><ol start="3"><li><p>解压安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip Nginx-1.17.5.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>进入Nginx目录<br> cd /home/nginx-1.17.5</p></li><li><p>安装依赖环境<br> yum -y install pcre pcre-devel<br> yum -y install zlib zlib-devel<br> yum -y install openssl openssl-devel</p></li><li><p>安装Nginx<br> ./configure<br> make<br> make install<br> 安装后在/usr/local下就会有一个nginx目录</p></li><li><p>启动Nginx<br> cd /usr/local/nginx/sbin<br> 启动<br> ./nginx<br> 停止<br> ./nginx -s stop<br> 重启<br> ./nginx -s reload</p></li><li><p>查看服务状态<br> ps -ef | grep nginx</p></li><li><p>测试Nginx服务是否成功启动<br> 在win下浏览器输入：<a href="http://ip地址/">http://ip地址</a><br> 在linux下浏览器输入:localhost</p><h2 id="安装成功，但是ip无法访问"><a href="#安装成功，但是ip无法访问" class="headerlink" title="安装成功，但是ip无法访问"></a>安装成功，但是ip无法访问</h2></li></ol><ul><li>大概率为防火墙问题<br>  <strong>解决方案见:</strong><br>  (这里)[<a href="https://xxsleo.github.io/2022/02/10/ToolsUseing/Nginx/Nginx%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F%E5%B9%B6%E5%BC%80%E5%90%AF%EF%BC%8Cip%E5%9C%B0%E5%9D%80%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/]">https://xxsleo.github.io/2022/02/10/ToolsUseing/Nginx/Nginx%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F%E5%B9%B6%E5%BC%80%E5%90%AF%EF%BC%8Cip%E5%9C%B0%E5%9D%80%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/]</a><h2 id="项目发布"><a href="#项目发布" class="headerlink" title="项目发布"></a>项目发布</h2></li></ul><p>1.创建一个toutiao目录<br>    cd /home<br>    mkdir toutiao</p><p>2.将项目上传到toutiao目录</p><p>3.解压项目<br>    unzip web.zip</p><p>4.编辑Nginx配置文件nginx-1.17.5/conf/nginx.conf<br>server {<br>    listen       80;<br>    server_name  localhost;</p><pre><code>#charset koi8-r;#access_log  logs/host.access.log  main;location / &#123;    root   /home/toutiao;    index  index.html index.htm;&#125;</code></pre><p>5.关闭nginx服务<br>    ./nginx -s stop</p><p>6.启动服务并加载配置文件<br>    /usr/local/nginx/sbin/nginx -c /home/nginx-1.17.5/conf/nginx.conf</p><p>7.浏览器打开网址<br>    <a href="http://ip/">http://ip</a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>在当前目录执行命令学要加./ 如在sbin中 ./nginx</li><li>不在当前目录不加 如： usr/local/nginx/sbin/nginx</li></ul>]]></content>
      
      
      <categories>
          
          <category> ToolsUseing </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS总结</title>
      <link href="/2022/02/08/JavaWeb/html+css/CSS/"/>
      <url>/2022/02/08/JavaWeb/html+css/CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="1-CSS入门"><a href="#1-CSS入门" class="headerlink" title="1.CSS入门"></a>1.CSS入门</h2><h3 id="1-1-CSS组成"><a href="#1-1-CSS组成" class="headerlink" title="1.1 CSS组成"></a>1.1 CSS组成</h3><p>CSS是一门基于规则的语言 — 你能定义用于你的网页中<strong>特定元素</strong>的一组<strong>样式规则</strong>。这里面提到了两个概念，一是特定元素，二是样式规则。对应CSS的语法，也就是<strong>选择器（<em>selects</em>）</strong>和<strong>声明（<em>eclarations</em>）</strong>。</p><ul><li><strong>选择器</strong>：指定将要添加样式的 HTML元素的方式。可以使用标签名，class值，id值等多种方式。</li><li><strong>声明</strong>：形式为**属性(property):值(value)**，用于设置特定元素的属性信息。<ul><li>属性：指示文体特征，例如<code>font-size</code>，<code>width</code>，<code>background-color</code>。</li><li>值：每个指定的属性都有一个值，该值指示您如何更改这些样式。</li></ul></li></ul><p>格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    属性名:属性值;</span><br><span class="line">    属性名:属性值;</span><br><span class="line">    属性名:属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2.基本语法"></a>2.基本语法</h2><h3 id="2-1三种引入方式"><a href="#2-1三种引入方式" class="headerlink" title="2.1三种引入方式"></a>2.1三种引入方式</h3><ol><li>内联样式</li></ol><ul><li>在标签中通过style属性来控制样式，只能控制这一行</li><li>列如：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\&lt;<span class="selector-tag">h1</span> style=&quot;<span class="attribute">color</span>: red; <span class="attribute">font-size</span>: <span class="number">20px</span><span class="string">&quot;&gt;Hello,Word!\&lt;/h1&gt;</span></span><br><span class="line"><span class="string">````</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 内部样式</span></span><br><span class="line"><span class="string">+ 在\&lt;head&gt;标签中通过\&lt;style&gt;标签来控制样式。只能影响当前文件</span></span><br><span class="line"><span class="string">+ 格式：</span></span><br><span class="line"><span class="string">```css</span></span><br><span class="line"><span class="string">    &lt;style&gt;</span></span><br><span class="line"><span class="string">        div&#123;</span></span><br><span class="line"><span class="string">            color: red;</span></span><br><span class="line"><span class="string">            font-size: 20px;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &lt;/style&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>外部样式</li></ol><ul><li>在&lt;head&gt;标签中通过&lt;link&gt;标签来引入独立css文件，可以影响不同的文件</li><li>格式<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;css文件&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2css的注释"><a href="#2-2css的注释" class="headerlink" title="2.2css的注释"></a>2.2css的注释</h3><ol><li>注释的格式：</li></ol><ul><li>   /*注释的内容*/</li></ul><h3 id="2-3-选择器"><a href="#2-3-选择器" class="headerlink" title="2.3 选择器"></a>2.3 选择器</h3><p><strong>选择器的分类</strong>：</p><table><thead><tr><th>分类</th><th>名称</th><th>符号</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>基本选择器</td><td>元素选择器</td><td>标签名</td><td>基于标签名匹配元素</td><td>div{ }</td></tr><tr><td></td><td>类选择器</td><td><code>.</code></td><td>基于class属性值匹配元素</td><td>.center{ }</td></tr><tr><td></td><td>ID选择器</td><td><code>#</code></td><td>基于id属性值匹配元素</td><td>#username{ }</td></tr><tr><td>属性选择器</td><td>属性选择器</td><td><code>[]</code></td><td>基于某属性匹配元素</td><td>[type]{ }</td></tr><tr><td>伪类选择器</td><td>伪类选择器</td><td><code>:</code></td><td>用于向某些选择器添加特殊的效果</td><td>a : hover{ }</td></tr><tr><td>组合选择器</td><td>后代选择器</td><td><code>空格</code></td><td>使用<code>空格符号</code>结合两个选择器，基于第一个选择器，匹配第二个选择器的所有后代元素</td><td>.top li{ }</td></tr><tr><td></td><td>子级选择器</td><td><code>&gt;</code></td><td>使用 <code>&gt;</code> 结合两个选择器，基于第一个选择器，匹配第二个选择器的直接子级元素</td><td>.top &gt; li{ }</td></tr><tr><td></td><td>同级选择器</td><td><code>~</code></td><td>使用 <code>~</code> 结合两个选择器，基于第一个选择器，匹配第二个选择器的所有兄弟元素</td><td>.l1 ~ li{ }</td></tr><tr><td></td><td>相邻选择器</td><td><code>+</code></td><td>使用 <code>+</code> 结合两个选择器，基于第一个选择器，匹配第二个选择器的相邻兄弟元素</td><td>.l1 + li{ }</td></tr><tr><td></td><td>通用选择器</td><td><code>*</code></td><td>匹配文档中的所有内容</td><td>*{ }</td></tr></tbody></table><h4 id="2-3-1-什么是选择器"><a href="#2-3-1-什么是选择器" class="headerlink" title="2.3.1 什么是选择器"></a>2.3.1 什么是选择器</h4><ul><li>   一个HTML文件中会有多个元素，如果想对不同的元素添加不同的样式，就需要用选择器来选择指定的元素。</li></ul><h4 id="2-3-2-选择器的分类"><a href="#2-3-2-选择器的分类" class="headerlink" title="2.3.2 选择器的分类"></a>2.3.2 选择器的分类</h4><ol><li>基本选择器</li></ol><p>*注意：精确度曰高，选择器优先级越高<br>1.id选择器（#myid）</p><p>2.类选择器（.myclassname）</p><p>3.标签选择器（div,h1,p）</p><p>4.子选择器（ul &lt; li）</p><p>5.后代选择器（li a）</p><p>6.伪类选择（a:hover,li:nth-child）*</p><ol start="2"><li>属性选择器</li></ol><ul><li>列</li></ul><p><strong>页面元素</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>css</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-attr">[type]</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-attr">[type=password]</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: blue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>伪类选择器</li></ol><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//image-20220207102044882.png" alt="伪类标签"></p><ul><li>列:</li></ul><p><strong>页面元素</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">a</span> target=&quot;_blank&quot; href=&quot;https://www.baidu.com<span class="string">&quot;&gt;百度一下&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p><strong>css</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">a</span>&#123;</span><br><span class="line">        <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*    未访问状态*/</span></span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: black;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*    已访问状态*/</span></span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: blue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*    鼠标悬浮状态*/</span></span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*    已选中状态*/</span></span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: yellow;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>组合选择器</li></ol><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//%E7%BB%84%E5%90%88%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="组合选择器"></p><ul><li>列：</li></ul><p><strong>页面元素</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>bb<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>cc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>dd<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>css</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="comment">/*后代选择器*/</span></span><br><span class="line">    <span class="selector-class">.center</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*    分组选择器*/</span></span><br><span class="line">    <span class="selector-tag">span</span>,<span class="selector-tag">p</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: blue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-小结"><a href="#2-4-小结" class="headerlink" title="2.4 小结"></a>2.4 小结</h3><ul><li><p>CSS三种引入方式</p><ul><li>内联</li><li>内部</li><li>外部</li></ul></li><li><p>CSS的选择器</p><ul><li>基本选择器：元素、类、id</li><li>属性选择器：属性</li><li>伪类：添加特殊效果(超链接)</li><li>组合：组合基本选择器，更精确</li></ul></li></ul><h2 id="3-表格"><a href="#3-表格" class="headerlink" title="3. 表格"></a>3. 表格</h2><h3 id="3-1表格标签"><a href="#3-1表格标签" class="headerlink" title="3.1表格标签"></a>3.1表格标签</h3><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//ZM16LYYX%7DZ4%60FSUA_@G]HUU.png" alt="表格标签"></p><h3 id="3-2设置"><a href="#3-2设置" class="headerlink" title="3.2设置"></a>3.2设置</h3><ul><li>可用css对标签进行样式控制</li></ul><h2 id="4-样式控制"><a href="#4-样式控制" class="headerlink" title="4.样式控制"></a>4.样式控制</h2><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//css%E8%A1%A8%E5%8D%95%E6%A0%B7%E5%BC%8F%E6%8E%A7%E5%88%B6.png" alt="样式控制"></p><ul><li>outline 常与input输入框结合使用</li></ul><p><strong>列</strong><br>*<em>页面元素</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>春季<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>夏季<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>秋季<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>冬季<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>css</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="comment">/*实际只有一颗星星，默认重复*/</span></span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../img/bg.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*不重复*/</span></span><br><span class="line">        <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">        <span class="comment">/*水平重复*/</span></span><br><span class="line">        <span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line">        <span class="comment">/*垂直重复*/</span></span><br><span class="line">        <span class="attribute">background-repeat</span>: repeat-y;</span><br><span class="line">        <span class="comment">/*水平+垂直重复*/</span></span><br><span class="line">        <span class="attribute">background-repeat</span>: repeat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">input</span>&#123;</span><br><span class="line">        <span class="comment">/*double双实线*/</span></span><br><span class="line">        <span class="attribute">outline</span>: double;</span><br><span class="line">        <span class="comment">/*小圆点*/</span></span><br><span class="line">        <span class="attribute">outline</span>: dotted;</span><br><span class="line">        <span class="comment">/*虚线*/</span></span><br><span class="line">        <span class="attribute">outline</span>: dashed;</span><br><span class="line">        <span class="comment">/*无效果*/</span></span><br><span class="line">        <span class="attribute">outline</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span>&#123;</span><br><span class="line">        <span class="comment">/*inline:内联元素(无换行、无长宽)*/</span></span><br><span class="line">        <span class="attribute">display</span>: inline;</span><br><span class="line">        <span class="comment">/*block: 块级元素(有换行、有长宽)*/</span></span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*inline-block: 内联元素(有长宽)*/</span></span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="comment">/*none: 隐藏元素*/</span></span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">        <span class="attribute">background</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="5-盒子模型"><a href="#5-盒子模型" class="headerlink" title="5.盒子模型"></a>5.盒子模型</h2><h3 id="5-1介绍"><a href="#5-1介绍" class="headerlink" title="5.1介绍"></a>5.1介绍</h3><p><strong>万物皆盒子</strong></p><ul><li>通过设置边框和元素内容的边距，从而实现布局的方式。</li><li>分为==内边距==和==外边距==两种方式。</li><li><strong>内外边界的设置，取决于所在视角，一般经常使用外边距</strong></li></ul><h3 id="5-2边距"><a href="#5-2边距" class="headerlink" title="5.2边距"></a>5.2边距</h3><h4 id="1-）外边距"><a href="#1-）外边距" class="headerlink" title="1.）外边距"></a>1.）外边距</h4><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E8%BE%B9%E8%B7%9D.png" alt="css盒子模型边距"></p><h4 id="2-内边距"><a href="#2-内边距" class="headerlink" title="2.) 内边距"></a>2.) 内边距</h4><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E5%86%85%E8%BE%B9%E8%B7%9D.png" alt="css盒子模型内边距"></p><h3 id="5-3代码举例"><a href="#5-3代码举例" class="headerlink" title="5.3代码举例"></a>5.3代码举例</h3><p><strong>页面元素</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wai&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nei&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>css</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.wai</span>&#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> double red;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*设置内边距会导致外框变化*/</span></span><br><span class="line">        <span class="attribute">padding-top</span>: <span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.nei</span>&#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*设置外边距*/</span></span><br><span class="line">        <span class="attribute">margin</span>: auto;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="comment">/*上右下左*/</span></span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> <span class="number">40px</span> <span class="number">30px</span> <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-注意"><a href="#6-注意" class="headerlink" title="6.注意"></a>6.注意</h2><ul><li>clear: both; 清除浮动</li><li>form 别忘了method</li><li>表单别忘了table</li><li>按钮别忘了type</li><li>有时候图方便，可以直接在标签中添加style</li><li>outline 可以设置取消轮廓</li><li>宽度设置可用百分比</li><li>表单中name不能少</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML总结</title>
      <link href="/2022/01/28/JavaWeb/html+css/HTML/"/>
      <url>/2022/01/28/JavaWeb/html+css/HTML/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h1 id="1-HTML入门"><a href="#1-HTML入门" class="headerlink" title="1.HTML入门"></a>1.HTML入门</h1><h2 id="1-1-初识HTML"><a href="#1-1-初识HTML" class="headerlink" title="1.1 初识HTML"></a>1.1 初识HTML</h2><h3 id="1-1-1-概述"><a href="#1-1-1-概述" class="headerlink" title="1.1.1 概述"></a>1.1.1 概述</h3><p>网络世界已经跟我们息息相关，当我们打开一个网站，首先映入眼帘的就是一个个华丽多彩的网页。这些网页，不仅呈现着基本的内容，还具备优雅的布局和丰富的动态效果，这一切都是如何做到的呢？前端入门课程，为您一层层的揭开网页的面纱。</p><ul><li><strong>网页的构成</strong><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">HTML</a>：通常用来定义网页内容的含义和基本结构。</li><li> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">CSS</a>：通常用来描述网页的表现与展示效果。</li><li> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript</a>：通常用来执行网页的功能与行为。</li></ul></li></ul><p><strong>HTML</strong>（超文本标记语言——HyperText Markup Language）是构成 Web 世界的一砖一瓦。它是一种用来告知浏览器如何组织页面的<strong>标记语言</strong>。</p><p>所谓<code>超文本Hypertext</code>，是指连接单个或者多个网站间的网页的链接。我们通过链接，就能访问互联网中的内容。</p><p>所谓<code>标记Markup</code> ，是用来注明文本，图片等内容，以便于在浏览器中显示，例如<code>&lt;head&gt;</code>,<code>&lt;body&gt;</code>等。</p><ul><li><strong>HTML发展简史【了解】</strong><ul><li>HTML 1.0在1993年6月作为互联网工程工作小组（IETF）工作草案发布（并非标准）</li><li>HTML 2.0——1995年11月作为RFC 1866发布，在RFC 2854于2000年6月发布之后被宣布已经过时</li><li>HTML 3.2——1997年1月14日，W3C推荐标准</li><li>HTML 4.0——1997年12月18日，W3C推荐标准</li><li>HTML 4.01（微小改进）——1999年12月24日，W3C推荐标准</li><li>HTML5 —— 2014年10月29日，万维网联盟宣布，经过接近8年的艰苦努力，该标准规范终于制定完成。是目前最为流行的版本，提供了很多标签新特性，现代大多数浏览器已经具备了 HTML5的支持。</li></ul></li></ul><h3 id="1-1-2-HTML的组成"><a href="#1-1-2-HTML的组成" class="headerlink" title="1.1.2 HTML的组成"></a>1.1.2 HTML的组成</h3><p>HTML页面由一系列的<strong>元素（<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element">elements</a>）</strong> 组成，而元素是使用<strong>标签</strong>创建的。</p><h4 id="1）标签"><a href="#1）标签" class="headerlink" title="1）标签"></a>1）标签</h4><p>一对标签（ <a href="https://developer.mozilla.org/en-US/docs/Glossary/Tag">tags</a>）可以设置一段文字样式，添加一张图片或者添加超链接等等。 例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>今天是个好日子<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在HTML中，<code>&lt;h1&gt;</code>标签表示<strong>标题</strong>，那么，我们可以使用<strong>开始标签</strong>和<strong>结束标签</strong>包围文本内容，这样其中的内容就以标题的形式显示了。</p><h4 id="2）属性"><a href="#2）属性" class="headerlink" title="2）属性"></a>2）属性</h4><p>HTML标签可以拥有<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes">属性</a>。<strong>属性</strong>提供了有关 HTML 元素的<strong>更多的信息</strong>。我们只能在开始标签中，加入属性。通常以<code>名称=值 </code>成对的形式出现，**比如：name=’value’**。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>今天是个好日子!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在HTML标签中，<code>align</code>  属性表示<strong>水平对齐方式</strong>，我们可以赋值为 <code>center</code>  表示 <strong>居中</strong> 。</p><h2 id="1-2入门案例"><a href="#1-2入门案例" class="headerlink" title="1.2入门案例"></a>1.2入门案例</h2><h3 id="1-2-1-页面说明"><a href="#1-2-1-页面说明" class="headerlink" title="1.2.1 页面说明"></a>1.2.1 页面说明</h3><ol><li><p><code>&lt;!DOCTYPE html&gt;</code>: <strong>声明文档类型</strong>。规定了HTML页面必须遵从的良好规则，从HTML5后，<code>&lt;!DOCTYPE html&gt;</code>是最短的有效的文档声明。</p></li><li><p><code>&lt;html&gt;</code>：这个标签包裹了整个完整的页面，是一个<strong>根元素（顶级元素）</strong>。其他所有元素必须是此元素的后代，每篇HTML文档只有一个根元素。</p></li><li><p><code>&lt;head&gt;</code>：这个标签是一个容器，它包含了所有你想包含在HTML页面中但不想在HTML页面中显示的内容。这些内容包括你想在搜索结果中出现的关键字和页面描述，CSS样式，字符集声明等等。以后的章节能学到更多关于<code>&lt;head&gt;</code> 元素的内容。目前主要了解两个标签：</p><ol><li><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>：这个标签是页面的元数据信息，设置文档使用utf-8字符集编码，utf-8字符集包含了人类大部分的文字。基本上他能识别你放上去的所有文本内容，能够避免页面乱码问题。</li><li><code>&lt;title&gt;</code>：这个标签定义文档标题，位置出现在浏览器标签上，而不是页面正文中。在收藏页面时，它可用来描述页面。</li></ol></li><li><p><code>&lt;body&gt;</code>：包含了文档内容，你访问页面时所有显示在页面上的文本，图片，音频，游戏等等。</p></li></ol><h3 id="1-2-2-案例实现"><a href="#1-2-2-案例实现" class="headerlink" title="1.2.2 案例实现"></a>1.2.2 案例实现</h3><ol><li>在初始化页面的<code> &lt;body&gt;</code>标签中，加入一对<code>&lt;p&gt;</code> 标签。<code>&lt;p&gt;</code>标签表示文本的一个段落，具有整段文本之间相分离的效果。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>在一对<code>&lt;p&gt;</code> 标签中，编写文本内容。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第一个页面<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-3-总结"><a href="#1-3-总结" class="headerlink" title="1.3 总结"></a>1.3 总结</h2><ul><li><p>HTML是一种<strong>标记语言</strong>，用来组织页面，使用元素和属性。</p></li><li><p><strong>这个元素的主要部分有：</strong></p></li></ul><ol><li><strong>元素</strong>（Element）：开始标签、结束标签与内容相结合，便是一个完整的元素。</li><li><strong>开始标签</strong>（Opening tag）：包含元素的名称（本例为 p），被左、右角括号所包围。表示元素从这里开始或者开始起作用 —— 在本例中即段落由此开始。</li><li><strong>结束标签</strong>（Closing tag）：与开始标签相似，只是其在元素名之前包含了一个斜杠。这表示着元素的结尾 —— 在本例中即段落在此结束。初学者常常会犯忘记包含结束标签的错误，这可能会产生一些奇怪的结果。</li><li><strong>内容</strong>（Content）：元素的内容，本例中就是所输入的文本本身。</li><li><strong>属性</strong>（Attribute）：标签的附加信息。</li></ol><ul><li><strong>在学习HTML时，要抓住两个方面：</strong></li></ul><ol><li>掌握标签所代表的含义。</li><li>掌握在标签中加入的属性的含义。</li></ol><h1 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2.基本语法"></a>2.基本语法</h1><h2 id="2-1注释"><a href="#2-1注释" class="headerlink" title="2.1注释"></a>2.1注释</h2><p><strong>格式：</strong></p><ul><li>&lt;!- 内容 -&gt;</li></ul><p><strong>特点</strong></p><ul><li>不会被浏览器解析<h2 id="2-2标签"><a href="#2-2标签" class="headerlink" title="2.2标签"></a>2.2标签</h2><h3 id="2-2-1标签的分类"><a href="#2-2-1标签的分类" class="headerlink" title="2.2.1标签的分类"></a>2.2.1标签的分类</h3></li><li>开始和结束标签 <h1> </h1>  <u> <u>（加下划线)</li><li>自闭合标签 <br/>    <hr/>(水平分割线)</li></ul><h3 id="2-2-2标签的嵌套"><a href="#2-2-2标签的嵌套" class="headerlink" title="2.2.2标签的嵌套"></a>2.2.2标签的嵌套</h3><ul><li>正确的嵌套格式：<h1><u>文本</u><h1></li><li> 错误的嵌套格式：<h1><u>文本<h1></u></li></ul><h3 id="2-2-3块级元素和行内元素"><a href="#2-2-3块级元素和行内元素" class="headerlink" title="2.2.3块级元素和行内元素"></a>2.2.3块级元素和行内元素</h3><h4 id="2-2-3-1概念"><a href="#2-2-3-1概念" class="headerlink" title="2.2.3.1概念"></a>2.2.3.1概念</h4><p>在HTML中有两种重要元素类别，块级元素和内联元素。</p><ul><li><p><strong>块级元素</strong>：</p><p><strong>独占一行</strong>。块级元素（block）在页面中以块的形式展现。相对于其前面的内容它会出现在新的一行，其后的内容也会被挤到下一行展现。比如<code>&lt;p&gt;</code> ，<code>&lt;hr&gt;</code>，<code>&lt;li&gt;</code> ，<code>&lt;div&gt;</code>等。</p></li><li><p><strong>行内元素</strong>4</p><p><strong>行内显示</strong>。行内元素不会导致换行。通常出现在块级元素中并环绕文档内容的一小部分，而不是一整个段落或者一组内容。比如<code>&lt;b&gt;</code>，<code>&lt;a&gt;</code>，<code>&lt;i&gt;</code>，<code>&lt;span&gt;</code> 等。</p></li></ul><p><em><code>&lt;b&gt;</code> 为加粗、<code>&lt;i&gt;</code>为斜体</em></p><h4 id="2-2-3-2div和span"><a href="#2-2-3-2div和span" class="headerlink" title="2.2.3.2div和span"></a>2.2.3.2div和span</h4><ul><li><p><code>&lt;div&gt;</code> 是一个通用的内容容器，并没有任何特殊语义。它可以被用来对其它元素进行分组，一般用于样式化相关的需求。它是一个<strong>块级元素</strong>。</p></li><li><p><code> &lt;span&gt;</code> 是短语内容的通用行内容器，并没有任何特殊语义。它可以被用来编组元素以达到某种样式。它是一个<strong>行内元素</strong>。</p></li><li><p>核心作用都是布局页面。</p><h2 id="2-3属性"><a href="#2-3属性" class="headerlink" title="2.3属性"></a>2.3属性</h2><h3 id="2-3-1-定义"><a href="#2-3-1-定义" class="headerlink" title="2.3.1 定义"></a>2.3.1 定义</h3><p>标签属性，主要用于拓展标签。属性包含元素的额外信息，这些信息不会出现在实际的内容中。但是可以改变标签的一些行为或者提供数据，属性总是以<code>name = value</code>的格式展现。</p><h3 id="2-3-2规范"><a href="#2-3-2规范" class="headerlink" title="2.3.2规范"></a>2.3.2规范</h3></li><li><p>属性名：同一个标签中，属性名不得重复。</p></li><li><p>大小写：属性和属性值对大小写不敏感。不过W3C标准中，推荐使用小写的属性/属性值。</p></li><li><p>引号：双引号是最常用的，不过使用单引号也没有问题。</p><h3 id="2-2-3常用属性"><a href="#2-2-3常用属性" class="headerlink" title="2.2.3常用属性"></a>2.2.3常用属性</h3></li><li><p>常用属性：</p><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>class</td><td>定义元素类名，用来选择和访问特定的元素</td></tr><tr><td>id</td><td>定义元素唯一标识符，在整个文档中必须是唯一的</td></tr><tr><td>name</td><td>定义元素名称，可以用于提交服务器的表单字段</td></tr><tr><td>value</td><td>定义在元素内显示的默认值</td></tr><tr><td>style</td><td>定义CSS样式，这些样式会覆盖之前设置的样式（第一天简单了解，第二天主要内容）</td></tr></tbody></table></li></ul><h2 id="2-4特殊字符"><a href="#2-4特殊字符" class="headerlink" title="2.4特殊字符"></a>2.4特殊字符</h2><h3 id="2-4-1什么是特殊字符"><a href="#2-4-1什么是特殊字符" class="headerlink" title="2.4.1什么是特殊字符"></a>2.4.1什么是特殊字符</h3><ul><li>在html中，像&lt; &gt;、 “、 ‘、空格、 &amp;都是特殊字符，它们是语法本身的一部分。<h3 id="2-4-2常用的特殊字符"><a href="#2-4-2常用的特殊字符" class="headerlink" title="2.4.2常用的特殊字符"></a>2.4.2常用的特殊字符</h3><table><thead><tr><th>原义字符</th><th>等价字符引用</th></tr></thead><tbody><tr><td>&lt;</td><td><code>&amp;lt;</code></td></tr><tr><td>&gt;</td><td><code>&amp;gt;</code></td></tr><tr><td>“</td><td><code>&amp;quot;</code></td></tr><tr><td>‘</td><td><code>&amp;apos;</code></td></tr><tr><td>&amp;</td><td><code>&amp;amp;</code></td></tr><tr><td>空格</td><td><code>&amp;nbsp;</code></td></tr></tbody></table></li></ul><h2 id="2-5总结"><a href="#2-5总结" class="headerlink" title="2.5总结"></a>2.5总结</h2><ul><li>HTML的基本语法比较简单，在使用的过程中注意写法即可。</li></ul><h1 id="3-HTML案例-新闻文本"><a href="#3-HTML案例-新闻文本" class="headerlink" title="3 HTML案例-新闻文本"></a>3 HTML案例-新闻文本</h1><h2 id="3-1案例分析"><a href="#3-1案例分析" class="headerlink" title="3.1案例分析"></a>3.1案例分析</h2><h3 id="3-1-1div样式布局"><a href="#3-1-1div样式布局" class="headerlink" title="3.1.1div样式布局"></a>3.1.1div样式布局</h3><ul><li>在<code>&lt;head&gt;</code>标签中通过<code>&lt;style&gt;</code>标签来控制样式</li><li>样式演示：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 显示边框*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">    <span class="comment">/*    宽度控制*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">60%</span>;</span></span><br><span class="line"><span class="css">    <span class="comment">/*    高度控制*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">    <span class="comment">/*    边框外边距*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-2文本标签"><a href="#3-1-2文本标签" class="headerlink" title="3.1.2文本标签"></a>3.1.2文本标签</h3></li><li>常用标签：<br><img src="C:\Users\23694\Desktop\文本标签.png" alt="文本标签"></li><li>代码演示<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--段落标签&lt;p&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这也是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--标题标签&lt;hn&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    水平线标题&lt;hr/&gt; 属性：size-大小 color-颜色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    无序列表&lt;ul&gt;</span></span><br><span class="line"><span class="comment">属性: type-列表样式(disc实心圆、circle空心圆、square实心方块 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    斜体标签&lt;i&gt;、&lt;em&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    加粗标签&lt;b&gt;、&lt;strong&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;square&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>javaEE<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>html<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    有序列表&lt;ol&gt;</span></span><br><span class="line"><span class="comment">属性：type-列表样式(1数字、A或a字母、I或i罗马字符 start-起始位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;I&quot;</span> <span class="attr">start</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>nuc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>softWare<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    文字标签&lt;font&gt;</span></span><br><span class="line"><span class="comment">属性：size-字体大小    color-颜色     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;5&quot;</span> <span class="attr">color</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span>这是一段文字<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="4-HTML案例-头条页面"><a href="#4-HTML案例-头条页面" class="headerlink" title="4 HTML案例-头条页面"></a>4 HTML案例-头条页面</h1><h2 id="4-1案例分析"><a href="#4-1案例分析" class="headerlink" title="4.1案例分析"></a>4.1案例分析</h2><h3 id="4-1-1div布局的进阶"><a href="#4-1-1div布局的进阶" class="headerlink" title="4.1.1div布局的进阶"></a>4.1.1div布局的进阶</h3><p>** 添加class属性**</p><h3 id="4-1-2浮动效果和清除"><a href="#4-1-2浮动效果和清除" class="headerlink" title="4.1.2浮动效果和清除"></a>4.1.2浮动效果和清除</h3><ul><li><strong>概念</strong><br><strong>float</strong>：指定一个元素应沿其容器的左侧或右侧放置，允许文本或者内联元素环绕它，该元素从网页的正常流动中移除，其他部分保持正常文档流顺序。</li></ul><p><strong>float 属性</strong><br>float 属性用于定位和格式化内容，例如让图像向左浮动到容器中的文本那里。</p><p>float 属性可以设置以下值之一：</p><ul><li>left - 元素浮动到其容器的左侧</li><li>right - 元素浮动在其容器的右侧</li><li>none - 元素不会浮动（将显示在文本中刚出现的位置）。默认值。</li><li>inherit - 元素继承其父级的 float 值</li><li>最简单的用法是，float 属性可实现（报纸上）文字包围图片的效果。</li></ul><p><strong>清除浮动clear</strong></p><h2 id="4-1-3-图片标签"><a href="#4-1-3-图片标签" class="headerlink" title="4.1.3 图片标签"></a>4.1.3 图片标签</h2><table><thead><tr><th>标签名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>img</strong></td><td>可以显示一张图片(本地或网络)</td><td><strong>src属性</strong>，这是一个必需的属性，表示图片的地址。</td></tr></tbody></table><p>其他属性：</p><table><thead><tr><th>属性名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>title</strong></td><td>鼠标悬停（hover）时显示文本。</td><td></td></tr><tr><td><strong>alt</strong></td><td>图形不显示时的替换文本。</td><td></td></tr><tr><td><strong>height</strong></td><td>图像的高度。</td><td></td></tr><tr><td><strong>width</strong></td><td>图像的宽度。</td><td></td></tr></tbody></table><h2 id="4-1-4-超链接标签"><a href="#4-1-4-超链接标签" class="headerlink" title="4.1.4 超链接标签"></a>4.1.4 超链接标签</h2><table><thead><tr><th>标签名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>a</strong></td><td>表示超链接。</td><td><strong>href属性</strong>，表示超链接指向的URL地址。</td></tr></tbody></table><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>target</td><td>页面的打开方式(_self当前页   _blank新标签页)。</td></tr></tbody></table><p><strong>去掉下划线</strong></p><p>根据某些样式的布局需求，去除下划线更为美观。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123; </span><br><span class="line">    <span class="attribute">text-decoration</span>:none;  // <span class="attribute">none</span> 表示不显示</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-使用标签"><a href="#4-2-使用标签" class="headerlink" title="4.2 使用标签"></a>4.2 使用标签</h2><ol><li>使用div标签，设置布局，背景和浮动等。</li><li>基本文本标签</li><li>图片标签</li><li>超链接标签</li></ol><h2 id="4-3-注意"><a href="#4-3-注意" class="headerlink" title="4.3 注意"></a>4.3 注意</h2><ol><li>图片宽度可以是： width=”100%”</li><li>&lt;hr&gt; 为分割线</li><li>注意代码格式</li><li>&lt;a href=”#”&gt;代表不跳转</li><li>selected可以默认选中option元素</li></ol><h1 id="5-HTML案例-注册页面"><a href="#5-HTML案例-注册页面" class="headerlink" title="5 HTML案例-注册页面"></a>5 HTML案例-注册页面</h1><h2 id="5-1-案例效果"><a href="#5-1-案例效果" class="headerlink" title="5.1 案例效果"></a>5.1 案例效果</h2><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//A9KQ5UY8P8CJ$6QLFV0%60Y_6.png"></p><h2 id="5-2背景图片"><a href="#5-2背景图片" class="headerlink" title="5.2背景图片"></a>5.2背景图片</h2><ul><li>background: url(“”);</li><li>填图片为图片，也可以填颜色</li></ul><h2 id="5-3-表单标签"><a href="#5-3-表单标签" class="headerlink" title="5.3 表单标签"></a>5.3 表单标签</h2><table><thead><tr><th>标签名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>form</strong></td><td>表示表单，是用来收集用户输入信息并向 Web 服务器提交的一个容器</td><td></td></tr></tbody></table><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> &gt;</span></span><br><span class="line">    //表单元素</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>表单的属性</strong></p><table><thead><tr><th>属性名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>action</strong></td><td>处理此表单信息的Web服务器的URL地址</td><td></td></tr><tr><td><strong>method</strong></td><td>提交此表单信息到Web服务器的方式</td><td>可能的值有get和post，默认为get</td></tr><tr><td><strong>autocomplete</strong></td><td>自动补全，指示表单元素是否能够拥有一个默认值，配合input标签使用</td><td>HTML5</td></tr></tbody></table><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一个简单的表单，会发送一个 GET 请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/web/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 一个简单的表单，发送 POST 请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/web/reg&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>GET与POST说明：</strong></p><p><code>post</code>：指的是 HTTP <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5">POST 方法</a>；表单数据会包含在表单体内然后发送给服务器。</p><p><code>get</code>：指的是 HTTP <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3">GET 方法</a>；表单数据会附加在 <code>action</code> 属性的URI中，并以 ‘?’ 作为分隔符，然后这样得到的 URI 再发送给服务器。</p><p><strong>GET与POST对比：</strong></p><table><thead><tr><th></th><th>地址栏可见</th><th>数据安全</th><th>数据大小</th></tr></thead><tbody><tr><td>GET</td><td>可见</td><td>不安全</td><td>有限制（取决于浏览器）</td></tr><tr><td>POST</td><td>不可见</td><td>相对安全</td><td>无限制</td></tr></tbody></table><h2 id="5-4-表单元素入门"><a href="#5-4-表单元素入门" class="headerlink" title="5.4 表单元素入门"></a>5.4 表单元素入门</h2><p>表单元素指的是 input 元素、复选框、下拉框、提交按钮等等。</p><table><thead><tr><th>标签名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>**label **</td><td>表单元素的说明，配合表单元素使用</td><td>for属性值为相关表单元素的id属性值</td></tr><tr><td><strong>input</strong></td><td>表单中输入控件，多种输入类型，用于接受来自用户数据</td><td>type属性值决定输入类型</td></tr><tr><td><strong>button</strong></td><td>页面中可点击的按钮，可以配合表单进行提交</td><td>type属性值决定按钮类型</td></tr></tbody></table><h2 id="1）简单的文本输入框"><a href="#1）简单的文本输入框" class="headerlink" title="1）简单的文本输入框"></a>1）简单的文本输入框</h2><ul><li><p>label标签：表单的说明。</p><ul><li>for属性值：匹配input标签的id属性值</li></ul></li><li><p>input标签：输入控件。</p><ul><li>type属性：表示输入类型，text值为普通文本框</li><li>id属性：表示标签唯一标识</li><li>name属性：表示标签名称、提交到服务器的唯一标识</li><li>value属性：表示标签数据值</li><li>placeholder-默认的提示信息</li><li>required-是否必须</li></ul></li></ul><p><strong>代码实现：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2）提交用户名的表单"><a href="#2）提交用户名的表单" class="headerlink" title="2）提交用户名的表单"></a>2）提交用户名的表单</h2><ul><li>button标签：表示按钮。<ul><li>type属性：表示按钮类型，submit值为提交按钮。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> &gt;</span>login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="TYPE属性"><a href="#TYPE属性" class="headerlink" title="TYPE属性"></a><strong>TYPE属性</strong></h2><ul><li><p><strong>input标签的type属性</strong></p><blockquote><p>【建议】</p><p>这是今天的重点讲解内容，type的值决定输入的类型</p></blockquote><ul><li><strong>基本的文本属性</strong></li></ul><table><thead><tr><th>属性值</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>text</td><td>单行文本字段</td><td></td></tr><tr><td>password</td><td>单行文本字段，值被遮盖</td><td></td></tr><tr><td>email</td><td>用于编辑 e-mail 的字段，可以对e-mail地址进行简单校验</td><td>HTML5</td></tr></tbody></table></li></ul><ul><li><p><strong>单选多选属性</strong></p><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>radio</td><td>单选按钮。 1. 在同一个”单选按钮组“中，所有单选按钮的 name 属性使用同一个值；一个单选按钮组中是，同一时间只有一个单选按钮可以被选择。 2. 必须使用 value 属性定义此控件被提交时的值。 3. 使用==checked== 必须指示控件是否缺省被选择。</td></tr><tr><td>checkbox</td><td>复选框。 1. 必须使用 value 属性定义此控件被提交时的值。 2. 使用 ==checked== 属性指示控件是否被选择。 3. 选中多个值时，所有的值会构成一个数组而提交到Web服务器</td></tr></tbody></table></li></ul><p>** 注意 **</p><ul><li>在单选框中<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        name一样才难达到单选效果--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        value才是被提交的值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;men&quot;</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;women&quot;</span>&gt;</span>女 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>** 更多type属性值 **<br><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//type%E5%B1%9E%E6%80%A7%E5%80%BC.png" alt="表单项标签type属性值"></p><h2 id="5-5-更多表单元素"><a href="#5-5-更多表单元素" class="headerlink" title="5.5 更多表单元素"></a>5.5 更多表单元素</h2><table><thead><tr><th>标签名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>**select **</td><td>表单的控件，下拉选项菜单</td><td>与option配合实用</td></tr><tr><td><strong>optgroup</strong></td><td>option的分组标签</td><td>与option配合实用</td></tr><tr><td>**option **</td><td>select的子标签，表示一个选项</td><td></td></tr><tr><td><strong>textarea</strong></td><td>表示多行纯文本编辑控件</td><td>rows表示行高度， cols表示列宽度</td></tr><tr><td><strong>fieldset</strong></td><td>用来对表单中的控制元素进行分组(也包括 label 元素)</td><td></td></tr><tr><td><strong>legend</strong></td><td>用于表示它的<strong>fieldset</strong>内容的标题。</td><td><strong>fieldset</strong> 的子元素</td></tr></tbody></table><p><strong>select举例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">       所在城市：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>---请选择城市---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;直辖市&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;省会&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>太原<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>郑州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">  select的name属性值与option的value属性值,构成键值对,提交到Web服务器</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p><strong>textarea举例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span>&gt;</span>Write something here<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>fieldset举例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>是否同意<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;radio_y&quot;</span> <span class="attr">name</span>=<span class="string">&quot;agree&quot;</span> <span class="attr">value</span>=<span class="string">&quot;y&quot;</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;radio_y&quot;</span>&gt;</span>同意<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;radio_n&quot;</span> <span class="attr">name</span>=<span class="string">&quot;agree&quot;</span> <span class="attr">value</span>=<span class="string">&quot;n&quot;</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;radio_n&quot;</span>&gt;</span>不同意<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-6-填写表单的两种方式"><a href="#5-6-填写表单的两种方式" class="headerlink" title="5.6 填写表单的两种方式"></a>5.6 填写表单的两种方式</h2><p><strong>1、把行放在一个div中</strong><br><strong>2、利用table标签、当为表格排列</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基本命令(2)-Linux管理</title>
      <link href="/2022/01/27/JavaWeb/Linux/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%20(2)-Linux%E7%AE%A1%E7%90%86/"/>
      <url>/2022/01/27/JavaWeb/Linux/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%20(2)-Linux%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h3><p><strong>语法：</strong></p><ul><li>touch [参数选项] 文件名        如果文件不存在就创建文件</li><li><pre><code>                     如果存在就修改时间属性</code></pre></li></ul><p><strong>参数说明</strong>：</p><ul><li>a 改变档案的读取时间记录。</li><li>m 改变档案的修改时间记录。</li><li>c 假如目的档案不存在，不会建立新的档案。与 –no-create 的效果一样。</li><li>f 不使用，是为了与其他 unix 系统的相容性而保留。</li><li>r 使用参考档的时间记录，与 –file 的效果一样。</li><li>d 设定时间与日期，可以使用各种不同的格式。</li><li>t 设定档案的时间记录，格式与 date 指令相同。</li><li>–no-create 不会建立新档案。</li><li>–help 列出指令格式。</li><li>–version 列出版本讯息。</li></ul><p><strong>常用命令</strong></p><ul><li>touch a.txt        不存在就创建，存在就修改时间属性</li><li>touch a{1..10}.txt    批量创建空文件</li><li>stat a.txt          查看文件的详细信息</li></ul><h3 id="vi-vim编辑器"><a href="#vi-vim编辑器" class="headerlink" title="vi/vim编辑器"></a>vi/vim编辑器</h3><h4 id="vi-vim介绍"><a href="#vi-vim介绍" class="headerlink" title="vi/vim介绍"></a>vi/vim介绍</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用vi/vim其实就相当于我们在Windows系统中创建文件、打开文件、编辑文件、保存文件操作</span><br></pre></td></tr></table></figure><p><strong>1、vi介绍</strong></p><p>vi是 <code>visual interface</code>的简称, 是linux中<strong>最经典</strong>的文本编辑器。</p><ul><li>vi的特点<ul><li>只能是编辑 <strong>文本内容</strong>, 不能对 字体 段落进行排版</li><li><strong>不支持鼠标操作</strong></li><li><strong>没有菜单</strong></li><li><strong>只有命令</strong></li></ul></li><li>vi编辑器在 <strong>系统管理 服务器管理</strong> 编辑文件时, <strong>其功能永远不是图形界面的编辑器能比拟的</strong></li></ul><p><strong>2、vim介绍</strong></p><ul><li>左下角会有一个冒号出现，此时可以敲入命令并执行。</li><li>三种模式</li></ul><blockquote><p>上面的三种模式简单总结下就是：</p><p>1、vim  开始进入时是命令模式</p><p>2、按下I的时候会进入编辑模式</p><p>3、按下ESC然后在按下：的时候是末行模式</p></blockquote><h3 id="打开和新建文件"><a href="#打开和新建文件" class="headerlink" title="打开和新建文件"></a>打开和新建文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用vim不但可以打开一个现存的文件；也可以生成（vim后的文件不存在的情况下）一个文件；有点类似于我们在Windows中输入notepad命令一样，我们输入notepad后就会打开一个文本文档，然后进行编辑--另存为。</span><br></pre></td></tr></table></figure><p><strong>使用者权限：当前文件的权限用户</strong></p><ul><li>在终端中输入vim在后面跟上 文件名 即可</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim txtfile.txt</span><br></pre></td></tr></table></figure><ul><li>如果文件已经存在, 会直接打开该文件</li><li>如果文件不存在, 保存且退出时 就会新建一个文件</li></ul><blockquote><p>注意</p><p>我们通过下面的三种模式切换详细阐述vim的用法</p></blockquote><h3 id="三种模式切换"><a href="#三种模式切换" class="headerlink" title="三种模式切换"></a>三种模式切换</h3><p><strong>1、进入命令模式</strong></p><p>上接上面的例子，我们执行下面的命令其实就是进入了命令模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim txtfile.txt</span><br></pre></td></tr></table></figure><p>执行效果如下图</p><p><img src="assets/1576655123201.png" alt="1576655123201"></p><p><strong>2、进入编辑模式</strong></p><p>上接上面的例子，按i进入插入模式</p><ul><li>在 vi 中除了常用 <code>i</code> 进入<strong>编辑模式</strong> 外, 还提供了一下命令同样可以进入编辑模式</li></ul><table><thead><tr><th>命令</th><th>英文</th><th>功能</th><th>常用</th></tr></thead><tbody><tr><td>i</td><td>insert</td><td>在当前字符前插入文本</td><td>常用</td></tr><tr><td>I</td><td>insert</td><td>在行首插入文本</td><td>较常用</td></tr><tr><td>a</td><td>append</td><td>在当前字符后添加文本</td><td></td></tr><tr><td>A</td><td>append</td><td>在行末添加文本</td><td>较常用</td></tr><tr><td>o</td><td></td><td>在当前行后面插入一空行</td><td>常用</td></tr><tr><td>O</td><td></td><td>在当前行前面插入一空行</td><td>常用</td></tr></tbody></table><p>上图可以表现为以下形式，如下图</p><p><img src="assets/1576663442969.png" alt="1576663442969"></p><p>执行效果如下图</p><p><img src="assets/1576655181144.png" alt="1576655181144"></p><p>由上图左下角我们看到【插入】（英文版为INSERT）,说明我们进入了编辑模式</p><p>我们在里面插入数据，如下图</p><p>因为我们是一个空文件，所以使用【I】或者【i】都可以</p><p>如果里面的文本很多，要使用【A】进入编辑模式，即在行末添加文本</p><p><img src="assets/1576655270283.png" alt="1576655270283"></p><p><strong>3、进入末行模式</strong></p><p>编辑模式不能保存文件<br>必须先推到命令模式<br>先按Esc键退出到命令模式<br>然后按小写的**:wq 正常保存退出**</p><p>进入末行模式—》按符号： 鼠标跑到屏幕的最后一行，执行效果如下图</p><p><img src="assets/1576655879564.png" alt="1576655879564"></p><p>然后按小写的**:wq 正常保存退出**</p><p><img src="assets/1576655592207.png" alt="1576655592207"></p><p>退出后显示【已写入】</p><p><strong>以下为其他的退出模式：</strong></p><p>:q            当vim进入文件没有对文件内容做任何操作可以按”q”退出</p><p>:q!           当vim进入文件对文件内容有操作但不想保存退出</p><p>:wq          正常保存退出</p><p>:wq!         强行保存退出，只针对与root用户或文件所有人生</p><blockquote><p>总结</p><p>三种模式的切换，其实就完成了文件创建、编辑、保存、退出四个步骤</p><p>那么接下来，我们学习下一个命令</p><p>查看刚才新创建的文件</p></blockquote><h3 id="文件查看"><a href="#文件查看" class="headerlink" title="文件查看"></a>文件查看</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如查看一个txt文档，在windows中，我们通常是打开一个文件，通过鼠标滚动查看文件不同节选的内容，而在Linux中，通过下面的命令，可以减少在Windows中手工查找的步骤，在Linux中通过命令+参数的形式进行定位查看、搜索查看</span><br></pre></td></tr></table></figure><p>以下5个为文件查看命令，<strong>我们只讲4个常用的命令，head不在赘述</strong></p><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>cat 文件名</td><td>concatenate</td><td>查看小文件内容</td></tr><tr><td>02</td><td>less -N 文件名</td><td>less</td><td><strong>分频</strong> 显示大文件内容</td></tr><tr><td>03</td><td>head -n 文件名</td><td></td><td>查看文件的<strong>前一</strong>部分</td></tr><tr><td>04</td><td>tail -n 文件名</td><td></td><td>查看文件的<strong>最后</strong>部分</td></tr><tr><td>05</td><td>grep 关键字 文件名</td><td>grep</td><td>根据<strong>关键词</strong>, 搜索文本文件内容</td></tr></tbody></table><blockquote><p>总结：</p><p>以上5个命令都可以查询文件的内容，他们的功能如下</p><p>通过 <code>cat</code> 会一次显示所有的内容, 适合 <strong>查看内容较少</strong> 的文本文件</p><p><code>less</code> 命令适合查看 <strong>内容较多</strong> 的文本文件</p><p>通过 <code>head</code> 命令查看文档的前几行内容</p><p>通过 <code>tail -10f 文件</code> 命令 查看文档(日志)的后几行内容</p><p>通过 <code>grep</code> 命令 搜索存在 <strong>关键字</strong> 的行</p></blockquote><h4 id="1-cat命令"><a href="#1-cat命令" class="headerlink" title="1) cat命令"></a><strong>1) cat命令</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用cat命令类似于我们在Windows中查看小型（太大的时候打开会卡死）的文件，cat常用的功能其实就等价于Windows中的</span><br><span class="line">txt---打开--查看</span><br></pre></td></tr></table></figure><p>cat 是一个文本文件查看和连接工具。查看一个文件的内容，用cat比较简单，就是cat 后面直接接文件名，如cat txtFiles.txt</p><p><strong>使用者权限：当前文件的权限用户</strong></p><p><strong>语法格式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat [-AbeEnstTuv] [--help] [--version] fileName</span><br></pre></td></tr></table></figure><p><strong>查看文件名为txtfile.txt的内容</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat txtfile.txt</span><br></pre></td></tr></table></figure><p>执行效果如下图</p><p><img src="assets/1576657358085.png" alt="1576657358085"></p><p><strong>查看文件名为txtfile.txt的内容（加入行号）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n txtfile.txt</span><br></pre></td></tr></table></figure><p>执行效果如下图</p><p><img src="assets/1576657409815.png" alt="1576657409815"></p><h4 id="2-grep命令"><a href="#2-grep命令" class="headerlink" title="2) grep命令"></a>2) grep命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep命令在使用的时候类似于我们的程序中的查询，或者在txt文档中通过ctr+f查找</span><br><span class="line">grep除了能对文件操作为还可以查看我们的进程信息，类似于我们在Windows系统的任务管理器（任务栏--右键---启动任务管理器--进程）下的进程</span><br></pre></td></tr></table></figure><p>grep 指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为 -，则 grep 指令会从标准输入设备读取数据。</p><p>grep 命令用于查找文件里符合条件的字符串，语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [-abcEFGhHilLnqrsvVwxy][-A&lt;显示列数&gt;][-B&lt;显示列数&gt;][-C&lt;显示列数&gt;][-d&lt;进行动作&gt;][-e&lt;范本样式&gt;][-f&lt;范本文件&gt;][--help][范本样式][文件或目录...]</span><br></pre></td></tr></table></figure><p><strong>使用者权限：当前文件的权限用户</strong></p><p>我们还是使用上面的txtfile.txt文件，如下图</p><p><img src="assets/1576664862829.png" alt="1576664862829"></p><blockquote><p>为了测试效果，我们新增了其他数据</p><p>增加过程不在赘述</p></blockquote><p>1、搜索 <strong>存在关键字【eeee】</strong> 的行的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep eeee txtfile.txt </span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1576664910366.png" alt="1576664910366"></p><p>2、搜索 <strong>存在关键字【eeee】</strong> 的行 且 <strong>显示行号</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -n eeee txtfile.txt </span><br></pre></td></tr></table></figure><p><img src="assets/1576665113269.png" alt="1576665113269"></p><p>3、<strong>忽略大小写</strong> 搜索 <strong>存在关键字</strong> 的行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -i EEEE txtfile.txt </span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1576666861596.png" alt="1576666861596"></p><p>4、搜索 <strong>不存在关键字</strong> 的行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -v 中国 txtfile.txt </span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1576666928266.png" alt="1576666928266"></p><p><strong>5、查找指定的进程信息（包含grep进程）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep  sshd</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1577095621215.png" alt="1577095621215"></p><blockquote><p>说明</p><p>除最后一条记录外，其他的都是查找出的进程；最后一条记录结果是grep进程本身，并非真正要找的进程</p></blockquote><p><strong>6、查找指定的进程信息（不包含grep进程）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep sshd | grep -v &quot;grep&quot;</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1577095998308.png" alt="1577095998308"></p><p><strong>7、查找进程个数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep -c sshd</span><br></pre></td></tr></table></figure><p> 执行效果如下</p><p><img src="assets/1577096070670.png" alt="1577096070670"></p><p>由上图可知sshd的进程个数为4（包含grep进程本身）</p><h4 id="3-tail命令"><a href="#3-tail命令" class="headerlink" title="3) tail命令"></a>3) tail命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail命令类似于我们在windows中通过鼠标手工查找，比如查看文件最后10行，从第2行一直查看到文件末尾，或者只查看文件末尾的一些信息，这些windows中都是通过人为干预的方式进行查找，在Linux中我们可以通过tail命令实现</span><br></pre></td></tr></table></figure><p>tail 命令可用于查看文件的内容，有一个常用的参数 <strong>-f</strong> 常用于查阅正在改变的日志文件。</p><p><strong>tail -f filename</strong> 会把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。</p><p><strong>使用者权限：当前文件的权限用户</strong></p><p><strong>命令格式：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail [参数] [文件]  </span><br></pre></td></tr></table></figure><p><strong>1、要显示 txtfile.txt  文件的最后 3 行，请输入以下命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -3 txtfile.txt </span><br></pre></td></tr></table></figure><p>原始文件内容如下</p><p><img src="assets/1576667678964.png" alt="1576667678964"></p><p>最后3行内容如下</p><p><img src="assets/1576667701796.png" alt="1576667701796"></p><p><strong>2、动态显示文档的最后内容,一般用来查看日志，请输入以下命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f txtfile.txt</span><br></pre></td></tr></table></figure><p>执行效果如下：</p><p><img src="assets/1576667811261.png" alt="1576667811261"></p><p>此命令显示 txtfile.txt 文件的最后 10 行。当将某些行添加至 txtfile.txt 文件时，tail 命令会继续显示这些行。 显示一直继续，直到您按下（Ctrl-C）组合键停止显示。</p><p>如果要显示最后4行，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -4f txtfile.txt</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1576719306123.png" alt="1576719306123"></p><p><strong>3、显示文件txtfile.txt 的内容，从第 2 行至文件末尾</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail  -n +2  txtfile.txt</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1576719057889.png" alt="1576719057889"></p><p><strong>4、显示文件 txtfile.txt的最后 10 个字符:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -c 45 txtfile.txt</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1576719098586.png" alt="1576719098586"></p><blockquote><p>总结</p><p>在tail使用的过程中，我们使用最多的就是查看文件末尾多多少行</p><p>使用tail -nf txtfile.txt</p><p>通常都是在查看日志信息（报错调试时使用）</p></blockquote><h4 id="4）less命令"><a href="#4）less命令" class="headerlink" title="4）less命令"></a>4）less命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less命令也是查看文件的，只不过它适合查看 内容较多的文本文件，它也可以用于分屏显示文件内容,  每次只显示一页内容，有点类似我们做分页查询</span><br></pre></td></tr></table></figure><p>less用于查看文件，但是less 在查看之前不会加载整个文件。</p><p><strong>使用者权限：当前文件的权限用户</strong></p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less [参数] 文件 </span><br></pre></td></tr></table></figure><p>1、查看txtfile.txt文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less txtfile.txt</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1576720622842.png" alt="1576720622842"></p><p>2、查看命令历史使用记录并通过less分页显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[itcast@localhost ~]$  history | less</span><br><span class="line">    1  ifconfig</span><br><span class="line">    2  reboot</span><br><span class="line">    3  ifconfig</span><br><span class="line">    4  reboot</span><br><span class="line">    5  ifconfig</span><br><span class="line">    6  su root</span><br><span class="line">    7  ifconfig</span><br><span class="line">    8  ping  www.baidu.com</span><br><span class="line">    9  \</span><br><span class="line">   10  ifconfig</span><br><span class="line">   11  date</span><br><span class="line">   12  hwclock --systohc</span><br><span class="line">   13  su root</span><br><span class="line">   </span><br><span class="line">   ......略</span><br></pre></td></tr></table></figure><p>我们输入【j】可以前进行</p><p>​        输入【k】可以后退行</p><p>​        输入【G】可以 移动到最后一行</p><p>​        输入【g】可以移动到第一行</p><p>​        输入【ctrl + F】 向前移动一屏(类似于我们在浏览器中的数据分页的下一页)</p><p>​        输入【ctrl + B】 向后移动一屏(类似于我们在浏览器中的数据分页的上一页)</p><p><strong>其他命令</strong></p><p>1.全屏导航</p><ul><li>ctrl + F - 向前移动一屏</li><li>ctrl + B - 向后移动一屏</li><li>ctrl + D - 向前移动半屏</li><li>ctrl + U - 向后移动半屏</li></ul><p>2.单行导航</p><ul><li>j - 向前移动一行</li><li>k - 向后移动一行</li></ul><p>3.其它导航</p><ul><li>G - 移动到最后一行</li><li>g - 移动到第一行</li><li>q / ZZ - 退出 less 命令</li></ul><h3 id="vim定位行"><a href="#vim定位行" class="headerlink" title="vim定位行"></a>vim定位行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在日常工作中,有可能会遇到打开一个文件,并定位到指定行的情况</span><br><span class="line">例如: 在开发时, 知道某一行代码有错误,可以快速定位到出错误代码的位置</span><br><span class="line">这个时候,可以使用以下命令打开文件</span><br></pre></td></tr></table></figure><p>由于我们这里还没有学到上传文件的命令，所以我们这里还是使用上面的txtfile.txt例子，我们打开文件定位到第6行，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim txtfile.txt +6</span><br></pre></td></tr></table></figure><p>执行效果如下图</p><p><img src="assets/1576659165723.png" alt="1576659165723"></p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a><strong>异常处理</strong></h3><ul><li>如果 vim异常退出, 在磁盘上可能会保存有 交换文件</li><li>下次再使用 vim 编辑文件时, 会看到以下屏幕信息,</li></ul><p><img src="assets/1576658330514.png" alt="1576658330514"></p><p>解决方案：</p><p>将后缀名为.swp的文件删除即可恢复</p><p><img src="assets/1576658480811.png" alt="1576658480811"></p><p>再次编辑文件不在出现提示警告！</p><h3 id="操作扩展"><a href="#操作扩展" class="headerlink" title="操作扩展"></a>操作扩展</h3><p>要熟练使用vi/vim, 首先应该学会怎么在 命令模式下 快速移动光标<br>编辑操作命令 能够和移动命令一起使用</p><p><strong>1) 上 下 左 右</strong></p><p><img src="assets/1558278451153.png" alt="1558278451153"></p><table><thead><tr><th>命令</th><th>功能</th><th>手指</th></tr></thead><tbody><tr><td>h</td><td>向左</td><td>食指</td></tr><tr><td>j</td><td>向下</td><td>食指</td></tr><tr><td>k</td><td>向上</td><td>中指</td></tr><tr><td>l</td><td>向右</td><td>无名指</td></tr></tbody></table><p>也可以使用键盘上的上下左右箭头，这个更有方向感。</p><p><strong>2) 行内移动</strong></p><table><thead><tr><th>命令</th><th>英文</th><th>功能</th></tr></thead><tbody><tr><td>w</td><td>word</td><td>向后移动一个单词</td></tr><tr><td>b</td><td>back</td><td>向前移动一个单词</td></tr><tr><td>0</td><td></td><td>行首</td></tr><tr><td>^</td><td></td><td>行首, 第一个不是空白字符的位置</td></tr><tr><td>$</td><td></td><td>行尾</td></tr></tbody></table><p><strong>3) 行数移动</strong></p><table><thead><tr><th>命令</th><th>英文</th><th>功能</th></tr></thead><tbody><tr><td>gg</td><td>go</td><td>文件顶部</td></tr><tr><td>G</td><td>go</td><td>文件末尾</td></tr><tr><td>数字gg</td><td>go</td><td>移动到 数字 对应行数</td></tr><tr><td>数字G</td><td>go</td><td>移动到 数字 对应行数</td></tr><tr><td>: 数字</td><td></td><td>移动到数字对应的 行数</td></tr></tbody></table><p><strong>4) 屏幕移动</strong></p><table><thead><tr><th>命令</th><th>英文</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl + b</td><td>back</td><td>向上翻页</td></tr><tr><td>Ctrl + f</td><td>forward</td><td>向下翻页</td></tr><tr><td>H</td><td>Head</td><td>屏幕顶部</td></tr><tr><td>M</td><td>Middle</td><td>屏幕中间</td></tr><tr><td>L</td><td>Low</td><td>屏幕底部</td></tr></tbody></table><p><strong>5) 选中文本(可视模式)</strong></p><ul><li>学习 复制 命令前, 应该先学会 <strong>怎么样选中 要复制的代码</strong></li><li>在 vi/vim 中要选择文本, 需要显示 visual 命令切换到 <strong>可视模式</strong></li><li>vi/vim 中提供了 <strong>三种</strong> 可视模式, 可以方便程序员的选择 <strong>选中文本的方式</strong></li><li>按 ESC 可以放弃选中, 返回到 <strong>命令模式</strong></li></ul><table><thead><tr><th>命令</th><th>模式</th><th>功能</th></tr></thead><tbody><tr><td>v</td><td>可视模式</td><td>从光标位置开始按照正常模式选择文本</td></tr><tr><td>V</td><td>可视化模式</td><td>选中光标经过的完整行</td></tr><tr><td>Ctrl + v</td><td>可是块模式</td><td>垂直方向选中文本</td></tr></tbody></table><p><strong>6) 撤销和恢复撤销(保命指令)</strong></p><p>在学习编辑命令之前,先要知道怎样撤销之前一次 错误的 编辑操作</p><table><thead><tr><th>命令</th><th>英文</th><th>功能</th></tr></thead><tbody><tr><td>u</td><td>undo</td><td>撤销上次的命令(ctrl + z)</td></tr><tr><td>Ctrl + r</td><td>uredo</td><td>恢复撤销的命令</td></tr></tbody></table><p><strong>7) 删除文本</strong></p><table><thead><tr><th>命令</th><th>英文</th><th>功能</th></tr></thead><tbody><tr><td>x</td><td>cut</td><td>删除光标所在的字符,或者选中的文字</td></tr><tr><td>d(移动命令)</td><td>delete</td><td>删除移动命令对应的内容</td></tr><tr><td>dd</td><td>delete</td><td>删除光标所在行, 可以删除多行</td></tr><tr><td>D</td><td>delete</td><td>删除至行尾</td></tr></tbody></table><p>提示: 如果使用 可视模式 已经选中了一段文本, 那么无论使用 d 还是 x, 都可以删除选中文本</p><p>删除命令可以和移动命令连用, 以下是常见的组合命令(扩展):</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>dw</td><td>从光标位置删除到单词末尾</td></tr><tr><td>d}</td><td>从光标位置删除到段落末尾</td></tr><tr><td>ndd</td><td>从光标位置向下连续删除 n 行</td></tr></tbody></table><p><strong>8) 复制和剪切</strong></p><ul><li>vi/vim 中提供有一个 被复制文本的缓冲区<ul><li>复制 命令会将选中的文字保存在缓冲区</li><li>删除 命令删除的文字会被保存在缓冲区</li><li>在需要的位置, 使用 粘贴 命令可以将缓冲对的文字插入到光标所在的位置</li></ul></li></ul><table><thead><tr><th>命令</th><th>英文</th><th>功能</th></tr></thead><tbody><tr><td>yy</td><td>copy</td><td>复制行</td></tr><tr><td>d(剪切命令)</td><td>delete</td><td>剪切</td></tr><tr><td>dd(剪切)</td><td>delete</td><td>剪切一行, 可以 ndd 剪切n行</td></tr><tr><td>p</td><td>paste</td><td>粘贴</td></tr></tbody></table><p>提示:</p><ul><li>命令 d 、x 类似于图形界面的 <strong>剪切操作</strong>  – ctrl + x</li><li>命令 y 类似于 图形界面的 <strong>复制操作</strong> – Ctrl + </li><li>命令 p 类似于图形界面的 <strong>粘贴操作</strong> – Ctrl + v</li><li>vi中的文本缓冲区只有一个,如果后续做过 复制、剪切操作, 之前缓冲区中的内容会被替换.</li></ul><p>注意</p><ul><li>vi中的 <strong>文本缓冲区</strong> 和 系统的 <strong>剪切板</strong> 不是同一个</li><li>所以在其他软件中使用 <code>Ctrl + C</code> 复制的内容, 不能再 <code>vi</code> 中通过 <code>p</code> 命令粘贴</li><li>可以在 <strong>编辑模式</strong> 下使用 <strong>鼠标右键粘贴</strong></li></ul><p><strong>9) 替换</strong></p><table><thead><tr><th>命令</th><th>英文</th><th>功能</th><th>工作模式</th></tr></thead><tbody><tr><td>r</td><td>replace</td><td>替换当前字符</td><td>命令模式</td></tr><tr><td>R</td><td>replace</td><td>替换当前行光标后的字符</td><td>替换模式</td></tr></tbody></table><ul><li><code>R</code> 命令可以进入 <strong>替换模式</strong>, 替换完成后, 按下<code>ESC</code> , 按下 <code>ESC</code> 可以回到 <strong>命令模式</strong></li><li><strong>替换命令</strong> 的作用就是不用进入 <strong>编辑模式</strong>, 对文件进行 <strong>轻量级的修改</strong></li></ul><p><strong>10) 缩排和重复执行</strong></p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>&gt;&gt;</td><td>向右增加缩进</td></tr><tr><td>&lt;&lt;</td><td>向左减少缩进</td></tr><tr><td>.</td><td>重复上次命令</td></tr></tbody></table><ul><li><strong>缩进命令</strong> 在开发程序时, <strong>统一增加代码的缩进</strong> 比较有用!<ul><li>一次性 <strong>在选中代码前增加 4 个空格,</strong>  就叫做 <strong>增加缩进</strong></li><li>一次性 <strong>在选中代码前删除 4 个空格</strong>,  就叫做 <strong>较少缩进</strong></li></ul></li><li>在 <strong>可视模式</strong> 下, 缩排命令 主需要使用 一个 <code>&gt;</code> 或者 <code>&lt;</code></li></ul><p>在程序中, <strong>缩进</strong> 通常用来表示代码的归属关系</p><ul><li><strong>前面空格越少, 代码的级别越高</strong></li><li><strong>前面空格越多, 代码的级别越低</strong></li></ul><p><strong>11) 查找</strong></p><p>常规查找</p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>/str</td><td>查找str</td></tr></tbody></table><ul><li><p>查找到指定内容之后, 使用 <code>Next</code> 查找下一个出现的位置</p><ul><li><code>n</code> : 查找下一个</li><li><code>N</code> : 查找上一个</li></ul></li><li><p>如果不想看到高亮显示, 可以随便查找一个文件中不存在的内容即可</p></li><li><p>单词快速匹配</p></li></ul><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>*</td><td>向后查找当前光标所在单词</td></tr><tr><td>#</td><td>向前查找当前光标所在单词</td></tr></tbody></table><ul><li>在开发中, 通过单词快速匹配, 可以快速看到这个单词在其他位置使用过</li></ul><p><strong>12) 查找并替换</strong></p><ul><li>在 <code>vi/vim</code> 中查找和替换命令需要在 <strong>末行模式</strong> 下执行</li><li>记忆命令格式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s///g</span><br></pre></td></tr></table></figure><ol><li> 全局替换</li></ol><ul><li><p>一次向 替换文件中的 所有出现的旧文本</p></li><li><p>命令格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/旧文本/新文本/g</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>可视区域替换</li></ol><ul><li><strong>先选中</strong> 要替换文字的 <strong>范围</strong></li><li>命令格式如下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:s/旧文本/新文本/g</span><br></pre></td></tr></table></figure><ol start="3"><li>确认替换：</li></ol><p>c confirm 确认</p><ul><li><p>如果把末尾的 <code>g</code> 改成 <code>gc</code>  在替换的时候, 会有提示! 推荐使用</p></li><li><p>命令格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/旧文本/新文本/gc</span><br></pre></td></tr></table></figure></li></ul><ol><li><code>y</code> - <code>yes</code> 替换</li><li><code>n</code> - <code>no</code> 不替换</li><li><code>a</code> - <code>all</code> 替换所有</li><li><code>q</code> -<code>quit</code> 退出替换</li><li><code>l</code> - <code>last</code> 最后一个, 并把光标移动到行首</li><li><code>^E</code> 向下滚屏</li><li><code>^Y</code> 向上滚屏</li></ol><h2 id="echo-命令"><a href="#echo-命令" class="headerlink" title="echo 命令"></a>echo 命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo命令有点类似于我们在java se阶段学习的 System.out.print(&quot;hello&quot;)</span><br><span class="line">但是，echo还有一个功能就是追加文件内容到文件，类似于我们在java se阶段学习的append文件流写入一样</span><br></pre></td></tr></table></figure><p><strong>使用者权限：所有用户</strong></p><ul><li><code>echo string</code> 将字符串输出到控制台 ,  通常和 <strong>重定向</strong> 联合使用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo hello world</span><br><span class="line"></span><br><span class="line"># 如果字符串有空格, 为了避免歧义 请增加 双引号 或者 单引号</span><br><span class="line">echo &quot;hello world&quot;</span><br></pre></td></tr></table></figure><p><strong>6.3 重定向 <code>&gt;</code>(覆盖) 和 <code>&gt;&gt;</code> (追加)</strong> </p><p><img src="assets/1558435686066-1576721493121.png" alt="1558435686066"></p><ul><li>默认情况下 <strong>命令的结果</strong> 输出到 <strong>控制台</strong></li><li>通过 <strong>重定向</strong> 可以将结果 <strong>输出到文件</strong></li></ul><p><strong>6.2.3 实现</strong></p><ul><li><strong>第一步: 将命令的成功结果 覆盖 指定文件内容</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo  传智博客 &gt;czbk-txt.txt</span><br></pre></td></tr></table></figure><p>执行结果如下（czbk-txt.txt文件如果没有会自动创建）</p><p><img src="assets/1576721910460.png" alt="1576721910460"></p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>结果 &gt; 文件名</td><td><code>&gt;</code> 表示输出, 会覆盖文件的原有内容</td></tr></tbody></table><ul><li><h5 id="第二步-将命令的成功结果-追加-指定文件的后面"><a href="#第二步-将命令的成功结果-追加-指定文件的后面" class="headerlink" title="第二步: 将命令的成功结果 追加  指定文件的后面"></a>第二步: 将<strong>命令的成功结果</strong> <strong>追加</strong>  指定文件的后面</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo  黑马程序员 &gt;&gt; czbk-txt.txt</span><br></pre></td></tr></table></figure><p>执行结果如下</p><p><img src="assets/1576721980097.png" alt="1576721980097"></p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>命令 &gt;&gt; 文件名</td><td><code>&gt;&gt;</code> 表示追加, 会将内容追加到已有文件的末尾</td></tr></tbody></table><ul><li><h5 id="第三步-将命令的失败结果-追加-指定文件的后面"><a href="#第三步-将命令的失败结果-追加-指定文件的后面" class="headerlink" title="第三步: 将命令的失败结果 追加 指定文件的后面"></a>第三步: 将<strong>命令的失败结果</strong> <strong>追加</strong> 指定文件的后面</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 不存在的目录  &amp;&gt;&gt;  error.log</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1576722167942.png" alt="1576722167942"></p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>命令  <code>&amp;&gt;&gt;</code> 文件</td><td><code>&amp;&gt;&gt;</code> 表示不区分错误类型 都放到 日志中</td></tr></tbody></table><blockquote><p>总结</p><ul><li>通过 <code>命令 &gt; 文件</code>  将<strong>命令的成功结果</strong> <strong>覆盖</strong> 指定文件内容</li><li>通过 <code>命令 &gt;&gt; 文件</code>   将<strong>命令的成功结果</strong> <strong>追加</strong>  指定文件的后面</li><li>通过 <code>命令 &amp;&gt;&gt; 文件</code> 将 <strong>命令的失败结果</strong> <strong>追加</strong> 指定文件的后面</li></ul></blockquote><h2 id="awk命令"><a href="#awk命令" class="headerlink" title="awk命令"></a>awk命令</h2><p>AWK是一种处理文本文件的语言，是一个强大的文本分析工具。</p><p>之所以叫AWK是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。</p><p><strong>具体语法如下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk [选项参数] &#x27;script&#x27; var=value file(s)</span><br><span class="line">或</span><br><span class="line">awk [选项参数] -f scriptfile var=value file(s)</span><br></pre></td></tr></table></figure><p><strong>1、数据准备：czbk-txt.txt文本内容如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zhangsan 68 99 26</span><br><span class="line">lisi 98 66 96</span><br><span class="line">wangwu 38 33 86</span><br><span class="line">zhaoliu 78 44 36</span><br><span class="line">maq 88 22 66</span><br><span class="line">zhouba 98 44 46</span><br></pre></td></tr></table></figure><p> <strong>2、搜索含有 zhang  和 li 的学生成绩：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat czbk-txt.txt | awk &#x27;/zhang|li/&#x27;</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1577178031588.png" alt="1577178031588"></p><p><strong>指定分割符, 根据下标显示内容</strong></p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>awk   -F  ‘,’    ‘{print $1, $2, $3}’  文件</td><td>操作1.txt文件,  根据 逗号 分割, 打印 第一段 第二段 第三段 内容</td></tr></tbody></table><p>选项</p><table><thead><tr><th>选项</th><th>英文</th><th>含义</th></tr></thead><tbody><tr><td><code>-F &#39;,&#39;</code></td><td>field-separator</td><td>使用 <strong>指定字符</strong> 分割</td></tr><tr><td><code>$ + 数字</code></td><td></td><td>获取<strong>第几段</strong>内容</td></tr><tr><td><code>$0</code></td><td></td><td>获取 <strong>当前行</strong> 内容</td></tr><tr><td><code>NF</code></td><td>field</td><td>表示当前行共有多少个字段</td></tr><tr><td><code>$NF</code></td><td></td><td>代表 最后一个字段</td></tr><tr><td><code>$(NF-1)</code></td><td></td><td>代表 倒数第二个字段</td></tr><tr><td><code>NR</code></td><td></td><td>代表 处理的是第几行</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看文档内容</span><br><span class="line">cat czbk-txt.txt </span><br><span class="line">#直接输出</span><br><span class="line">cat score.txt | awk -F &#x27; &#x27; &#x27;&#123;print $1,$2,$3&#125;&#x27;</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1577178523300.png" alt="1577178523300"></p><p><strong>指定分割符, 根据下标显示内容</strong></p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>awk   -F  ‘ ‘    ‘{OFS=”===”}{print $1, $2, $3}’  1.txt</td><td>操作1.txt文件,  根据 逗号 分割, 打印 第一段 第二段 第三段 内容</td></tr></tbody></table><p>选项</p><table><thead><tr><th>选项</th><th>英文</th><th>含义</th></tr></thead><tbody><tr><td><code>OFS=&quot;字符&quot;</code></td><td>output field separator</td><td>向外输出时的段分割字符串</td></tr></tbody></table><table><thead><tr><th>转义序列</th><th>含义</th></tr></thead><tbody><tr><td>\b</td><td>退格</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>制表符</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 按照 === 进行分割, 打印 第一段 第二段 第三段</span><br><span class="line">cat  czbk-txt.txt | awk -F &#x27; &#x27; &#x27;&#123;OFS=&quot;===&quot;&#125;&#123;print $1,$2,$3&#125;&#x27;</span><br><span class="line"># 按照 制表符tab 进行分割, 打印 第一段 第二段 第三段</span><br><span class="line">cat czbk-txt.txt| awk -F &#x27; &#x27; &#x27;&#123;OFS=&quot;\t&quot;&#125;&#123;print $1,$2,$3&#125;&#x27;</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1577178563336.png" alt="1577178563336"></p><p><img src="assets/1577179227699.png" alt="1577179227699"></p><p><strong>调用 awk 提供的函数</strong></p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>awk   -F  ‘,’    ‘{print  toupper($2)}’  1.txt</td><td>操作1.txt文件,  根据 逗号 分割, 打印 第一段 第二段 第三段 内容</td></tr></tbody></table><p>常用函数如下:</p><table><thead><tr><th>函数名</th><th>含义</th><th>作用</th></tr></thead><tbody><tr><td>toupper()</td><td>upper</td><td>字符 转成 大写</td></tr><tr><td>tolower()</td><td>lower</td><td>字符 转成小写</td></tr><tr><td>length()</td><td>length</td><td>返回 字符长度</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 打印第一段内容</span><br><span class="line"> cat czbk-txt.txt | awk -F &#x27; &#x27; &#x27;&#123;print $1&#125;&#x27;</span><br><span class="line"># 将第一段内容转成大写 且 显示 </span><br><span class="line"> cat czbk-txt.txt | awk -F &#x27; &#x27; &#x27;&#123;print toupper($1)&#125;&#x27;</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1577180402362.png" alt="1577180402362"></p><p><strong>求指定学科平均分</strong></p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>awk ‘BEGIN{初始化操作}{每行都执行} END{结束时操作}’   文件名</td><td>BEGIN{ 这里面放的是执行前的语句 }<br />{这里面放的是处理每一行时要执行的语句}<br />END {这里面放的是处理完所有的行后要执行的语句 }</td></tr></tbody></table><p><strong>查看czbk-txt.txt 文件内容</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat czbk-txt.txt </span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1577180698120.png" alt="1577180698120"></p><p><strong>查看总分</strong></p><p>注意：这里计算的是第4列的总分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat czbk-txt.txt| awk -F &#x27; &#x27; &#x27;BEGIN&#123;&#125;&#123;total=total+$4&#125; END&#123;print total&#125;&#x27;</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1577180583110.png" alt="1577180583110"></p><p><strong>查看总分, 总人数</strong></p><p>注意：这里计算的是第4列的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat czbk-txt.txt| awk -F &#x27; &#x27; &#x27;BEGIN&#123;&#125;&#123;total=total+$4&#125; END&#123;print total, NR&#125;&#x27;</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1577180635136.png" alt="1577180635136"></p><p><strong>查看总分, 总人数, 平均分</strong></p><p>注意：这里计算的是第4列的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat czbk-txt.txt | awk -F &#x27; &#x27; &#x27;BEGIN&#123;&#125;&#123;total=total+$4&#125; END&#123;print total, NR, (total/NR)&#125;&#x27;</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1577180660454.png" alt="1577180660454"></p><blockquote><p>总结</p><p>awk在使用过程中主要用作分析</p><p>简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理</p></blockquote><h2 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">软连接其实就类似于我们在Windows中的【快捷方式】</span><br></pre></td></tr></table></figure><ul><li>在Linux<strong>文件名</strong> 和 <strong>内容</strong> 是两个文件, 分开的!<img src="assets/1558439106175.png" alt="1558439106175"></li></ul><ul><li><p>创建软链接的原理, 如下<img src="assets/1558439158250.png" alt="1558439158250"></p><p>为什么有软连接？</p><p>因为 某些文件和目录 的 <strong>路径很深</strong>, 所以 需要增加 <strong>软链接(快捷方式)</strong></p></li></ul><p><strong>使用者权限：所有用户</strong></p><p><strong>语法如下:</strong></p><table><thead><tr><th>命令</th><th>英文</th><th>作用</th></tr></thead><tbody><tr><td>ln <strong>-s</strong>  目标文件绝对路径  快捷方式路径</td><td>link</td><td>给目标文件增加一个软链接, 通俗讲就是快捷方式</td></tr></tbody></table><p><strong>给home/itcast/txtfile.txt文件增加软连接</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln  -s /home/itcast/txtfile.txt    czbk-txt</span><br></pre></td></tr></table></figure><p>上面；我们将/home/itcast/路径下的txtfile.txt文件增加软连接到</p><p>czbk-txt，然后通过cat 访问czbk-txt也是可以正常访问的</p><p>如下图</p><p><img src="assets/1576723058556.png" alt="1576723058556"></p><blockquote><p>总结</p><p>通过 `ln -s 源文件的绝对路径 其实就是给<strong>目标文件</strong> 增加 <strong>快捷方式</strong></p></blockquote><h2 id="find查找"><a href="#find查找" class="headerlink" title="find查找"></a>find查找</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">引子</span><br><span class="line">find命令类似与在Windows中全局查找（如下图）</span><br></pre></td></tr></table></figure><p><img src="assets/1576828863833.png" alt="1576828863833"></p><p><strong>find概念</strong></p><p>find命令用来在指定目录下查找文件。</p><p>任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find &lt;指定目录&gt; &lt;指定条件&gt; &lt;指定内容&gt;</span><br></pre></td></tr></table></figure><p><strong>1、将目前目录及其子目录下所有延伸档名是 gz 的文件查询出来</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;*.gz&quot;</span><br></pre></td></tr></table></figure><p>执行效果如下图</p><p><img src="assets/1576829221486.png" alt="1576829221486"></p><p><strong>2、将目前目录及其子目录下所有最近 1天内更新过的文件查询出来</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -ctime -1</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1576829352063.png" alt="1576829352063"></p><p><strong>3、全局搜索czbk</strong></p><p>/代表是全盘搜索,也可以指定目录搜索 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name  &#x27;czbk&#x27;</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1576829929308.png" alt="1576829929308"></p><h2 id="read命令"><a href="#read命令" class="headerlink" title="read命令"></a>read命令</h2><blockquote><p>注意：</p><p>read命令属于文件范畴的命令</p><p>在下面的演示中，会涉及到shell，shell章节在最后一章</p><p>建议：讲解shell的时候在回过来说下read命令的语法</p><p>我们在综合案例中也会降到read</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">引子：</span><br><span class="line">read命令相当于在java SE阶段我们学习的键盘录入输入Scanner（read命令会比Scanner更强大），开发人员可以动态的与程序交互，</span><br></pre></td></tr></table></figure><p>read命令用于从标准输入读取数值。</p><p>read 内部命令被用来从标准输入读取单行数据。这个命令可以用来读取键盘输入，当使用重定向的时候，可以读取文件中的一行数据。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read [-ers] [-a aname] [-d delim] [-i text] [-n nchars] [-N nchars] [-p prompt] [-t timeout] [-u fd] [name ...]</span><br></pre></td></tr></table></figure><p><strong>1、简单读取</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;请您输入网站名: &quot;  </span><br><span class="line"><span class="meta">#</span><span class="bash">读取从键盘的输入</span>  </span><br><span class="line">read website  </span><br><span class="line">echo &quot;你输入的网站名是 $website&quot;  </span><br><span class="line">exit 0  #退出</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1577409765115.png" alt="1577409765115"></p><p><strong>3、读取文件</strong></p><p>每次调用 read 命令都会读取文件中的 “一行” 文本。当文件没有可读的行时，read 命令将以非零状态退出。</p><p>我们可以使用 cat 命令将结果直接传送给包含 read 命令的 while 命令。</p><p>测试文件 test.txt 内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">BBBBBBBBBBBBBBBBBBBBBB</span><br><span class="line">CCCCCCCCCCCCCCCCCCCCCC</span><br><span class="line">DDDDDDDDDDDDDDDDDDDDDD</span><br><span class="line">================传智播客</span><br></pre></td></tr></table></figure><p>脚本如下，可以将脚本放到xxx.sh中进行执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">count=1</span><br><span class="line">cat test.txt | while read line      </span><br><span class="line"><span class="meta">#</span><span class="bash"> cat 命令的输出作为<span class="built_in">read</span>命令的输入,<span class="built_in">read</span>读到&gt;的值放在line中</span></span><br><span class="line">do</span><br><span class="line">   echo &quot;Line $count:$line&quot;</span><br><span class="line">   count=$[ $count + 1 ]          # 注意中括号中的空格。</span><br><span class="line">done</span><br><span class="line">echo &quot;finish&quot;</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="assets/1577410272633.png" alt="1577410272633"></p><blockquote><p>总结</p><p>由此可看read命令不仅可以读取键盘输入，而且还可以读取静态文件</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>文件命令是我们在开发过程中最经常使用的到的命令，所以，我们在学习过程中一定要认真学习文件的常用命令，比如文件创建、编写、读取命令。</p><h2 id="备份压缩"><a href="#备份压缩" class="headerlink" title="备份压缩"></a>备份压缩</h2><h3 id="gzip命令"><a href="#gzip命令" class="headerlink" title="gzip命令"></a>gzip命令</h3><p><strong>语法</strong><br>    gizp [参数选项] [文件]            压缩文件<br><strong>常用命令</strong></p><ul><li>gzip a.txt    压缩文件</li><li>gzip *           压缩当前目录下所有文件</li><li>gzip -dv *    解压文件并列出详细信息</li></ul><h3 id="gunzip命令"><a href="#gunzip命令" class="headerlink" title="gunzip命令"></a>gunzip命令</h3><p><strong>语法</strong><br>    gunzip [参数] [文件]        解压文件<br><strong>常用命令</strong></p><ul><li>gunzip a.txt    解压文件</li><li>gunzip *           解压当前目录下所有文件</li><li>gunzip -dv *    解压文件并列出详细信息</li></ul><h3 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h3><p><strong>语法</strong><br>    tar [必要参数] [选择参数] [文件]        打包、压缩和解压（文件/文件夹）<br><em>注意：tar本身不具有压缩功能，它是调用压缩功能实现的</em></p><p><strong>参数选项：</strong></p><ul><li>-c 建立新的压缩文件</li><li>-v 显示指令执行过程</li><li>-f &lt;备份文件&gt; 指定压缩文件</li><li>-z 通过gzip指令处理压缩文件</li><li>-t 列出压缩文件中的内容</li><li>-x 表示解压</li></ul><p><strong>常用命令</strong></p><ul><li>tar -cvf 打包文件名 文件名        打包文件并指定打包之后的文件名（仅打包不压缩）</li><li>tar -zcvf 压缩文件名 文件名、文件夹名        压缩文件或者文件夹并指定压缩文件名（打包压缩）</li><li>tar -ztvf 压缩文件名        查看压缩文件中有哪些文件</li><li>tar -zxvf 压缩文件名        解压</li></ul><h3 id="bzip2命令"><a href="#bzip2命令" class="headerlink" title="bzip2命令"></a>bzip2命令</h3><p><strong>语法</strong><br>    bzip2 [参数选项] 文件            压缩<br><font color=#FF0000><em>注意：1.使用新的压缩算法，压缩后的 文件比原来的要小，但是花费时间变长。2. 若没有加上任何参数，bzip2压缩文件后会产生.bz的压缩文件，并删除原始的文件</em></font>   </p><p><strong>常用命令</strong></p><ul><li>bzip2 a.txt         压缩</li></ul><h3 id="bunzip2命令"><a href="#bunzip2命令" class="headerlink" title="bunzip2命令"></a>bunzip2命令</h3><p><strong>语法</strong><br>    bunzip2 [参数选项] 文件        解压<br><strong>参数选项：</strong></p><ul><li>-v 解压缩文件时，显示详细的信息</li></ul><p><strong>常用命令</strong></p><ul><li>bunzip2 a.txt.bz2         解压</li></ul><h2 id="网络与磁盘管理"><a href="#网络与磁盘管理" class="headerlink" title="网络与磁盘管理"></a>网络与磁盘管理</h2><h3 id="ifconfig命令"><a href="#ifconfig命令" class="headerlink" title="ifconfig命令"></a>ifconfig命令</h3><p><strong>语法</strong><br>    ifconfig [参数选项]            显示或配置网络设备的命令<br><strong>常用命令</strong></p><ul><li>ifconfig                  显示激活的网卡信息</li><li>ifongfig ens37 down        关闭网卡</li><li>ifongfig ens37 up           启动网卡</li><li>ifongfig ens37 192.168.23.199        配置ip地址</li><li>ifongfig ens37 192.168.23.199 netmask 255.255.255.0        配置ip地址和子网掩码</li></ul><h3 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h3><p><strong>语法</strong><br>    ifconfig [参数选项]            检测是否与主机联通<br><strong>参数选项：</strong></p><ul><li>-c &lt;完成次数&gt;    设置完成要求回应的次数</li></ul><p><strong>常用命令</strong></p><ul><li>ping <a href="http://www.baidu.com/">www.baidu.com</a>        检测是否与百度联通</li><li>ping -c 2 <a href="http://www.baidu.com/">www.baidu.com</a>        指定接收包的次数</li></ul><h3 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h3><ul><li>为network status缩写</li></ul><p><strong>语法</strong><br>    netstat [参数选项]            显示网络状态<br><strong>参数选项：</strong></p><ul><li>-a 显示所有连线中的Socker</li><li>-i 显示网卡列表</li></ul><p><strong>常用命令</strong></p><ul><li>netstat -a            显示详细的连接状况</li><li>netstat -i             显示网卡列表</li></ul><h3 id="lsblk命令"><a href="#lsblk命令" class="headerlink" title="lsblk命令"></a>lsblk命令</h3><ul><li>为list block缩写</li></ul><p><strong>语法</strong><br>    lsblk [参数选项]            列出硬盘的使用情况<br><strong>参数选项：</strong></p><ul><li>-f 显示系统信息</li></ul><p><strong>常用命令</strong></p><ul><li>lsblk            列出硬盘使用情况</li><li>lsblk -f              显示系统信息</li></ul><h3 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h3><ul><li>df : disk free(显示磁盘可用空间数目信息及空间节点信息。换句话说，就是查看在任何安装的设备或目录中还剩多少自由空间)</li></ul><p><strong>语法</strong><br>    df [参数选项]            显示目前在linux系统上，硬盘的使用情况<br><strong>参数选项：</strong></p><ul><li>-total    显示所有的信息</li><li>-h         换算成KB，MB，GB等形式进行展示（方便阅读）</li></ul><p><strong>常用命令</strong></p><ul><li>df            显示整个磁盘使用情况</li><li>df 文件夹          显示文件夹使用情况</li><li>df -total                   显示所有的信息</li><li>df -h              将结果变成KB,MB,GB形式展示，利于阅读</li></ul><h3 id="mount命令"><a href="#mount命令" class="headerlink" title="mount命令"></a>mount命令</h3><ul><li>关于挂载：用户<strong>不能</strong>直接访问 硬件设备需要将硬件设备 <strong>挂载</strong> 到 系统目录上,  才可以让用户访问。</li></ul><p><strong>注意：“挂载点”的目录需要以下几个要求：</strong></p><p>（1）目录事先存在，可以用mkdir命令新建目录；</p><p>（2）挂载点目录不可被其他进程使用到；</p><p>（3）挂载点下原有文件将被隐藏。</p><p><strong>使用者权限：所有用户，设置级别的需要管理员</strong><br><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mount [-hV]</span><br><span class="line">mount -a [-fFnrsvw] [-t vfstype]</span><br><span class="line">mount [-fnrsvw] [-o options [,...]] device | dir</span><br><span class="line">mount [-fnrsvw] [-t vfstype] [-o options] device dir</span><br></pre></td></tr></table></figure><p><strong>常用命令</strong></p><ul><li>mkdir 文件夹                        创建文件夹（也是创建一个挂载点）</li><li>mount -t auto /dev/cdrom 文件夹            开始挂载</li><li>umount 文件夹                               卸载</li></ul><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><h3 id="yum使用"><a href="#yum使用" class="headerlink" title="yum使用"></a>yum使用</h3><p><strong>yum概念</strong></p><ul><li>yum（ Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。</li><li>yum提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</li></ul><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum [options] [command] [package ...]</span><br></pre></td></tr></table></figure><ul><li><strong>options：</strong>可选，选项包括-h（帮助），-y（当安装过程提示选择全部为”yes”），-q（不显示安装的过程）等等。</li><li><strong>command：</strong>要进行的操作。</li><li><strong>package</strong>操作的对象。</li></ul><hr><p><strong>yum常用命令</strong></p><ul><li>1.列出所有可更新的软件清单命令：yum check-update</li><li>2.更新所有软件命令：yum update</li><li>3.仅安装指定的软件命令：yum install <package_name></li><li>4.仅更新指定的软件命令：yum update <package_name></li><li>5.列出所有可安裝的软件清单命令：yum list</li><li>6.删除软件包命令：yum remove <package_name></li><li>7.查找软件包 命令：yum search <keyword></li><li>8.清除缓存命令:<ul><li>yum clean packages: 清除缓存目录下的软件包</li><li>yum clean headers: 清除缓存目录下的 headers</li><li>yum clean oldheaders: 清除缓存目录下旧的 headers</li><li>yum clean, yum clean all (= yum clean packages; yum clean oldheaders) :清除缓存目录下的软件包及旧的headers</li></ul> <strong>注意：</strong> </li></ul><ol><li>必须联网</li><li>不同的服务通过yum命令连接远程yum源进行查找、下载、安装</li></ol><h4 id="安装Tree"><a href="#安装Tree" class="headerlink" title="安装Tree"></a>安装Tree</h4><p><strong>yum命令</strong></p><ul><li>yum -y install tree            安装tree</li><li>tree                        执行tree,展示当前目录结构</li><li>yum remove tree                移除tree</li><li>yum list tom*                    找出以tom为开头的软件名称</li><li><h4 id="yum源设置"><a href="#yum源设置" class="headerlink" title="yum源设置"></a>yum源设置</h4></li></ul><p><strong>设置命令</strong></p><ul><li>yum install -y wget            安装下载工具wget</li><li>wget -O CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun.com/repo/Centos-7.repo</a>        下载阿里云文件</li><li>yum clean all                     清理之前的缓存，并重新加载yum</li><li>yum makecache                建立一个缓存文件</li><li>yum search tomcat                查找软件，验证阿里云的yum源时是否可以正常使用</li></ul><h3 id="rpm使用"><a href="#rpm使用" class="headerlink" title="rpm使用"></a>rpm使用</h3><p><strong>1、rpm介绍</strong></p><p>rpm(redhat package manager) 原本是 Red Hat Linux 发行版专门用来管理 Linux 各项套件的程序，由于它遵循 GPL 规则且功能强大方便，因而广受欢迎。逐渐受到其他发行版的采用。RPM 套件管理方式的出现，让 Linux 易于安装，升级，间接提升了 Linux 的适用度。</p><p><strong>2、rpm与yum区别</strong></p><p>rpm 只能安装已经下载到本地机器上的rpm 包. yum能在线下载并安装rpm包,能更新系统,且还能自动处理包与包之间的依赖问题,这个是rpm 工具所不具备的。</p><p>语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用法: rpm [选项...]</span><br></pre></td></tr></table></figure><p><strong>rpm包</strong></p><blockquote><p>注意：</p><p>扩展名为.rpm的包</p><p>可以理解成是Windows中的.exe文件</p></blockquote><p><strong>安装rpm软件包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh 软件全包名</span><br></pre></td></tr></table></figure><p><strong>卸载rpm软件包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e 软件全包名      </span><br></pre></td></tr></table></figure><p><strong>列出所有安装过的包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa</span><br></pre></td></tr></table></figure><p><strong>查询软件包信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qi 软件全包名</span><br></pre></td></tr></table></figure><p><strong>查看文件安装位置</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ql 软件全包名</span><br></pre></td></tr></table></figure><h3 id="shell使用"><a href="#shell使用" class="headerlink" title="shell使用"></a>shell使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell脚本类似于我们在Windows中编写的批处理文件，它的扩展名是.bat，比如我们启动Tomcat（后面的课程我们会详细讲解）的时候经常启动的startup.bat，就是Windows下的批处理文件。</span><br><span class="line">而在Linux中，shell脚本编写的文件是以.sh结尾的。比如Tomcat下我们经常使用startup.sh来启动我们的Tomcat，这个startup.sh文件就是shell编写的。</span><br></pre></td></tr></table></figure><ul><li>shell就是在操作系统和应用程序之间的一个命令翻译工具</li></ul><p><strong>shell的使用方式</strong></p><ol><li>手工方式： 逐行输入命令，逐行进行确认执行</li><li>脚本方式： 把手工执行的命令，写到一个文件中，然后运行文件，这个文件就叫脚本文件。</li></ol><h4 id="shell入门"><a href="#shell入门" class="headerlink" title="shell入门"></a>shell入门</h4><p><strong>1.编写第一个shell</strong></p><ul><li>新建一个后缀名为sh</li><li>书写内容<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这是临时shell脚本</span></span><br><span class="line">echo &#x27;nihao</span><br><span class="line">echo &#x27;xxsleo&#x27;</span><br></pre></td></tr></table></figure></li><li>执行</li></ul><h4 id="shell注释"><a href="#shell注释" class="headerlink" title="shell注释"></a>shell注释</h4><ul><li>单行注释： # </li><li>多行注释：</li></ul><ol><li>:&lt;&lt;!    注释内容 ！</li><li>&lt;&lt;字符 注释内容    字符</li></ol><h4 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h4><p><strong>1. 定义变量</strong></p><ul><li>普通变量<br>  方式一：<pre><code>      变量名 = 变量值          &lt;font color=#FF0000&gt;变量值必须是一个整体，中间没有特殊字符&lt;/font&gt;</code></pre>  方式二：<pre><code>      变量名 = &#39;变量值&#39;      &lt;font color=#FF0000&gt;单引号中的内容，原样赋值&lt;/font&gt;</code></pre>  方式三：<pre><code>      变量名 = &quot;变量值&quot;      &lt;font color=#FF0000&gt;如果双引号里面有其他变量，会把变量的结果进行拼接，然后赋值&lt;/font&gt;</code></pre>  <strong>习惯：数字不加引号，其他默认加双引号</strong></li><li>命令变量<br>  方式一：<pre><code>      变量名=`命令`      &lt;font color=#FF0000&gt;``为反引号&lt;/font&gt;</code></pre>  方式二：<pre><code>      变量名=$(命令)</code></pre></li></ul><p><em>注意：等号右边和左边不能加空格</em></p><ol start="2"><li><p>使用变量<br> 方式一:</p><pre><code> $变量名     非标准写法，省事</code></pre><p> 方式二：</p><pre><code> &quot;$变量名&quot;     非标准写法，省事</code></pre><p> 方式三：</p><pre><code> $&#123;变量名&#125;     在双引号里面要用变量的值</code></pre><p> 方式四：</p><pre><code> &quot;$&#123;变量名&#125;&quot; 标准使用方式</code></pre></li><li><p>只读变量（类似与final)</p></li></ol><ul><li>变量名前面加    readonly 变量名</li></ul><ol start="4"><li>删除变量</li></ol><ul><li>变量名前面加    unset 变量名</li></ul><h4 id="shell数组"><a href="#shell数组" class="headerlink" title="shell数组"></a>shell数组</h4><ul><li>   定义数组        数组名={val1,val2,val3}         arr=(1 2 3)</li><li>   给数组的元素赋值   数组名[索引]=值                arr[0]=1</li><li>   获取元素        $ { 数组名[下标]}                $ {arr[0]}</li><li> 获取长度        $ { #数组名[*]}                 $ { #arr[*]}<pre><code>             \$ &#123; \#数组名[@]&#125;              \$ &#123; \#arr[@]&#125;</code></pre></li></ul><h4 id="shell运算符"><a href="#shell运算符" class="headerlink" title="shell运算符"></a>shell运算符</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Shell 和其他编程一样，**支持**包括：算术、关系、布尔、字符串等运算符。</span><br><span class="line"></span><br><span class="line">原生 bash **不支持 **简单的数学运算，但是可以通过其他命令来实现，例如expr。</span><br><span class="line"></span><br><span class="line">expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</span><br><span class="line"></span><br><span class="line">例如，两个数相加,我们还是利用上面的例子test-shell.sh </span><br></pre></td></tr></table></figure><p><strong>1、算数运算符</strong></p><p>val=<code>expr 2 + 2</code><br>echo “相加之后的结果为：” $val</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>说明</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td>+</td><td>加法</td><td><code>expr $a + $b</code> 结果为 30。</td></tr><tr><td>-</td><td>减法</td><td><code>expr $a - $b</code> 结果为 -10。</td></tr><tr><td>*</td><td>乘法</td><td><code>expr $a \* $b</code> 结果为  200。</td></tr><tr><td>/</td><td>除法</td><td><code>expr $b / $a</code> 结果为 2。</td></tr><tr><td>%</td><td>取余</td><td><code>expr $b % $a</code> 结果为 0。</td></tr><tr><td>=</td><td>赋值</td><td>a=$b 将把变量 b 的值赋给 a。</td></tr><tr><td>==</td><td>相等。用于比较两个数字，相同则返回 true。</td><td>[ $a == $b ] 返回 false。</td></tr><tr><td>!=</td><td>不相等。用于比较两个数字，不相同则返回 true。</td><td>[ $a != $b ] 返回 true。</td></tr></tbody></table><p><strong>注意：</strong>条件表达式要放在方括号之间，并且要有空格，例如: <strong>[$a==$b]</strong> 是错误的，必须写成 **[ $a == $b ]**。</p><p><strong>2.字符串运算符</strong><br>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">检测两个字符串是否相等，相等返回 true。</td><td align="left">[ $a = $b ] 返回 false。</td></tr><tr><td align="left">!=</td><td align="left">检测两个字符串是否相等，不相等返回 true。</td><td align="left">[ $a != $b ] 返回 true。</td></tr><tr><td align="left">-z</td><td align="left">检测字符串长度是否为0，为0返回 true。</td><td align="left">[ -z $a ] 返回 false。</td></tr><tr><td align="left">-n</td><td align="left">检测字符串长度是否为0，不为0返回 true。</td><td align="left">[ -n “$a” ] 返回 true。</td></tr><tr><td align="left">$</td><td align="left">检测字符串是否为空，不为空返回 true。</td><td align="left">[ $a ] 返回 true。</td></tr></tbody></table><p><strong>3、关系运算符</strong></p><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：<br>| 运算符 | 说明                                                  | 举例                       |<br>| :—– | :—————————————————- | :————————- |<br>| -eq equals    | 检测两个数是否相等，相等返回 true。                   | [ $a -eq $b ] 返回 false。 |<br>| -ne not equals  | 检测两个数是否不相等，不相等返回 true。               | [ $a -ne $b ] 返回 true。  |<br>| -gt greater than  | 检测左边的数是否大于右边的，如果是，则返回 true。     | [ $a -gt $b ] 返回 false。 |<br>| -lt less than   | 检测左边的数是否小于右边的，如果是，则返回 true。     | [ $a -lt $b ] 返回 true。  |<br>| -ge greater equals  | 检测左边的数是否大于等于右边的，如果是，则返回 true。 | [ $a -ge $b ] 返回 false。 |<br>| -le less equals | 检测左边的数是否小于等于右边的，如果是，则返回 true。 | [ $a -le $b ] 返回 true。  |<br><strong>4、布尔运算符</strong></p><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">!</td><td align="left">非运算，表达式为 true 则返回 false，否则返回 true。</td><td align="left">[ ! false ] 返回 true。</td></tr><tr><td align="left">-o</td><td align="left">或运算，有一个表达式为 true 则返回 true。</td><td align="left">[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td align="left">-a</td><td align="left">与运算，两个表达式都为 true 才返回 true。</td><td align="left">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr><tr><td align="left"><strong>5、逻辑运算符</strong></td><td align="left"></td><td align="left"></td></tr></tbody></table><p>假定变量 a 为 10，变量 b 为 20:</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">逻辑的 AND</td><td align="left">[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td></tr><tr><td align="left">||</td><td align="left">逻辑的 OR</td><td align="left">[[ $a -lt 100 || $b -gt 100 ]] 返回 true</td></tr></tbody></table><p><font color=#FF0000>使用这些运算符前后要加空格</font></p><h4 id="shell流程控制"><a href="#shell流程控制" class="headerlink" title="shell流程控制"></a>shell流程控制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在前面的Java SE课程中，我们学习了很多的流程控制语句，比如有if-else、if else-if else、switch、for、while等语句；</span><br><span class="line">在shell编程中，我们同样也有这些流程控制，只是语法和java SE有所区别，但是目的是一样的。</span><br></pre></td></tr></table></figure><p><strong>1、if 语句：</strong></p><p><strong>主要用于判断，相当于java se中的if，我们还是采用之前的例子test-shell.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN </span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><strong>2、if else 语句：</strong></p><p><strong>主要用于判断，相当于java se中的if else，我们还是采用之前的例子test-shell.sh。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">else</span><br><span class="line">    command</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><strong>3、if else-if else 语句：</strong></p><p><strong>主要用于判断，相当于java se中的if else-if else</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if condition1</span><br><span class="line">then</span><br><span class="line">    command1</span><br><span class="line">elif condition2 </span><br><span class="line">then </span><br><span class="line">    command2</span><br><span class="line">else</span><br><span class="line">    commandN</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><strong>4、case … esac语句</strong></p><p><strong>主要用于分支条件选择，相当于java se中的switch case循环</strong></p><p><strong>case … esac</strong> 与其他语言中的 switch … case 语句类似，是一种多分枝选择结构，每个 case 分支用右圆括号开始，用两个分号 <strong>;;</strong> 表示 break，即执行结束，跳出整个 case … esac 语句，esac（就是 case 反过来）作为结束标记。</p><p>还是采用之前的例子test-shell.sh</p><p>case … esac 语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">case 值 in</span><br><span class="line">模式1)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    command3</span><br><span class="line">    ;;</span><br><span class="line">模式2）</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    command3</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    command3</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>case 后为取值，值可以为变量或常数。</p><p>值后为关键字 in，接下来是匹配的各种模式，每一模式最后必须以右括号结束，模式支持正则表达式。</p><p>下面通过v的值进行case–esac</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">v=&quot;czbk&quot;</span><br><span class="line"></span><br><span class="line">case &quot;$v&quot; in</span><br><span class="line">   &quot;czbk&quot;) echo &quot;传智播客&quot;</span><br><span class="line">   ;;</span><br><span class="line">   &quot;baidu&quot;) echo &quot;baidu 搜索&quot;</span><br><span class="line">   ;;</span><br><span class="line">   &quot;google&quot;) echo &quot;google 搜索&quot;</span><br><span class="line">   ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p><font color=#FF0000>注意：)不能少</font></p><p><strong>5、for 循环</strong></p><p><strong>主要用于循环，相当于java se中的for循环，我们还是采用之前的例子test-shell.sh</strong></p><p>for循环格式为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for var in item1 item2 ... itemN</span><br><span class="line">do</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>顺序输出当前列表中的字母：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for loop in A B C D E F G </span><br><span class="line">do</span><br><span class="line">    echo &quot;顺序输出字母为: $loop&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>6、while循环</strong></p><p>主要用于循环，相当于java se中的while循环</p><p>while循环用于不断执行一系列命令，也用于从输入文件中读取数据 </p><p>语法格式为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>以下是一个基本的while循环，测试条件是：如果int小于等于10，那么条件返回真。int从0开始，每次循环处理时，int加1。 </p><p>还是采用之前的例子test-shell.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">int=1</span><br><span class="line">while(( $int&lt;=10 ))</span><br><span class="line">do</span><br><span class="line">    echo &quot;输出的值为：&quot;$int</span><br><span class="line">    ((int++))#let &quot;int++&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><font color=#FF0000>注意：((int++))两个括号都不能少</font></p><h4 id="shell函数"><a href="#shell函数" class="headerlink" title="shell函数"></a>shell函数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">无参无返回值的方法</span></span><br><span class="line">method() &#123;</span><br><span class="line">        echo &quot;函数执行了!&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">有参无返回值的方法</span></span><br><span class="line">method2()&#123;</span><br><span class="line">        echo &quot;接收到的第一个参数$1&quot;</span><br><span class="line">        echo &quot;接收到的第二个参数$2&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">有参有返回值的方法</span></span><br><span class="line">method3() &#123;</span><br><span class="line">        echo &quot;接收到的第一个参数$1&quot;</span><br><span class="line">        echo &quot;接收到的第二个参数$2&quot;</span><br><span class="line">        return $(($1 + $2))</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">方法的调用</span></span><br><span class="line">method</span><br><span class="line">method2 1 2</span><br><span class="line">method3 10 20</span><br><span class="line">echo $?</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>函数返回值在调用该函数后通过 $? 来获得。</p><p>注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</p></blockquote><ul><li>练习<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">方法的练习</span></span><br><span class="line"><span class="meta">#</span><span class="bash">在方法中键盘录入两个整数，返回这两个整数的和</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">read</span> 变量名 --- 表示把键盘录入的数据赋值给这个变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">method()&#123;</span><br><span class="line">        echo &quot;请输入第一个数&quot;</span><br><span class="line">        read number1</span><br><span class="line">        echo &quot;请输入第二个数&quot;</span><br><span class="line">        read number2</span><br><span class="line">        echo &quot;两个数字分别为&quot;$&#123;number1&#125;&quot;,&quot;$&#123;number2&#125;&quot; &quot;</span><br><span class="line">        return  $(($number1+$number2))</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">方法的调用</span></span><br><span class="line">method</span><br><span class="line">echo $?</span><br></pre></td></tr></table></figure><font color=#FF0000>注意：return ￥（）</font></li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>输入命令时，用户是什么，当前位置是什么</li><li>记准确命令的单词拼写，当出错时，记得找这个原因</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day11-19-删除链表的倒数第N个结点</title>
      <link href="/2022/01/27/Algorithm/Day10-24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
      <url>/2022/01/27/Algorithm/Day10-24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24.两两交换链表中的节点"></a>24.两两交换链表中的节点</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1:"></a>示例1:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3:"></a>示例3:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>链表中节点的数目在范围 [0, 100] 内</li><li>0 &lt;= Node.val &lt;= 100<h2 id="第一想法"><a href="#第一想法" class="headerlink" title="第一想法"></a>第一想法</h2></li><li>遍历链表，前后两对两对比大小<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span> &amp;&amp; head.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> d = head.next.val;</span><br><span class="line">            head.val = d;</span><br><span class="line">            head.next.val = head.val;</span><br><span class="line">            head = head.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>结果：仅有部分通过</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>虚头结点加，链表变换位置</li><li>思路与算法</li></ul><p>也可以通过迭代的方式实现两两交换链表中的节点。</p><p>创建哑结点 dummyHead，令 dummyHead.next = head。令 temp 表示当前到达的节点，初始时 temp = dummyHead。每次需要交换 temp 后面的两个节点。</p><p>如果 temp 的后面没有节点或者只有一个节点，则没有更多的节点需要交换，因此结束交换。否则，获得 temp 后面的两个节点 node1 和 node2，通过更新节点的指针关系实现两两交换节点。</p><p>具体而言，交换之前的节点关系是 temp -&gt; node1 -&gt; node2，交换之后的节点关系要变成 temp -&gt; node2 -&gt; node1，因此需要进行如下操作。</p><p>temp.next = node2<br>node1.next = node2.next<br>node2.next = node1<br>完成上述操作之后，节点关系即变成 temp -&gt; node2 -&gt; node1。再令 temp = node1，对链表中的其余节点进行两两交换，直到全部节点都被两两交换。</p><p>两两交换链表中的节点之后，新的链表的头节点是 dummyHead.next，返回新的链表的头节点即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line">        ListNode temp = dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span> &amp;&amp; temp.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode node1 = temp.next;</span><br><span class="line">            ListNode node2 = temp.next.next;</span><br><span class="line">            temp.next = node2;</span><br><span class="line">            node1.next = node2.next;</span><br><span class="line">            node2.next = node1;</span><br><span class="line">            temp = node1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：LeetCode-Solution</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/swap-nodes-in-pairs/solution/liang-liang-jiao-huan-lian-biao-zhong-de-jie-di-91/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong><br>时间复杂度：O(n)，其中 nn 是链表的节点数量。需要对每个节点进行更新指针的操作。</p><p>空间复杂度：O(1)。</p><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><ul><li>总是想不到更加巧妙一点的方法</li><li>不能很好的利用虚头节点</li><li>多练，多总结</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day010-24-两两交换链表中的节点</title>
      <link href="/2022/01/26/Algorithm/Day11-19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9/"/>
      <url>/2022/01/26/Algorithm/Day11-19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a>19. 删除链表的倒数第 N 个结点</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="https://gitee.com/xu-liuwang/pic-go-picutre-bed/raw/master/img//%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E5%85%83%E7%B4%A0.png" alt="删除链表倒数第N个元素"></p><h3 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h3><p>输入：head = [1,2,3,4,5], n = 2<br>输出：[1,2,3,5]</p><h3 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h3><p>输入：head = [1], n = 1<br>输出：[]</p><h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><p>输入：head = [1,2], n = 1<br>输出：[1]</p><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>链表中结点的数目为 sz<br>1 &lt;= sz &lt;= 30<br>0 &lt;= Node.val &lt;= 100<br>1 &lt;= n &lt;= sz</p><h1 id="第一想法"><a href="#第一想法" class="headerlink" title="第一想法"></a>第一想法</h1><ul><li>遍历链表，得到链表节点数count,count - n +1 为正序位置，删除该位置的元素</li><li>代码:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line">        ListNode pred = dummyHead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = i; i &lt; count - n + <span class="number">1</span>; i++)&#123; <span class="comment">// count - n为删除元素的前一个</span></span><br><span class="line">           ** pred = pred.next; **</span><br><span class="line">        &#125;</span><br><span class="line">            pred.next = pred.next.next;</span><br><span class="line">        <span class="keyword">return</span> pred.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>结果：空指针异常</li><li>参考官方：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>, head);</span><br><span class="line">        <span class="keyword">int</span> length = getLength(head);</span><br><span class="line">        ListNode cur = dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length - n + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = cur.next.next;</span><br><span class="line">        ListNode ans = dummy.next;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ++length;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>感觉是一样的，但是不能运行<h2 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h2></li><li>想到了快慢指针的做法，但是没想到怎么设计两个指针的走法</li><li>参考代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>, head);</span><br><span class="line">        ListNode first = head;</span><br><span class="line">        ListNode second = dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (first != <span class="keyword">null</span>) &#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">            second = second.next;</span><br><span class="line">        &#125;</span><br><span class="line">        second.next = second.next.next;</span><br><span class="line">        ListNode ans = dummy.next;<span class="comment">//dummy和second一样变了？</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：LeetCode-Solution</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/shan-chu-lian-biao-de-dao-shu-di-nge-jie-dian-b-61/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure></li><li>其他版本<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line"></span><br><span class="line">        ListNode slow = dummy;</span><br><span class="line">        ListNode fast = dummy;</span><br><span class="line">        <span class="keyword">while</span> (n-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记住 待删除节点slow 的上一节点</span></span><br><span class="line">        ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">            prev = slow;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 上一节点的next指针绕过 待删除节点slow 直接指向slow的下一节点</span></span><br><span class="line">        prev.next = slow.next;</span><br><span class="line">        <span class="comment">// 释放 待删除节点slow 的next指针, 这句删掉也能AC</span></span><br><span class="line">        slow.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>区别</strong> 第一个的fast比slow多走一步，遍历结束时，第一个停在被删除元素的上一个位置，而第二个的位置为被删除元素位置，需要有一个pred记录前一个位置。当slow改变时，dummy都会改变</p><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><ol><li>思路不清晰</li><li>以后可以找纸笔画一下</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day09-206-反转链表</title>
      <link href="/2022/01/25/Algorithm/Day09-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/01/25/Algorithm/Day09-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">输出：[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>链表中节点的数目范围是 [0, 5000]</li><li>-5000 &lt;= Node.val &lt;= 5000</li></ul><h2 id="第一想法"><a href="#第一想法" class="headerlink" title="第一想法"></a>第一想法</h2><ul><li>递归遍历链表，获得其中的值，利用尾插法创建一个新的链表，达到反转</li><li>代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置虚拟头结点。</span></span><br><span class="line">        ListNode dummyhead = <span class="keyword">new</span> ListNode();</span><br><span class="line">        dummyhead.next = head;</span><br><span class="line">        ListNode temp = dummyhead;</span><br><span class="line">        ListNode res = <span class="keyword">new</span> ListNode();</span><br><span class="line">        res.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode p = <span class="keyword">new</span>  ListNode();</span><br><span class="line">            p.val = temp.next.val;</span><br><span class="line">            p.next = res.next;  <span class="comment">//尾插法</span></span><br><span class="line">            res.next = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>结果：超出内存限制</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>迭代，双指针</li><li>代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode temp = cur.next;  <span class="comment">//用来储存下一个节点的位置</span></span><br><span class="line">            cur.next = prev;</span><br><span class="line">            prev = cur;                <span class="comment">// 类似于头插法</span></span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>运行成功，参考leet官方解答</li></ul><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><ul><li>只能想到暴力解法，对一些灵活思路还是不熟悉</li><li>多练！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day08-707-设计链表</title>
      <link href="/2022/01/24/Algorithm/Day08-707-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/01/24/Algorithm/Day08-707-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707.设计链表"></a>707.设计链表</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。</p><p>在链表类中实现这些功能：</p><ul><li>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。</li><li>addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。</li><li>addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。</li><li>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。</li><li>deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>MyLinkedList linkedList = new MyLinkedList();<br>linkedList.addAtHead(1);<br>linkedList.addAtTail(3);<br>linkedList.addAtIndex(1,2);   //链表变为1-&gt; 2-&gt; 3<br>linkedList.get(1);            //返回2<br>linkedList.deleteAtIndex(1);  //现在链表是1-&gt; 3<br>linkedList.get(1);            //返回3</p><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>所有val值都在 [1, 1000] 之内。</li><li>操作次数将在  [1, 1000] 之内。</li><li>请不要使用内置的 LinkedList 库。</li></ul><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><ul><li>注意虚头节点，也就是哨兵的使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode()&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val=val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="comment">//size存储链表元素的个数</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="comment">//虚拟头结点</span></span><br><span class="line">    ListNode head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取第index个节点的数值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果index非法，返回-1</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode currentNode = head;</span><br><span class="line">        <span class="comment">//包含一个虚拟头节点，所以查找第 index+1 个节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= index; i++) &#123;</span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> currentNode.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在链表最前面插入一个节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAtHead</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        addAtIndex(<span class="number">0</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在链表的最后插入一个节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAtTail</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        addAtIndex(size, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在第 index 个节点之前插入一个新节点，例如index为0，那么新插入的节点为链表的新头节点。</span></span><br><span class="line">    <span class="comment">// 如果 index 等于链表的长度，则说明是新插入的节点为链表的尾结点</span></span><br><span class="line">    <span class="comment">// 如果 index 大于链表的长度，则返回空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="comment">//找到要插入节点的前驱</span></span><br><span class="line">        ListNode pred = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode toAdd = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">        toAdd.next = pred.next;</span><br><span class="line">        pred.next = toAdd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除第index个节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        ListNode pred = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pred.next = pred.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next,prev;</span><br><span class="line">        ListNode(<span class="keyword">int</span> x) &#123;val = x;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    ListNode head,tail;<span class="comment">//Sentinel node</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        tail = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)&#123;<span class="keyword">return</span> -<span class="number">1</span>;&#125;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过判断 index &lt; (size - 1) / 2 来决定是从头结点还是尾节点遍历，提高效率</span></span><br><span class="line">        <span class="keyword">if</span>(index &lt; (size - <span class="number">1</span>) / <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= index; i++)&#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur = tail;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size - index - <span class="number">1</span>; i++)&#123;</span><br><span class="line">                cur = cur.prev;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAtHead</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        ListNode newNode = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">        newNode.next = cur.next;</span><br><span class="line">        cur.next.prev = newNode;</span><br><span class="line">        cur.next = newNode;</span><br><span class="line">        newNode.prev = cur;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Append a node of value val to the last element of the linked list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAtTail</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode cur = tail;</span><br><span class="line">        ListNode newNode = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">        newNode.next = tail;</span><br><span class="line">        newNode.prev = cur.prev;</span><br><span class="line">        cur.prev.next = newNode;</span><br><span class="line">        cur.prev = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; size)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span>)&#123;index = <span class="number">0</span>;&#125;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode newNode = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">        newNode.next = cur.next;</span><br><span class="line">        cur.next.prev = newNode;</span><br><span class="line">        newNode.prev = cur;</span><br><span class="line">        cur.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Delete the index-th node in the linked list, if the index is valid. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= size || index &lt; <span class="number">0</span>)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next.next.prev = cur;</span><br><span class="line">        cur.next = cur.next.next;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyLinkedList obj = new MyLinkedList();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(index);</span></span><br><span class="line"><span class="comment"> * obj.addAtHead(val);</span></span><br><span class="line"><span class="comment"> * obj.addAtTail(val);</span></span><br><span class="line"><span class="comment"> * obj.addAtIndex(index,val);</span></span><br><span class="line"><span class="comment"> * obj.deleteAtIndex(index);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问?"></a>疑问?</h2></li><li>deleteAtIndex(int index)中为什么要 index &gt;= size排除， 难道不能删最后一个吗？我把deleteAtindex改为以下代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode pred = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index != size) &#123;</span><br><span class="line">        pred.next = pred.next.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pred.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>结果：会部分运行错误。</li></ul><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><ul><li>复习了链表基本操作</li><li>还是有不理解的地方，抓紧时间理解。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day07-203-移除链表元素</title>
      <link href="/2022/01/23/Algorithm/Day07-203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/"/>
      <url>/2022/01/23/Algorithm/Day07-203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203.移除链表元素"></a>203.移除链表元素</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>  给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], val = <span class="number">6</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2:"></a>示例2:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [], val = <span class="number">1</span></span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><h3 id="示例3："><a href="#示例3：" class="headerlink" title="示例3："></a>示例3：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>], val = <span class="number">7</span></span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>列表中的节点数目在范围 [0, 104] 内</li><li>1 &lt;= Node.val &lt;= 50</li><li>0 &lt;= val &lt;= 50</li></ul><h2 id="Java中链表定义"><a href="#Java中链表定义" class="headerlink" title="Java中链表定义"></a>Java中链表定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="第一想法"><a href="#第一想法" class="headerlink" title="第一想法"></a>第一想法</h2><ul><li>遍历链表，查找是否有和val相同的元素，有的话，删除，重新连接。</li><li>代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode temp = head;</span><br><span class="line">        <span class="keyword">while</span>(temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.next.val == val) &#123;</span><br><span class="line">                temp.next = temp.next.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>结果：测试通过，但是执行出错，仔细一想，是没有考虑到头结点会和val一样。</li></ul><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><ul><li>参考LeetCode官方解答，添加了哑节点，用来避免头结点删除出错。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line">        ListNode temp = dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.next.val == val) &#123;</span><br><span class="line">                temp.next = temp.next.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2></li><li>当头结点需要删除时另做考虑<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//删除值相同的头结点后，可能新的头结点也值相等，用循环解决</span></span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="keyword">null</span>&amp;&amp;head.val==val)&#123;</span><br><span class="line">            head=head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        ListNode prev=head;</span><br><span class="line">        <span class="comment">//确保当前结点后还有结点</span></span><br><span class="line">        <span class="keyword">while</span>(prev.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prev.next.val==val)&#123;</span><br><span class="line">                prev.next=prev.next.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                prev=prev.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：lewis-dXStAbdZEw</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/remove-linked-list-elements/solution/203yi-chu-lian-biao-yuan-su-by-lewis-dxstabdzew/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br></pre></td></tr></table></figure><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问?"></a>疑问?</h2></li><li>为什么要return head; ?</li></ul><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><ol><li>复习了链表的知识，如遍历判断时，先考虑是否为null,要考虑头结点等。</li><li>对链表的了解还是不足。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day06-算法数组总结</title>
      <link href="/2022/01/22/Algorithm/Day06-%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/"/>
      <url>/2022/01/22/Algorithm/Day06-%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="数组总结"><a href="#数组总结" class="headerlink" title="数组总结"></a>数组总结</h1><h2 id="经典题目"><a href="#经典题目" class="headerlink" title="经典题目"></a>经典题目</h2><h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><p><em>(详情见)[<a href="https://xxsleo.github.io/2022/01/17/Algorithm/Day01-704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">https://xxsleo.github.io/2022/01/17/Algorithm/Day01-704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE</a> ]</em><br><strong>注意</strong></p><ul><li>暴力解法时间复杂度：O(n)</li><li>二分法时间复杂度： O(logn)</li><li>循环不变量原则</li></ul><p><strong>代码再写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> first = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> last = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(first &lt; last) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = first + (last - first)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">                first = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">                last = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果： 超出时间限制，检查几遍觉得没问题哇，仔细对比才发现 while里没加等号，应是(first &lt;= last),不加等号可能会造成有些情况死循环。</li></ul><p><strong>最终再写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> first = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> last = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(first &lt;= last) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = first + (last - first)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">                first = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">                last = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p><em>(详情见)[<a href="https://xxsleo.github.io/2022/01/18/Algorithm/Day02-27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0">https://xxsleo.github.io/2022/01/18/Algorithm/Day02-27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0</a> ]</em><br><strong>注意</strong></p><ul><li>双指针法（快慢指针法）：通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</li><li>暴力解法时间复杂度：O(n2)</li><li>双指针时间复杂度： O(n)</li></ul><p><strong>代码再写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fastIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> slowIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(fastIndex = <span class="number">0</span>; fastIndex &lt; nums.length; fastIndex++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fastIndex] != val) &#123;</span><br><span class="line">                nums[slowIndex] = nums[fastIndex];</span><br><span class="line">                slowIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slowIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：成功运行，还是要记得快慢指针为变量，相当于i的位置。 巧妙地是if,只有不和val一样，慢指针值才变。<h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3></li></ul><p><em>(详情见)[<a href="https://xxsleo.github.io/2022/01/20/Algorithm/Day04-209-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84">https://xxsleo.github.io/2022/01/20/Algorithm/Day04-209-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84</a> ]</em><br><strong>注意</strong></p><ul><li>双指针法（快慢指针法）：通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</li><li>暴力解法时间复杂度：O(n2)</li><li>双指针时间复杂度： O(n)</li></ul><p><strong>代码再写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fastIndex;</span><br><span class="line">        <span class="keyword">int</span> showIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> result = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(fastIndex = <span class="number">0</span>; fastIndex &lt; nums.length; fastIndex ++)&#123;</span><br><span class="line">            sum += nums[fastIndex];</span><br><span class="line">            <span class="keyword">if</span>(sum &gt;= target) &#123;</span><br><span class="line">                result = Math.min(result,fastIndex - showIndex + <span class="number">1</span>);</span><br><span class="line">                showIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result == Integer.MAX_VALUE ? <span class="number">0</span> : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：测试不成功，经检查发现，sum没有及时更新，sum更新应该减去当前showIndex所指的值。</li><li>改了之后还不行，仔细检查发现if用法不对，因为可能出现减去当前showIndex所指的值之后，sum还&gt;target,导致错过次数。</li></ul><p><strong>最终代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fastIndex;</span><br><span class="line">        <span class="keyword">int</span> showIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> result = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(fastIndex = <span class="number">0</span>; fastIndex &lt; nums.length; fastIndex ++)&#123;</span><br><span class="line">            sum += nums[fastIndex];</span><br><span class="line">            <span class="keyword">while</span>(sum &gt;= target) &#123;</span><br><span class="line">                result = Math.min(result,fastIndex - showIndex + <span class="number">1</span>);</span><br><span class="line">                sum -= nums[showIndex];</span><br><span class="line">                showIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result == Integer.MAX_VALUE ? <span class="number">0</span> : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模拟行为"><a href="#模拟行为" class="headerlink" title="模拟行为"></a>模拟行为</h3><p><em>(详情见)[<a href="https://xxsleo.github.io/2022/01/21/Algorithm/Day05-59-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II">https://xxsleo.github.io/2022/01/21/Algorithm/Day05-59-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II</a> ]</em><br><strong>注意</strong></p><ul><li>循环不变量原则</li><li>考察对代码的掌控能力</li></ul><p><strong>代码再写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] generateMatrix(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>, t = <span class="number">0</span>, b = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] mat = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">1</span>, tar = n * n;</span><br><span class="line">        <span class="keyword">while</span>(num &lt;= tar)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++) mat[t][i] = num++; <span class="comment">// left to right.</span></span><br><span class="line">            t++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = t; i &lt;= b; i++) mat[i][r] = num++; <span class="comment">// top to bottom.</span></span><br><span class="line">            r--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = r; i &gt;= l; i--) mat[b][i] = num++; <span class="comment">// right to left.</span></span><br><span class="line">            b--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = b; i &gt;= t; i--) mat[i][l] = num++; <span class="comment">// bottom to top.</span></span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>结果：成功运行。<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2>  数组这一块的经典题目算是练完了。总之，需要掌握一些排序算法，还有双指针法，来降低时间复杂度，还需要有良好的条件判断能力，处理各种情况。还需努力</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基本命令(1)</title>
      <link href="/2022/01/22/JavaWeb/Linux/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%20(1)-Linux%E7%B3%BB%E7%BB%9F%E4%B8%8E%E8%AE%BE%E7%BD%AE%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/01/22/JavaWeb/Linux/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%20(1)-Linux%E7%B3%BB%E7%BB%9F%E4%B8%8E%E8%AE%BE%E7%BD%AE%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="Linux系统与设置命令"><a href="#Linux系统与设置命令" class="headerlink" title="Linux系统与设置命令"></a>Linux系统与设置命令</h2><h3 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h3><ol><li>创建用户：useradd (选项) 用户名</li><li>用户口令:   passwd –</li><li>修改用户：usermod –</li><li>删除用户：userdel –</li><li>退出当前用户：ctrl + d</li></ol><ul><li>输入useradd回车，即可显示选项</li></ul><h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><ol><li>创建用户组：groupadd (选项) 用户组名</li><li>修改用户组：groupmod –</li><li>查询用户所属组：groups 用户名</li><li>删除用户组：groupdel 用户组名</li></ol><h3 id="管理用户组内成员"><a href="#管理用户组内成员" class="headerlink" title="管理用户组内成员"></a>管理用户组内成员</h3><p>语法：    gpasswd (选项) 组名</p><ul><li>gpasswd是Linux下的管理工具，用于将一个用户添加到组或者从组中删除。</li><li>-a 添加</li><li>-d 删除</li><li>-A 指定管理员</li><li>-M 指定组成员和-A用途相差不大</li><li>-r 删除密码</li><li>-R 限制用户登入组，只有组中的成员才可以用newgrp加入该组</li></ul><h3 id="日期管理"><a href="#日期管理" class="headerlink" title="日期管理"></a>日期管理</h3><p>语法： date [参数选项]<br><strong>参数选项：</strong></p><ul><li>-d&lt;字符串&gt; : 显示字符串所指的日期与时间。字符串前后必须加上双引号；</li><li>-s&lt;字符串&gt; : 根据字符串来设置日期与时间。字符串前后必须加上双引号；</li><li>-u：显示GMT;</li><li>–help : 在线帮助</li><li>– version ：显示版本信息</li></ul><h3 id="显示用户"><a href="#显示用户" class="headerlink" title="显示用户"></a>显示用户</h3><p>语法：logname [–help][–version]    显示登录账号的信息<br><strong>参数信息：</strong></p><ul><li>–help 在线帮助</li><li>–version 显示版本信息</li></ul><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><p>语法 ：su [参数选项] [USER]<br><strong>参数选项：</strong></p><ul><li>USER要变更的用户账号</li><li>-c 使用目标用户执行一条命令，而不进入 如： su -c ls root</li></ul><h3 id="id命令"><a href="#id命令" class="headerlink" title="id命令"></a>id命令</h3><p>语法： id [-g][–help][-version] [用户名称]    查看当前用户详细信息（用户id,群组，所属组）</p><h3 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h3><p>语法：sudo [参数选项]    提高普通用户的操作权限</p><h3 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h3><p>语法：top [-] [d delay] [q] [c] [S] [s] [i] [n] [b]    实时显示process的动态<br><strong>各进程（任务）的状态监控属性解释说明：</strong><br>PID — 进程id<br>USER — 进程所有者<br>PR — 进程优先级<br>NI — nice值。负值表示高优先级，正值表示低优先级<br>VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES<br>RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA<br>SHR — 共享内存大小，单位kb<br>S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程<br>%CPU — 上次更新到现在的CPU时间占用百分比<br>%MEM — 进程使用的物理内存百分比<br>TIME+ — 进程使用的CPU时间总计，单位1/100秒<br>COMMAND — 进程名称（命令名/命令行）</p><p><strong>最常见使用</strong></p><ul><li><p>top        实时显示所有的进程信息</p></li><li><p>top -c         实时显示所有的进程信息（显示完整命令）</p></li><li><p>top -p PID    实时显示指定的进程信息</p></li><li><p>结束监控快捷键： q</p></li></ul><h3 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h3><p>语法：ps [options] [–help]    查看进程信息     –无法实时监控，查看的为当前信息</p><p><strong>最常见使用</strong></p><ul><li>ps          显示当前正在运行的进程信息</li><li>ps -A         显示系统中所有的进程信息</li><li>ps -ef    显示系统中所有的进程信息(完整信息)</li><li>ps -u user 显示指定用户的进程信息</li></ul><h3 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h3><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill [-s &lt;信息名称或编号&gt;][程序]　或　kill [-l &lt;信息编号&gt;]</span><br></pre></td></tr></table></figure><p> <strong>参数说明</strong>：</p><ul><li>-l &lt;信息编号&gt; 　若不加&lt;信息编号&gt;选项，则-l参数会列出全部的信息名称。</li><li>-s &lt;信息名称或编号&gt; 　指定要送出的信息。</li><li>[程序] 　[程序]可以是程序的PID或是PGID，也可以是工作编号。</li></ul><p>杀死一个进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill 15642</span><br></pre></td></tr></table></figure><p>强制杀死进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -KILL 15642</span><br></pre></td></tr></table></figure><p>彻底杀死进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 15642</span><br></pre></td></tr></table></figure><p>杀死指定用户所有进程</p><p>1.方法一 过滤出itcast用户进程 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 $(ps -ef | grep xxsleo) </span><br></pre></td></tr></table></figure><p>2.方法二，直接杀死</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -u xxsleo</span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p>上面列举了很多kill进程的命令</p><p>但是我们我们常用的就是kill -9命令，我们常常找到进程的pid</p><p>然后通过kill -9进行杀死进程</p></blockquote><h3 id="关机命令"><a href="#关机命令" class="headerlink" title="关机命令"></a>关机命令</h3><p>shutdown命令可以用来进行关闭系统，并且在关机以前传送讯息给所有使用者正在执行的程序，shutdown 也可以用来重开机</p><p>使用者权限：管理员用户</p><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown [-t seconds] [-rkhncfF] time [message]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul><li>-t seconds : 设定在几秒钟之后进行关机程序。</li><li>-k : 并不会真的关机，只是将警告讯息传送给所有使用者。</li><li>-r : 关机后重新开机。</li><li>-h : 关机后停机。</li><li>-n : 不采用正常程序来关机，用强迫的方式杀掉所有执行中的程序后自行关机。</li><li>-c : 取消目前已经进行中的关机动作。</li><li>-f : 关机时，不做 fcsk 动作(检查 Linux 档系统)。</li><li>-F : 关机时，强迫进行 fsck 动作。</li><li>time : 设定关机的时间。</li><li>message : 传送给所有使用者的警告讯息。</li></ul><p>立即关机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h now</span><br><span class="line">或者</span><br><span class="line">shudown</span><br></pre></td></tr></table></figure><p>指定1分钟后关机，1分钟关机并显示警告信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown +1 “System will shutdown after 1 minutes” </span><br></pre></td></tr></table></figure><p>指定1分钟后重启，并发出警告信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown –r +1 “1分钟后关机重启”</span><br></pre></td></tr></table></figure><h3 id="重启命令"><a href="#重启命令" class="headerlink" title="重启命令"></a>重启命令</h3><p>reboot命令用于用来重新启动计算机</p><p>使用者权限：管理员、普通（需要验证）用户</p><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot [-n] [-w] [-d] [-f] [-i]</span><br></pre></td></tr></table></figure><p><strong>参数</strong>：</p><ul><li>-n : 在重开机前不做将记忆体资料写回硬盘的动作</li><li>-w : 并不会真的重开机，只是把记录写到 /var/log/wtmp 档案里</li><li>-d : 不把记录写到 /var/log/wtmp 档案里（-n 这个参数包含了 -d）</li><li>-f : 强迫重开机，不呼叫 shutdown 这个指令</li><li>-i : 在重开机之前先把所有网络相关的装置先停止</li></ul><p>开始重新启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>此时我们的虚拟机正在重启<strong>（别忘记使用root用户执行）</strong></p><h3 id="who命令"><a href="#who命令" class="headerlink" title="who命令"></a>who命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在企业级开发过程中，我们使用who命令的时候常常需要快速重启服务器，在重启之前需要检测下有没有终端在连接（处理程序），如果有，可能就不会重启（会私下询问何时弄完，弄完后在重启），如果没有其他人连接，将执行快速重启</span><br></pre></td></tr></table></figure><p>who命令用于显示系统中有哪些使用者正在上面，显示的资料包含了使用者 ID、使用的终端机、从哪边连上来的、上线时间、呆滞时间、CPU 使用量、动作等等</p><p>使用者权限：所有使用者都可使用。</p><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">who - [husfV] [user]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul><li>-H 或 –heading：显示各栏位的标题信息列；</li><li>-i 或 -u 或 –idle：显示闲置时间，若该用户在前一分钟之内有进行任何动作，将标示成”.”号，如果该用户已超过24小时没有任何动作，则标示出”old”字符串；</li><li>-m：此参数的效果和指定”am i”字符串相同；</li><li>-q 或–count：只显示登入系统的帐号名称和总人数；</li><li>-s：此参数将忽略不予处理，仅负责解决who指令其他版本的兼容性问题；</li><li>-w 或-T或–mesg或–message或–writable：显示用户的信息状态栏；</li><li>–help：在线帮助；</li><li>–version：显示版本信息</li></ul><p>显示当前登录系统的用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">who</span><br></pre></td></tr></table></figure><p>显示明细(标题)信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">who -H</span><br></pre></td></tr></table></figure><h3 id="timedatectl命令"><a href="#timedatectl命令" class="headerlink" title="timedatectl命令"></a>timedatectl命令</h3><p><strong>几个小概念：</strong><br>| 项目 | 说明|<br>| ———- | ———-|<br>|时区 | date命令可查看 |<br>| 系统时钟： System Clock | linux OS的时间，date命令可查看 |<br>| 硬件时钟：RTC : Real Time Clock | 主办上电池供电的BIOS时间，hwclock -r 可查看 |<br>| NTP: Network Time Protoctol | 本机时间和实际时间经常会有差别，一般使用NTP服务器进行时间校准 |<br><strong>常用命令：</strong></p><ul><li>timedatectl / timedatectl status        显示系统的当前时间和日期</li><li>timedatectl list-timezones             查看所有可用的时区</li><li>timedatectl set-timezone “Asia/Shanghai”    设置本地时区</li><li>timedatectl set ntp false                     禁用时间同步</li><li>timedatectl set-time “2022-01-20 13:59:00”  设置时间</li><li><strong>timedatectl set-ntp true                   启动时间同步</strong></li></ul><h3 id="clear命令"><a href="#clear命令" class="headerlink" title="clear命令"></a>clear命令</h3><ul><li>clear        清屏</li><li>注意：并不是把之前输入命令删掉，滚动条可以返回</li></ul><h2 id="Linux的目录管理"><a href="#Linux的目录管理" class="headerlink" title="Linux的目录管理"></a>Linux的目录管理</h2><h3 id="目录常用命令"><a href="#目录常用命令" class="headerlink" title="目录常用命令"></a>目录常用命令</h3><ul><li>ls:         列出目录</li><li>cd：     切换目录</li><li>pwd：  显示目前的目录</li><li>mkdir：创建一个新的目录</li><li>rmdir：删除一个空的目录</li><li>cp:         复制文件或目录</li><li>rm:        移除文件或目录</li><li>mv:        移动文件与目录或修改文件与目录的名称</li></ul><p><strong>自动补全</strong></p><ul><li>在敲出 文件/ 目录 / 命令 的前几个字母之后, 按下 <code>tab</code>键</li><li>如果还存在其他 文件 / 目录 / 命令, 再按一下tab键, 系统会提示可能存在的命令</li></ul><h3 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h3><p><strong>常用命令：</strong></p><ul><li>ls                  显示不隐藏的文件与文件夹</li><li>ls -l                  显示不隐藏的文件与文件夹的详细信息</li><li>ls -al         显示所有的文件与文件夹的详细信息</li></ul><p><em>注意：</em></p><ul><li>隐藏文件和文件开头为 . </li><li>详细信息从左到右以此为：</li></ul><ul><li><strong>权限（A区域）</strong>, 第一个字符如果是 <code>d</code> 表示目录</li><li><strong>硬链接数（B区域）</strong>, 通俗的讲就是有多少种方式, 可以访问当前目录和文件</li><li><strong>属主（C区域）</strong>, 文件是所有者、或是叫做属主</li><li><strong>属组（D区域）</strong>, 文件属于哪个组</li><li><strong>大小（E区域）：文件大小</strong></li><li><strong>时间（F区域）：最后一次访问时间</strong></li><li><strong>名称（G区域）:文件的名称</strong></li></ul><h3 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h3><ul><li>pwd显示当前目录<br>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在当前目录的命令。</li></ul><p>使用者权限：所有使用者都可使用。</p><p><strong>查看当前所在目录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd -P</span><br></pre></td></tr></table></figure><h3 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h3><ul><li>cd 切换目录</li><li>语法： cd 路径        切换目录</li></ul><h3 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h3><ul><li>为make directory 的缩写</li><li>语法：mkdir [-p] 文件夹的名字    创建目录</li></ul><p>** 常用命令 **</p><ul><li>mkdir 文件夹名        创建目录</li><li>mkdir -p aaa/bbb              创建多级目录</li></ul><h3 id="rmdir命令"><a href="#rmdir命令" class="headerlink" title="rmdir命令"></a>rmdir命令</h3><ul><li>为remo directory 的缩写</li><li>语法：rmdir [-p] 文件夹名  删除空的目录</li></ul><p><strong>常用命令</strong></p><ul><li>rmdir 文件名        删除目录</li><li>rmdir -p bbb/ccc    删除ccc,如果删完之后bbb是空的，bbb也一起删除</li></ul><h3 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h3><ul><li>为remo的缩写</li><li>语法：rm [选项] 文件/目录    删除文件或者目录</li></ul><p><strong>选项参数：</strong></p><ul><li>-i 删除前逐一询问确认</li><li>-f 即使原档案属性设为只读，也直接删除，无需逐一确认</li><li>-r 将目录及一下的档案逐一删除</li></ul><p><strong>常用命令</strong></p><ul><li>rm 文件路径        删除文件</li><li>rm -r 目录路径            删除目录和目录里面所有的内容</li></ul><p><em>注意：</em>一般使用rm比rmdir简单</p><h3 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h3><ul><li>为copy的缩写</li><li>语法：cp [选项] 数据源 目的地   文件复制</li></ul><p><strong>选项参数：</strong></p><ul><li>-a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。</li><li>-d：复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式。</li><li>-f：覆盖已经存在的目标文件而不给出提示。</li><li>-i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答”y”时目标文件将被覆盖。</li><li>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。</li><li>-r/R：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</li><li>-l：不复制文件，只是生成链接文件。</li></ul><p><strong>常用命令</strong></p><ul><li>cp aaa/a.txt ccc        将aaa文件夹中的a.txt文件拷贝到ccc文件夹中</li><li>cp -r aaa/* ccc        将aaa文件夹中所有内容拷贝到ccc文件夹中</li></ul><h3 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h3><ul><li>为move的缩写</li><li>语法：mv [选项] 数据源 目的地        改名/ 移动文件夹（看是否在同一目录下)</li></ul><p><strong>选项参数：</strong></p><ul><li>-i: 若指定目录已有同名文件，则先询问是否覆盖旧文件;</li><li>-f: 在 mv 操作要覆盖某已有的目标文件时不给任何指示;</li></ul><p><strong>常用命令</strong></p><ul><li>mv 数据源 目的地        改名、移动</li></ul><p>** 注意 **</p><table><thead><tr><th align="left">命令格式</th><th align="left">运行结果</th></tr></thead><tbody><tr><td align="left">mv 文件名 文件名</td><td align="left">将源文件名改为目标文件名</td></tr><tr><td align="left">mv 文件名 目录名</td><td align="left">将文件移动到目标目录</td></tr><tr><td align="left">mv 目录名 目录名</td><td align="left">目标目录已存在，将源目录移动到目标目录；目标目录不存在则改名</td></tr><tr><td align="left">mv 目录名 文件名</td><td align="left">出错</td></tr></tbody></table><h2 id="Linux-文件基本属性"><a href="#Linux-文件基本属性" class="headerlink" title="Linux 文件基本属性"></a>Linux 文件基本属性</h2><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等。</p><ul><li>当为[ <strong>d</strong> ]则是目录</li><li>当为[ <strong>-</strong> ]则是文件；</li><li>若是[ <strong>l</strong> ]则表示为链接文档(link file)；</li><li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li><li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li></ul><p>每个文件的属性由左边第一部分的10个字符来确定。<br>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p><ul><li>从左至右用0-9这些数字来表示。</li><li>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。</li><li>第4-6位确定属组（所有者的同组用户）拥有该文件的权限</li><li>第7-9位确定其他用户拥有该文件的权限。</li></ul><h3 id="chgrp命令"><a href="#chgrp命令" class="headerlink" title="chgrp命令"></a>chgrp命令</h3><ul><li>为 change group 的缩写    （更改属组）</li></ul><p><strong>语法如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp [-cfhRv][--help][--version][所属群组][文件或目录...] 或 chgrp [-cfhRv][--help][--reference=&lt;参考文件或目录&gt;][--version][文件或目录...]</span><br></pre></td></tr></table></figure><p><strong>常用命令</strong></p><ul><li>chgrp -v root aaa        将aaa的属组改为root</li><li>chgrp -R dev-group  /tmp/work</li></ul><h3 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h3><ul><li>为 change owner 的缩写</li></ul><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown 属主名 文件名     更改属主</span><br><span class="line">chown [参数选项] 属主名:属主名 文件名更改属主和属组</span><br></pre></td></tr></table></figure><p><strong>选项参数:</strong></p><ul><li>-R    处理指定目录以及其子目录下的所有文件</li></ul><p><strong>常用命令:</strong></p><ul><li>chown root aaa        将aaa的属主改为root</li><li>chown root:root         将bbb的属主和属组改为root</li><li>chown -R root:root aaa     将aaa文件夹和里面所有的属主和属组改为root</li></ul><p><em>注意：linux命令区分大小写</em></p><h3 id="chmod权限命令"><a href="#chmod权限命令" class="headerlink" title="chmod权限命令"></a>chmod权限命令</h3><ul><li>为change mode 的缩写</li><li>作用：修改属主、属组、其他用户的权限</li><li>修改方式：<ol><li>数字方式</li><li>符号方式<h4 id="数字方式"><a href="#数字方式" class="headerlink" title="数字方式"></a>数字方式</h4></li></ol></li></ul><p><strong>权限属性</strong><br>| 权限 | 英文 | 缩写 | 数字序号 |<br>|— | — | — | — |<br>| 读 | read | r | 4 |<br>| 写 | write | w | 2 |<br>| 执行 | execute | x | 1 |<br>| 无权限 |  | - | 0 |</p><p><em>列：</em></p><ul><li>rwx = 4 + 2 +1 = 7    </li><li>设置数字5表示可读可执行</li></ul><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [参数选项] 数字权限 文件或目录</span><br></pre></td></tr></table></figure><p><strong>参数选项</strong></p><ul><li>-R :  对目前目录下所有档案与子目录进行相同的权限变更(即以递回的方式逐个变更)</li><li>-v ：显示权限变更的详细资料</li></ul><p><strong>数字权限</strong></p><ul><li>数字类型的权限属性，为rwx对应数值相加的和。</li></ul><p><strong>举例</strong></p><ul><li>chmod -R 770 aaa</li></ul><h4 id="符号方式"><a href="#符号方式" class="headerlink" title="符号方式"></a>符号方式</h4><p><strong>符号权限</strong></p><ul><li>user     属主权限     -&gt; u</li><li>group  属组权限   -&gt; g</li><li>others 其他权限   -&gt; o</li><li>全部身份            -&gt; a</li></ul><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [参数选项] 符号权限 文件或目录</span><br></pre></td></tr></table></figure><p>符号权限格式：<br>    u/g/o/a        +/-/=(加入、除去、设定)        r/w/x<br><strong>参数选项</strong></p><ul><li>-R :  对目前目录下所有档案与子目录进行相同的权限变更(即以递回的方式逐个变更)</li><li>-v ：显示权限变更的详细资料</li></ul><p><strong>符号权限</strong></p><ul><li>r、w、x、-</li></ul><p><strong>举例</strong></p><ul><li>chmod -R u=rwx,g=rx,o=r a.txt</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day05-59-螺旋矩阵II</title>
      <link href="/2022/01/21/Algorithm/Day05-59-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II/"/>
      <url>/2022/01/21/Algorithm/Day05-59-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II/</url>
      
        <content type="html"><![CDATA[<h1 id="59-螺旋矩阵-II"><a href="#59-螺旋矩阵-II" class="headerlink" title="59.螺旋矩阵 II"></a>59.螺旋矩阵 II</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="./img/day05-59.png" alt="day05-59"></p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>],[<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>]]</span><br></pre></td></tr></table></figure><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>1 &lt;= n &lt;= 20</li></ul><h2 id="第一想法"><a href="#第一想法" class="headerlink" title="第一想法"></a>第一想法</h2><ul><li>循环每一次变化，由于太复杂，没有理清楚头绪，也没写出来</li></ul><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><ul><li>因为自己没有写出来，所以看了很多答案，把觉得最清楚的写在这</li></ul><p><strong>思路</strong></p><ul><li>生成一个 n×n 空矩阵 mat，随后模拟整个向内环绕的填入过程：<br>  定义当前左右上下边界 l,r,t,b，初始值 num = 1，迭代终止值 tar = n * n；<br>  当 num &lt;= tar 时，始终按照 从左到右 从上到下 从右到左 从下到上 填入顺序循环，每次填入后：<pre><code>      执行 num += 1：得到下一个需要填入的数字；      更新边界：例如从左到右填完后，上边界 t += 1，相当于上边界向内缩 1。</code></pre>  使用num &lt;= tar而不是l &lt; r || t &lt; b作为迭代条件，是为了解决当n为奇数时，矩阵中心数字无法在迭代过程中被填充的问题。</li><li>最终返回mat</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] generateMatrix(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>, t = <span class="number">0</span>, b = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] mat = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">1</span>, tar = n * n;</span><br><span class="line">        <span class="keyword">while</span>(num &lt;= tar)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++) mat[t][i] = num++; <span class="comment">// left to right.</span></span><br><span class="line">            t++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = t; i &lt;= b; i++) mat[i][r] = num++; <span class="comment">// top to bottom.</span></span><br><span class="line">            r--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = r; i &gt;= l; i--) mat[b][i] = num++; <span class="comment">// right to left.</span></span><br><span class="line">            b--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = b; i &gt;= t; i--) mat[i][l] = num++; <span class="comment">// bottom to top.</span></span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：jyd</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/spiral-matrix-ii/solution/spiral-matrix-ii-mo-ni-fa-she-ding-bian-jie-qing-x/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br></pre></td></tr></table></figure><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><ul><li>觉得题复杂，麻烦就不想自己动手写了，着急看答案</li><li>还是要多点耐心，慢慢理清头绪</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day04-209-长度最小的子数组</title>
      <link href="/2022/01/20/Algorithm/Day04-209-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/"/>
      <url>/2022/01/20/Algorithm/Day04-209-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209.长度最小的子数组"></a>209.长度最小的子数组</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：target = <span class="number">7</span>, nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：子数组 [<span class="number">4</span>,<span class="number">3</span>] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure><h3 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = <span class="number">4</span>, nums = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="示例3："><a href="#示例3：" class="headerlink" title="示例3："></a>示例3：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 11, nums = [1,1,1,1,1,1,1,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><h2 id="第一想法"><a href="#第一想法" class="headerlink" title="第一想法"></a>第一想法</h2><ul><li>定义一个变量，通过循环数组，每次叠加数组的各值和target进行对比</li><li>代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a &gt;= target)&#123;</span><br><span class="line">                <span class="keyword">return</span> length;</span><br><span class="line">            &#125;</span><br><span class="line">            a += nums[i];</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>结果：解答错误</li><li>原因：没仔细看题，题目说的是长度最小的子数组，这思路，只能找出最先大于target的子数组</li></ul><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><ul><li>两个for循环，一个遍历数组，一个使各个值从当前位置相加和target对比。</li><li>代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">999999</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; j++) &#123;</span><br><span class="line">                sum += nums[j];</span><br><span class="line">                <span class="keyword">if</span> (sum &gt;= target) &#123;</span><br><span class="line">                    length = Math.min(length, j - i + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length == <span class="number">999999</span> ? <span class="number">0</span>:length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考后"><a href="#参考后" class="headerlink" title="参考后"></a>参考后</h2><p><strong>滑动窗口</strong>(本质还是双指针)</p><ul><li>思路：两个’指针’从头开始遍历数组, left指针先不动，right向右移，sum增加，若 target &gt;= sum, 此时 left向右移，开始下一初始位置的寻找，直到left=right.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滑动窗口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> result = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> right = <span class="number">0</span>; right &lt; nums.length; right++) &#123;</span><br><span class="line">            sum += nums[right];</span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= s) &#123;</span><br><span class="line">                result = Math.min(result, right - left + <span class="number">1</span>);</span><br><span class="line">                sum -= nums[left++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result == Integer.MAX_VALUE ? <span class="number">0</span> : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2></li><li>认真读题！ 不能漏掉关键字！</li><li>学以致用，前几天刚学的双指针，没想到用。</li><li>下去多了解一下math函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day03-977-有序数组的平方</title>
      <link href="/2022/01/19/Algorithm/Day03-977-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/"/>
      <url>/2022/01/19/Algorithm/Day03-977-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977.有序数组的平方"></a>977.有序数组的平方</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-4,-1,0,3,10]</span><br><span class="line">输出：[0,1,9,16,100]</span><br><span class="line">解释：平方后，数组变为 [16,1,0,9,100]</span><br><span class="line">排序后，数组变为 [0,1,9,16,100]</span><br></pre></td></tr></table></figure><h3 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-7,-3,2,3,11]</span><br><span class="line">输出：[4,9,9,49,121]</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>1 &lt;= nums.length &lt;= 104</li><li>-104 &lt;= nums[i] &lt;= 104</li><li>nums 已按 非递减顺序 排序</li></ul><h2 id="第一想法"><a href="#第一想法" class="headerlink" title="第一想法"></a>第一想法</h2><ul><li>循环数组，使值都变为平方，在用冒泡排序，进行非递减处理</li><li>代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sortedSquares(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            nums[i] *= nums[i]; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j+<span class="number">1</span>] &lt; nums[j]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> t = nums[j+<span class="number">1</span>];</span><br><span class="line">                    nums[j+<span class="number">1</span>] = nums[j];</span><br><span class="line">                    nums[j] = t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>结果：顺利通过，但是时间复杂度O(n + n^2)太高</li></ul><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><ul><li>想到了Java里其实是有内置的排序函数sort()的</li><li>代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sortedSquares(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            nums[i] *= nums[i]; </span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>结果：运行成功，把时间复杂度降到了O(n + nlogn);</li></ul><h2 id="参考后"><a href="#参考后" class="headerlink" title="参考后"></a>参考后</h2><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p><strong>思路：</strong><br>数组其实是有序的， 只不过负数平方之后可能成为最大数了。</p><p>那么数组平方的最大值就在数组的两端，不是最左边就是最右边，不可能是中间。</p><p>此时可以考虑双指针法了，i指向起始位置，j指向终止位置。</p><p>定义一个新数组result，和A数组一样的大小，让k指向result数组终止位置。</p><p>如果A[i] * A[i] &lt; A[j] * A[j] 那么result[k–] = A[j] * A[j]; 。</p><p>如果A[i] * A[i] &gt;= A[j] * A[j] 那么result[k–] = A[i] * A[i]; 。</p><ul><li>代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sortedSquares(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">int</span> index = result.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] * nums[left] &gt; nums[right] * nums[right]) &#123;</span><br><span class="line">                result[index--] = nums[left] * nums[left];</span><br><span class="line">                ++left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result[index--] = nums[right] * nums[right];</span><br><span class="line">                --right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><ul><li>思路没新意，太常规</li><li>对java一些基本函数有遗忘，要加强复习</li><li>多借鉴一些优秀的思路</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA复习笔记</title>
      <link href="/2022/01/19/Java/JAVA%20%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/01/19/Java/JAVA%20%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA-复习"><a href="#JAVA-复习" class="headerlink" title="JAVA 复习"></a>JAVA 复习</h1><h2 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h2><p>Java基础语法（包括数组等），类与对象（包括对象数组等），String类（包括split等常用方法），继承与多态，抽象类与接口，异常类，面向抽象原则与开闭原则（包括类图等），图形用户界面基础，集合框架（包括List接口及其实现类ArrayList、Map接口及其实现类HashMap），文件管理与输入输出流（包括File类、字符流、字节流、缓冲流等）以及线程</p><h2 id="二、注意地方"><a href="#二、注意地方" class="headerlink" title="二、注意地方"></a>二、注意地方</h2><h3 id="1-Integer类"><a href="#1-Integer类" class="headerlink" title="1.  Integer类"></a>1.  Integer类</h3><ul><li>integer.toBinaryString()输出二进制</li></ul><h3 id="2-Arrays类"><a href="#2-Arrays类" class="headerlink" title="2. Arrays类"></a>2. Arrays类</h3><ul><li><p>该类包含用于操作数组的各种方法（如排序和搜索）。 该类还包含一个静态工厂，可以将数组视为列表。</p></li><li><p>排序<br>public static void sort(double a[])<br> 含义：把参数a指定的double类型数组按照升序排序<br>public static void sort(double a[], int start, int end)<br> 含义：把参数a指定的double类型数组中索引start至end-1 的元素的值按照升序排序</p></li><li><p>二分法查找（要求数组已排序）<br>public static int binarySearch(double[] a, double number)<br> 含义：判断参数number指定的数是否在a指定的数组中，再返回该元素的索引，不在，返回一个负数。</p></li><li><p>复制<br>public static int[] copyOf(int[] original, int newLength)<br> 含义：把参数original指定的数组中从索引0开始的newLength个元素复制到一个新数组中，并返回这个新数组。<br>public static int[] copyOfRange(int[] original, int from, int to)<br> 含义：把参数original指定的数组中从索引from开始到 to-1的元素复制到一个新数组中，并返回这个新数组。</p><h3 id="3-enum"><a href="#3-enum" class="headerlink" title="3. enum"></a>3. enum</h3></li><li><p>定义<br>enum  Season {</p><p>   SPRING, SUMMER, AUTUMN, WINTER<br>}</p></li><li><p>用法<br>Season a ;<br>a.SPRING;</p><h3 id="4-pattern类"><a href="#4-pattern类" class="headerlink" title="4. pattern类"></a>4. pattern类</h3></li><li><p>正则表达式会用到<br>正则表达式的编译表示。<br>必须首先将正则表达式（指定为字符串）编译为此类的实例。 然后将所得的图案可以被用来创建一个Matcher对象可以匹配任意character sequences针对正则表达式。 执行匹配的所有状态都驻留在匹配器中，所以许多匹配者可以共享相同的模式。<br>因此，典型的调用序列<br>Pattern p = Pattern.compile(“a*b”);<br>Matcher m = p.matcher(“aaaaab”);<br>boolean b = m.matches();</p></li></ul><h3 id="5-UML类图"><a href="#5-UML类图" class="headerlink" title="5. UML类图"></a>5. UML类图</h3><ol><li>长方形分为三块</li></ol><ul><li>类名（抽象类为斜体）</li><li>变量名</li><li>方法名</li><li>注意：public 为 + , 默认为缺省，protect为#，private为-；</li></ul><ol start="2"><li>关联 —&gt;</li><li>依赖 —-&gt;\</li><li>继承 —▷</li><li>实现接口 —-▷</li></ol><h3 id="6-JScrollPane"><a href="#6-JScrollPane" class="headerlink" title="6. JScrollPane"></a>6. JScrollPane</h3><p>提供轻量级组件的可滚动视图。 A JScrollPane管理视口，可选的垂直和水平滚动条以及可选的行和列标题视口。 您可以在How to Use Scroll Panes中找到面向任务的JScrollPane JScrollPane ， 这是Java教程中的一节。 请注意， JScrollPane不支持重量级组件。 </p><h3 id="7-Dimension"><a href="#7-Dimension" class="headerlink" title="7. Dimension"></a>7. Dimension</h3><p>Dimension类封装单个对象中组件的宽度和高度（以整数精度）。 该类与组件的某些属性相关联。 Component类和LayoutManager接口定义的几种方法返回一个Dimension对象。 </p><h3 id="3-三种布局"><a href="#3-三种布局" class="headerlink" title="3. 三种布局"></a>3. 三种布局</h3><ul><li>GridLayout-网格布局</li><li>BorderLayout-边框布局</li><li>FlowLayout-流式布局</li></ul><h3 id="4-反射"><a href="#4-反射" class="headerlink" title="4. 反射"></a>4. 反射</h3><h2 id="三、查缺补漏"><a href="#三、查缺补漏" class="headerlink" title="三、查缺补漏"></a>三、查缺补漏</h2><h3 id="1-移位运算"><a href="#1-移位运算" class="headerlink" title="1. 移位运算"></a>1. 移位运算</h3><ul><li>移位运算符</li></ul><p>** 二进制移位，移动一位相当于*2 || /2 **<br> &lt;&lt; （带符号左移） </p><blockquote><blockquote><p>（带符号右移） </p><blockquote><p>（无符号右移）<br> 列： D:\ideaWorkspace\review\src\displacement.java </p></blockquote></blockquote></blockquote><ul><li><strong>疑问： java输出负数二进制表现和机组不一样？</strong></li></ul><h3 id="2-数组的表示"><a href="#2-数组的表示" class="headerlink" title="2. 数组的表示"></a>2. 数组的表示</h3><ol><li>定义、</li></ol><ul><li>int a[]; // 不推荐</li><li>int [] a;</li></ul><ol start="2"><li>初始化</li></ol><ul><li>int a[] = new int[x];</li><li>int a[] = new int[]{1,2,3,4};</li><li>int a[] = {1,2,3,4}</li></ul><p>** 3. 注意：java不允许在声明数组中的方括号内指定数组长度。**</p><h3 id="3-修饰符表示范围"><a href="#3-修饰符表示范围" class="headerlink" title="3. 修饰符表示范围"></a>3. 修饰符表示范围</h3><table><thead><tr><th>修饰符</th><th>访问位置</th></tr></thead><tbody><tr><td>private</td><td>该类</td></tr><tr><td>默认</td><td>同一个包</td></tr><tr><td>protect</td><td>同一个项目</td></tr><tr><td>public</td><td>任何位置</td></tr></tbody></table><h3 id="4-抽象和接口的区别"><a href="#4-抽象和接口的区别" class="headerlink" title="4. 抽象和接口的区别"></a>4. 抽象和接口的区别</h3><ol><li>抽象</li></ol><ul><li>abstract方法没有方法体</li></ul><ol start="2"><li>接口</li></ol><ul><li>只能用public 和 空缺</li><li>默认为public 可以不写public</li></ul><p>** 接口规定类做什么，抽象类增加代码复用性**<br><em>见CSDN收藏</em></p><h3 id="5-Lambda表达式"><a href="#5-Lambda表达式" class="headerlink" title="5 . Lambda表达式"></a>5 . Lambda表达式</h3><ol><li>定义：Lambda表达式是一个匿名函数，即没有函数名的函数</li><li>表现形式：（参数/无参）-&gt; {多行语句}；</li><li>用法：一般用于匿名内部类，有单个方法。</li></ol><h3 id="6-输入输出流，缓冲流"><a href="#6-输入输出流，缓冲流" class="headerlink" title="6. 输入输出流，缓冲流"></a>6. 输入输出流，缓冲流</h3><ol><li>字符流</li></ol><ul><li>FileWriter</li><li>FileReader</li><li>注意方法：<br>fr.read() 读到末尾返回-1</li></ul><ol start="2"><li>字节流</li></ol><ul><li>FileInputStream</li><li>FileoutputStream</li></ul><ol start="3"><li>缓冲流</li></ol><ul><li>BufferedWriter</li><li>BufferedReader</li><li><em>创建的时候依赖与其他流 列： bf = new BufferedReader(fr)</em></li><li>注意的方法：<br>bw.readLine() 读一行  <em>不能写成 .read() , 为读一个字符</em>  //返回String<br>bw.newLine() 写一行行分隔符</li></ul><p>** 最后都需要关闭流（.close(）)    缓冲流要在文件流之前关闭**</p><h3 id="7-集合框架"><a href="#7-集合框架" class="headerlink" title="7. 集合框架"></a>7. 集合框架</h3><ul><li>迭代器 — 重点map</li></ul><ol><li>迭代器输出map的值<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Student&gt; itervalue = map.values().iterator();</span><br><span class="line">while(itervalue.hasNext()) &#123;</span><br><span class="line">Sout(itervalue.next)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>迭代器输出map键-值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Map.Entry&lt;Integer,Student&gt;&gt; iterEntry = map.entrySet().iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(iterEntry.hasNext()) &#123;</span><br><span class="line">Map.Entry&lt;Integer,Student&gt; entry =       (Map.Entry&lt;Integer,Student&gt;)iterEntry.next();  <span class="comment">//创造具体对象 类似于 new</span></span><br><span class="line">sout(iterEntry.getKey() + <span class="string">&quot;&lt;=&gt;&quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="8-String-split"><a href="#8-String-split" class="headerlink" title="8. String split"></a>8. String split</h3><ul><li>将此字符串分割为给定的 regular expression的匹配。 </li><li>列：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a = &quot;a-b-c-d&quot;;</span><br><span class="line">sout(s.split(-));</span><br><span class="line">结果： ab  c  d</span><br></pre></td></tr></table></figure></li></ul><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title=". 正则表达式"></a>. 正则表达式</h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 期末复习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA学习笔记</title>
      <link href="/2022/01/19/Java/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/19/Java/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA学习笔记"><a href="#JAVA学习笔记" class="headerlink" title="JAVA学习笔记"></a>JAVA学习笔记</h1><h2 id="Day01-2021-8-8"><a href="#Day01-2021-8-8" class="headerlink" title="Day01 2021/8/8"></a>Day01 2021/8/8</h2><h1 id="一、注意"><a href="#一、注意" class="headerlink" title="一、注意"></a>一、注意</h1><ol><li>布尔常量是可以输出的</li><li>null不可以输出<h1 id="二、错误总结"><a href="#二、错误总结" class="headerlink" title="二、错误总结"></a>二、错误总结</h1></li><li>float f=13.14;<pre><code> System.out.println(&quot;f&quot;)；错误</code></pre> 应该(f);<h2 id="Day02-2021-8-9"><a href="#Day02-2021-8-9" class="headerlink" title="Day02 2021/8/9"></a>Day02 2021/8/9</h2><h1 id="一、注意-1"><a href="#一、注意-1" class="headerlink" title="一、注意"></a>一、注意</h1></li><li>类型转换可以是从小到大，强制类型转换是从大转小（不建议使用，有数据丢失）</li><li><pre><code>    System.out.println(5.2 / a);//可以得到小数</code></pre></li><li>‘0’ Asics为48 ‘0–9’连续</li><li>算术表达式中包&lt;含多个数据类型&gt;的值的时候，整个算术表达式的类型会自动提升。</li><li><pre><code> System.out.println(&quot;黑马&quot; + 6 + 66); ——黑马666 System.out.println(1 + 99 + &quot;年黑马&quot;);———100黑马 总结： 从左到右运算</code></pre></li><li>+=包含了强制类型转换—(不建议)<br> short s=10;<br> s += 20; 正确        等同于s = (short)(s + 20)<br> s = s + 20; 错误 </li><li>b = a++; a值先给b，再++。一般单独使用++；</li><li>异或^ 相同为T,不同为F</li><li>短路与|| 左边为真右边不执行<br> 短路或&amp;&amp; 左边为假右边不执行<h1 id="二、错误总结-1"><a href="#二、错误总结-1" class="headerlink" title="二、错误总结"></a>二、错误总结</h1></li><li>c=”A”,为字符串（String),  c=’A’，为单个字符；</li></ol><h2 id="Day03-2021-8-10"><a href="#Day03-2021-8-10" class="headerlink" title="Day03 2021/8/10"></a>Day03 2021/8/10</h2><h1 id="一、注意-2"><a href="#一、注意-2" class="headerlink" title="一、注意"></a>一、注意</h1><ol><li>测试数据：选择正确数据、边界数据、错误数据。</li><li>for循环里的循环变量，出了循环不可使用。while循环里的变量，全局都可以使用。</li><li>for( ; ; )为for的死循环    ctrl+c可以结束循环</li></ol><h2 id="Day04-2021-8-11"><a href="#Day04-2021-8-11" class="headerlink" title="Day04 2021/8/11"></a>Day04 2021/8/11</h2><h1 id="一、注意-3"><a href="#一、注意-3" class="headerlink" title="一、注意"></a>一、注意</h1><ol><li>反复练习idea操作</li></ol><h1 id="二、错误总结-2"><a href="#二、错误总结-2" class="headerlink" title="二、错误总结"></a>二、错误总结</h1><ol><li>idea中一旦选定文件储存区域，不能对文件进行重命名。</li></ol><h1 id="idea里的快捷键"><a href="#idea里的快捷键" class="headerlink" title="idea里的快捷键"></a>idea里的快捷键</h1><ol><li>快速生成mian() psvm,</li><li>快速生成输出 sout</li><li>内容辅助 ctrl + Alt + space</li><li>ctrl + Alt + l 修改代码标准格式</li><li>ctrl + Alt + v 代码自动补全</li></ol><h2 id="Day05-2021-8-12"><a href="#Day05-2021-8-12" class="headerlink" title="Day05 2021/8/12"></a>Day05 2021/8/12</h2><h1 id="一、注意-4"><a href="#一、注意-4" class="headerlink" title="一、注意"></a>一、注意</h1><ol><li>方法重载</li><li>输出语句</li><li>从问题中提炼数据，从数据中寻找规律，从规律中程序化。<h1 id="二、错误总结-3"><a href="#二、错误总结-3" class="headerlink" title="二、错误总结"></a>二、错误总结</h1></li><li>该错误要一改都改，记得改了同样出现的地方。</li></ol><h2 id="Day06-2021-8-13"><a href="#Day06-2021-8-13" class="headerlink" title="Day06 2021/8/13"></a>Day06 2021/8/13</h2><h1 id="一、注意-5"><a href="#一、注意-5" class="headerlink" title="一、注意"></a>一、注意</h1><ol><li>private 修饰成员变量</li><li>this关键字，加载变量前，解决局部变量隐藏成员变量</li><li>构造方法，在类中 public Student() {};</li><li>构造方法就相当于方法   函数；</li></ol><h1 id="二、错误总结-4"><a href="#二、错误总结-4" class="headerlink" title="二、错误总结"></a>二、错误总结</h1><ol><li>给字符串（String）赋值要加引号，单引号、双引号；</li></ol><h2 id="Day07-2021-8-14"><a href="#Day07-2021-8-14" class="headerlink" title="Day07 2021/8/14"></a>Day07 2021/8/14</h2><h1 id="一-注意"><a href="#一-注意" class="headerlink" title="一,注意"></a>一,注意</h1><h1 id="二-错误总结"><a href="#二-错误总结" class="headerlink" title="二,错误总结"></a>二,错误总结</h1><ol><li>System.out.println(“输入的数据是：” + line);    正确—-不能写成System.out.println(“输入的数据是： + line”);</li></ol><h2 id="Day08-2021-8-15"><a href="#Day08-2021-8-15" class="headerlink" title="Day08 2021/8/15"></a>Day08 2021/8/15</h2><h1 id="一、注意-6"><a href="#一、注意-6" class="headerlink" title="一、注意"></a>一、注意</h1><ol><li><code>[用==作比较：  基本类型：比较的是数据值是否相同      应用类型：比较的是地址值是否相同]</code>()</li><li><code>比较字符串用方法：.equals()    public boolen equals(Object and Obeject);    s1.equals(s2)</code></li><li>获取字符串中单个字符 .charAt();    </li><li>获取字符串的长度 .length();</li><li>String是可变的，StringBuilde是不可变的。</li><li>StringBulider中append添加数据并返回数据本身    reverse反转<br> B-&gt;S转换String s = sb.toString();<br> S-&gt;B转换StringBuilder sb = new StringBuilder(s);</li><li>ArrayList方法：<br> 删除–返回是否成功<br> array.remove(“world”);<br> 删除指定位置–返回别删除元素<br> array.remove(1);<br> //修改指定位置索引，返回被修改元素<br> System.out.println(array.set(1,”nima”));<pre><code> //返回索引处的元素 System.out.println(array.get(1));   //返回集合中元素的个数 System.out.println(array.size()); //输出集合 System.out.println(array); //添加 add</code></pre></li></ol><h1 id="二、错误总结-5"><a href="#二、错误总结-5" class="headerlink" title="二、错误总结"></a>二、错误总结</h1><ol><li>一般数组或者字符串的遍历用for()循环</li><li>定义变量必须初始化(与C语言不同)</li><li>字符串可以定义byte {97}输出字符，s.charAt(a) &gt;= 97正确</li><li>数字不带引号，字符串带引号；</li><li>一开始写不能忘记main方法！！！<h1 id="Day09-8-18"><a href="#Day09-8-18" class="headerlink" title="Day09/8/18"></a>Day09/8/18</h1></li></ol><h2 id="一-注意-1"><a href="#一-注意-1" class="headerlink" title="一.注意"></a>一.注意</h2><ol><li><p>快捷键 alt + insert    根据自己的需要进行选择。</p></li><li><h2 id="字符串比较不能用-比较！！！！用equal！！！"><a href="#字符串比较不能用-比较！！！！用equal！！！" class="headerlink" title="字符串比较不能用 == 比较！！！！用equal！！！"></a>字符串比较不能用 == 比较！！！！用equal！！！</h2></li><li><h2 id="多想！！多尝试！！把问题全面化，简单化！！一定可以！"><a href="#多想！！多尝试！！把问题全面化，简单化！！一定可以！" class="headerlink" title="多想！！多尝试！！把问题全面化，简单化！！一定可以！"></a>多想！！多尝试！！把问题全面化，简单化！！一定可以！</h2></li></ol><h2 id="二、错误总结-6"><a href="#二、错误总结-6" class="headerlink" title="二、错误总结"></a>二、错误总结</h2><ol><li>System.exit(0);   退出程序.</li><li>switch用String的好处，输入出错，程序不会报错，还可以继续运行下去，直到输入正确的选择。</li><li>输出特殊含义的方法   在sout里不能加引号。</li><li>用ArrayLiss中数据时，必学先取出对象，再调用对象的方法。</li><li>多思考！！！！！摆脱惯性思维！！！！！！</li><li>while 和 for里定义的变量外界不能用，但在外界定义，在里面赋值操作，外界同样改变！</li></ol><h1 id="感悟："><a href="#感悟：" class="headerlink" title="感悟："></a>感悟：</h1><h2 id="程序没有最好，只有更好。只要你动脑筋想，无穷的巧妙方法！"><a href="#程序没有最好，只有更好。只要你动脑筋想，无穷的巧妙方法！" class="headerlink" title="程序没有最好，只有更好。只要你动脑筋想，无穷的巧妙方法！"></a>程序没有最好，只有更好。只要你动脑筋想，无穷的巧妙方法！</h2><h2 id="相同问题，方法不唯一。不同问题尽管类似，但要找到起不同，用合适的方法！"><a href="#相同问题，方法不唯一。不同问题尽管类似，但要找到起不同，用合适的方法！" class="headerlink" title="相同问题，方法不唯一。不同问题尽管类似，但要找到起不同，用合适的方法！"></a>相同问题，方法不唯一。不同问题尽管类似，但要找到起不同，用合适的方法！</h2><h2 id="d-StudentManger-delete-update-Student-里对学号不存在的判断"><a href="#d-StudentManger-delete-update-Student-里对学号不存在的判断" class="headerlink" title="d://StudentManger    delete\update Student 里对学号不存在的判断"></a>d://StudentManger    delete\update Student 里对学号不存在的判断</h2><h2 id="从问题根源解决：-想着修改、删除、重复学号怎么办-源头！！！控制添加方法—-让其不要输入重复！！！"><a href="#从问题根源解决：-想着修改、删除、重复学号怎么办-源头！！！控制添加方法—-让其不要输入重复！！！" class="headerlink" title="从问题根源解决： 想着修改、删除、重复学号怎么办        源头！！！控制添加方法—-让其不要输入重复！！！"></a>从问题根源解决： 想着修改、删除、重复学号怎么办        源头！！！控制添加方法—-让其不要输入重复！！！</h2><h1 id="Day10-09-11"><a href="#Day10-09-11" class="headerlink" title="Day10/09/11"></a>Day10/09/11</h1><h2 id="一、注意-7"><a href="#一、注意-7" class="headerlink" title="一、注意"></a>一、注意</h2><ol><li>继承格式 public class  zi extends fu() {};</li><li>构造方法和成员方法：<br> 1.构造方法 构造方法作用概述 给对象的数据进行初始化 构造方法格式 方法名与类名相同 没有返回值类型,连void都没有 没有具体的返回值 构造方法注意事项 如果你不提供构造方法,系统会给出默认构造方法 如果你…<br> 2.成员方法 成员方法作用概述 表示对象所具有的功能(和行为)。 成员方法格式 有返回类型,可以为void类型,也可以是基本数据类型.</li><li>继承中变量 、方法的访问特点：<br> 先方法，再成员变量，再父类<br> 想访问成员用this,想访问父类用super</li><li>@override<br>@Override这个标签有什么用呢。。。。。。<br>其实我也是比较迷茫，查了一下，三个作用吧</li><li>可以给你当作注释用，感觉这个也不能说明什么，注释也没什么用。</li><li>可以告诉读你代码的人，这是对它父类方法的重写，其实很多代码规范没有为什么，规范就是规范，代码的可读性还是很重要的。</li><li>编译器可以给你验证@Override下面的方法名称是否是你父类中所有的，如果没有就会报错。</li><li>访问权限：public &gt; 默认 &gt; privata</li><li>类只支持单继承，不支持多继承，但支持多层继承。</li></ol><h1 id="Day11-09-12"><a href="#Day11-09-12" class="headerlink" title="Day11/09/12"></a>Day11/09/12</h1><h2 id="一、注意-8"><a href="#一、注意-8" class="headerlink" title="一、注意"></a>一、注意</h2><ol><li>java se :标准版 用于开发桌面应用</li><li>java ee: 企业版</li><li>java me: 微型</li></ol><h1 id="Day11-09-26"><a href="#Day11-09-26" class="headerlink" title="Day11/09/26"></a>Day11/09/26</h1><h2 id="一、注意-9"><a href="#一、注意-9" class="headerlink" title="一、注意"></a>一、注意</h2><ol><li>导包，文件直接创建，cmd      java d . Hello.java</li><li>修饰符 （publick) （protected)     (默认)    (private)</li><li>状态修饰符<br> final 最终，修饰成员 1. 方法，2. 成员变量，3. 类，4. 局部变量，5. 引用变量（如 final Student s = new Student;)。<ol><li>最终方法，不能被重写；</li><li>变量为常量，不能再次被赋值；</li><li>最终类，不能被继承。</li><li>数据值不能变；</li><li>地址值不能变，但是地址值里的内容可以变。</li></ol><hr> static 静态，可以修饰成员方法，成员变量。<ol><li>特点： 别类的所有对象共享；——–也是判断是否使用静态关键字的条件。</li><li>可以使用对象名调用，也可以使用类名调用。&lt;推荐类名调用&gt;</li><li>静态成员方法只能访问静态成员。</li><li>非静态都可以访问。</li><li>main通常为静态 所以，类下面的方法一般也为静态。<h1 id="Day12-2021-9-29"><a href="#Day12-2021-9-29" class="headerlink" title="Day12/2021/9/29"></a>Day12/2021/9/29</h1><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="一、-多态中成员访问特点"><a href="#一、-多态中成员访问特点" class="headerlink" title="一、 多态中成员访问特点"></a>一、 <strong>多态中成员访问特点</strong></h3></li></ol></li><li></li></ol><p>![e043f945ba7d7bd37ad0329bbe9bc4a](C:\Users\23694\AppData\Local\Temp\WeChat Files\e043f945ba7d7bd37ad0329bbe9bc4a.png)<br>2. **多态的好处与弊端</p><p>![df065b619113d744a14b7e889e6837e](C:\Users\23694\AppData\Local\Temp\WeChat Files\df065b619113d744a14b7e889e6837e.png)</p><ol start="3"><li><p>**多态的转型<br>//多态</p><pre><code> Arimal a = new Cat(); //1.从子到父，父类引用指向子类对象、向上转型 a.eat();//2.从父到子，向下转型，父类引用转为子类对象 Cat c = (Cat)a; c.playGame(); //逆着看 </code></pre><h1 id="Day13-2021-10-06"><a href="#Day13-2021-10-06" class="headerlink" title="Day13/2021/10/06"></a>Day13/2021/10/06</h1><h2 id="抽象类-55c0455d5b639de6d7782ba5329a00c-C-Users-23694-AppData-Local-Temp-WeChat-Files-55c0455d5b639de6d7782ba5329a00c-png"><a href="#抽象类-55c0455d5b639de6d7782ba5329a00c-C-Users-23694-AppData-Local-Temp-WeChat-Files-55c0455d5b639de6d7782ba5329a00c-png" class="headerlink" title="抽象类![55c0455d5b639de6d7782ba5329a00c](C:\Users\23694\AppData\Local\Temp\WeChat Files\55c0455d5b639de6d7782ba5329a00c.png)"></a>抽象类![55c0455d5b639de6d7782ba5329a00c](C:\Users\23694\AppData\Local\Temp\WeChat Files\55c0455d5b639de6d7782ba5329a00c.png)</h2><h3 id="成员特点"><a href="#成员特点" class="headerlink" title="成员特点"></a>成员特点</h3></li></ol><h1 id="ERROR"><a href="#ERROR" class="headerlink" title="ERROR"></a>ERROR</h1><ol><li>![9ddca1064128fcc4f0de5b42eb43295](C:\Users\23694\AppData\Local\Temp\WeChat Files\9ddca1064128fcc4f0de5b42eb43295.png)String 定义的变量赋值要加 ”“；</li></ol><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="一、接口的特点"><a href="#一、接口的特点" class="headerlink" title="一、接口的特点"></a>一、接口的特点</h2><ol><li>用关键字Interface修饰；</li><li>类实现接口用implement</li><li>接口不能实例化<br> *可用多态方式，通过实现对象实例化，这叫接口多态。</li><li><strong>多态的形式<br> 具体类多态、抽象类多态、接口多态</strong></li><li><strong>多态的前提<br> 有继承或者实现关系； 有方法重写；有父类的（接口/类)引用指向(子/实现)类对象</strong><h2 id="二、接口的成员特点"><a href="#二、接口的成员特点" class="headerlink" title="二、接口的成员特点"></a>二、接口的成员特点</h2></li><li></li></ol><p>![8b1956872eda32d7978c71682dcc980](C:\Users\23694\AppData\Local\Temp\WeChat Files\8b1956872eda32d7978c71682dcc980.png)<br>2. 接口不可以实列化** 当有的方参数为接口时，调用的是接口的implement。测试类中也要用堕胎的方式创建接口**</p><h1 id="Day14-2021-10-24"><a href="#Day14-2021-10-24" class="headerlink" title="Day14/2021/10/24"></a>Day14/2021/10/24</h1><h1 id="一、内部类"><a href="#一、内部类" class="headerlink" title="一、内部类"></a>一、内部类</h1><p>*练习文件所在位置D:\ideaWorkspace-practice\src\：</p><h2 id="1-1-访问特点"><a href="#1-1-访问特点" class="headerlink" title="1. 1 访问特点"></a>1. 1 访问特点</h2><ol><li>内部类可以直接反问外部类的成员、包括私有</li><li>外部类要想访问内部类。必需创建对象</li></ol><h3 id="1-1-1分类"><a href="#1-1-1分类" class="headerlink" title="1.1.1分类"></a>1.1.1分类</h3><blockquote><blockquote><p>成员内部类<br>局部内部类</p></blockquote></blockquote><h2 id="1-2成员内部类"><a href="#1-2成员内部类" class="headerlink" title="1.2成员内部类"></a>1.2成员内部类</h2><h3 id="1-2-1成员内部类如何创建使用"><a href="#1-2-1成员内部类如何创建使用" class="headerlink" title="1.2.1成员内部类如何创建使用"></a>1.2.1成员内部类如何创建使用</h3><blockquote><blockquote><p>格式  ： 外部类名.内部类名 对象名 = 外部类对象.内部类对象<br>范列  ：        Outher.Inner i = new Outher().new Inner();</p><blockquote><p>注意：还有一种是在外部类方法中创建内部类对象，在测试类中直接调用该方法，实现成员内部类的创建和使用。</p></blockquote></blockquote></blockquote><h2 id="1-3局部内部类"><a href="#1-3局部内部类" class="headerlink" title="1.3局部内部类"></a>1.3局部内部类</h2><h3 id="1-3-1定义"><a href="#1-3-1定义" class="headerlink" title="1.3.1定义"></a>1.3.1定义</h3><blockquote><blockquote><p>在方法中定义的类。外界无法显示，需要在方法内部创建对象并使用该类，可以直接访问外部类的成员，也可以访问方法内的局部变量；</p></blockquote></blockquote><h2 id="1-4-匿名内部类"><a href="#1-4-匿名内部类" class="headerlink" title="1.4 匿名内部类"></a>1.4 匿名内部类</h2><p><em>局部内部类的一种特俗形式</em><br><strong>前提</strong> ： 存在一个类或者接口，这里类可以是具体类也可以是抽象类<br><strong>本质</strong> :   是一个继承了该类或者实现了该接口的子类^匿名对象^</p><h3 id="1-4-1-格式"><a href="#1-4-1-格式" class="headerlink" title="1.4.1 格式"></a>1.4.1 格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new 类名或者接口名() &#123;  </span><br><span class="line">重写方法；^说明继承了前面的类或者说实现了一个接口^</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p><strong>最后的分号不能忘</strong></p><h3 id="1-4-2-调用"><a href="#1-4-2-调用" class="headerlink" title="1.4.2 调用"></a>1.4.2 调用</h3><blockquote><blockquote><p>可以利用多态的方法赋值给类或者接口 ，对类或者接口进行方法调用。</p></blockquote></blockquote><h2 id="1-5-匿名内部类在开发中的作用"><a href="#1-5-匿名内部类在开发中的作用" class="headerlink" title="1.5 匿名内部类在开发中的作用"></a>1.5 匿名内部类在开发中的作用</h2><h3 id="1-5-1案例"><a href="#1-5-1案例" class="headerlink" title="1.5.1案例"></a>1.5.1案例</h3><p> //使用匿名内部类，可以使不用创建具体的猫对象<br>        jo.method(new Jumpping() {<br>            @Override<br>            public void jump() {<br>                System.out.println(“狗会跳”);<br>            }<br>        });</p><h3 id="一、注意-10"><a href="#一、注意-10" class="headerlink" title="一、注意"></a>一、注意</h3><ol><li><strong>通用</strong> 类里不能直接输出（sout),必须创建方法;</li><li><strong>通用</strong>所有可以实现的方法颜色都会发生改变；</li></ol><h3 id="二、错误总结-7"><a href="#二、错误总结-7" class="headerlink" title="二、错误总结"></a>二、错误总结</h3><h1 id="day15-2021-10-26"><a href="#day15-2021-10-26" class="headerlink" title="day15/2021/10/26"></a>day15/2021/10/26</h1><h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><h1 id="1、Math"><a href="#1、Math" class="headerlink" title="1、Math"></a>1、Math</h1><h2 id="1-1-Math类概述"><a href="#1-1-Math类概述" class="headerlink" title="1.1 Math类概述"></a>1.1 Math类概述</h2><blockquote><blockquote><p>基本数学方法</p></blockquote></blockquote><h2 id="1-2-Math类的常用方法"><a href="#1-2-Math类的常用方法" class="headerlink" title="1.2 Math类的常用方法"></a>1.2 Math类的常用方法</h2><ol><li>abs(int )——绝对值</li><li>ceil(double )——大于或等于参数的最小double值</li><li>floor(double )——小与或等于参数的最大double值</li><li>round(float )——四舍五入返回最接近参数的int</li><li>max(int )——较大值</li><li>min(int )——较小值</li><li>pow(double a, double b)——a的b次幂</li><li>random( )——返回为double的正直，[0.0,1.0)    <em>（int)random())可强转为int</em></li></ol><h1 id="2、System"><a href="#2、System" class="headerlink" title="2、System"></a>2、System</h1><h2 id="2-1-System类概述"><a href="#2-1-System类概述" class="headerlink" title="2.1 System类概述"></a>2.1 System类概述</h2><p><strong>包含几个有用的类字段和方法，它不能被实例化。</strong></p><h2 id="2-2-System类的常用方法"><a href="#2-2-System类的常用方法" class="headerlink" title="2.2 System类的常用方法"></a>2.2 System类的常用方法</h2><ol><li>exit(0)——终止当前运行的java虚拟机，非零表示异常终止</li><li>currentTimeMillis()——返回当前时间（以毫秒为单位）<br> *可以用来计算for循环耗时<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">long strat = System.currentTimeMillis();</span><br><span class="line">for();</span><br><span class="line">long end = System.currentTimeMillis();</span><br><span class="line">sout(&quot;time&quot; = strat - long);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h1 id="3、Object"><a href="#3、Object" class="headerlink" title="3、Object"></a>3、Object</h1><h2 id="3-1-Object类的概述"><a href="#3-1-Object类的概述" class="headerlink" title="3.1 Object类的概述"></a>3.1 Object类的概述</h2><p>** Class Object是类Object结构的根。 每个班都有Object作为超类。 所有对象（包括数组）都实现了这个类的方法。**</p><h3 id="3-1-1构造方法"><a href="#3-1-1构造方法" class="headerlink" title="3.1.1构造方法"></a>3.1.1构造方法</h3><p><strong>public Object();</strong></p><h2 id="3-2-Object类的常用方法"><a href="#3-2-Object类的常用方法" class="headerlink" title="3.2 Object类的常用方法"></a>3.2 Object类的常用方法</h2><ol><li>toString()——输出对象地址<em>建议所有子类都重写</em></li><li>equals()——</li></ol><h1 id="day16-2021-11-13"><a href="#day16-2021-11-13" class="headerlink" title="day16/2021/11/13"></a>day16/2021/11/13</h1><p><strong>==一些基础总结==</strong></p><h2 id="JFrame"><a href="#JFrame" class="headerlink" title="JFrame"></a>JFrame</h2><ol><li>JCheckBox 复选框 getText()</li><li>JComboBox 下拉列表 .getSelectedItem().toString()</li></ol><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ol><li>final abstract 不能同时出现</li><li>接口里也可以有抽象方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ABCD注释标注的哪行代码有错误？</span><br><span class="line"></span><br><span class="line">public interface Com &#123;</span><br><span class="line"></span><br><span class="line">    abstract void cry();       //A</span><br><span class="line"></span><br><span class="line">    public int x = 0;          //B </span><br><span class="line"></span><br><span class="line">    static int y = 0;          //C</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract class Cat implements Com &#123;</span><br><span class="line"></span><br><span class="line">    abstract void cry();       //D</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.  abstract void cry(); </span><br><span class="line">B. public int x = 0;</span><br><span class="line">C.  static int y = 0; </span><br><span class="line">D. abstract void cry(); </span><br><span class="line">我的答案: D正确答案: D</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>抽象方法必须实现，接口不一定<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">ABCD注释标注的哪行代码有错误？</span><br><span class="line"></span><br><span class="line">interface Com &#123;</span><br><span class="line"></span><br><span class="line">    int MAX = 100;  //A</span><br><span class="line"></span><br><span class="line">    void f();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract class Animal implements Com &#123;</span><br><span class="line"></span><br><span class="line">    int MIN ;      //B</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog extends Animal&#123;</span><br><span class="line"></span><br><span class="line">    public void f() &#123;  </span><br><span class="line"></span><br><span class="line">       MIN = 10;     //C</span><br><span class="line"></span><br><span class="line">       MAX = 200;    //D</span><br><span class="line"></span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.  int MAX = 100;</span><br><span class="line">B.  int MIN ; </span><br><span class="line">C. MIN = 10; </span><br><span class="line">D. MAX = 200; </span><br><span class="line">我的答案: D正确答案: D</span><br></pre></td></tr></table></figure></li><li>接口方法只能用public 、 默认<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">接口中的方法也可以用private或protected修饰。</span><br><span class="line">A. 对</span><br><span class="line">B. 错</span><br><span class="line">我的答案: 错正确答案: 错</span><br></pre></td></tr></table></figure><h2 id="继承与多态"><a href="#继承与多态" class="headerlink" title="继承与多态"></a>继承与多态</h2></li><li>(判断题)子类在方法重写时，不可以把父类的实例方法重写为类（static）方法，也不可以把父类的类（static）方法重写为实例方法。</li><li>子类继承父类的构造方法。<br>我的答案: 错正确答案: 错<br>答案解析：子类有子类的构造方法，父类有父类的构造方法，子类是不会继承父类的构造函数的，只是必须调用</li><li>** 继承普通父类可以方法重写，继承继承抽象类不可以。**</li></ol><p><strong>== 注 ==</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1. (单选题)</span><br><span class="line">下列哪个代码（A，B，C，D）放入程序中标注的【代码】处将导致编译错误？</span><br><span class="line"></span><br><span class="line">class A &#123; </span><br><span class="line"></span><br><span class="line">   public float getNum() &#123;</span><br><span class="line"></span><br><span class="line">       return 3.0f;</span><br><span class="line"></span><br><span class="line">   &#125;     </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">public class B extends A &#123; </span><br><span class="line"></span><br><span class="line">      【代码】</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A. public float getNum()&#123;return 4.0f;&#125; </span><br><span class="line">B.  public void getNum()&#123; &#125;   **√**</span><br><span class="line">C.  public void getNum(double d)&#123; &#125; </span><br><span class="line">D.  public double getNum(float d)&#123;return 4.0d;&#125;</span><br><span class="line"></span><br><span class="line">可以重写方法如改变（），不可以改变返回值类型</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="day17-2021-11-17"><a href="#day17-2021-11-17" class="headerlink" title="day17/2021/11/17"></a>day17/2021/11/17</h1><p><img src="D:\面向对象课件资料\黑马基础图片\集合体系结构\V{W{LYR]J}PIRL6CIA_NO33.png"></p><h2 id="1-Collection"><a href="#1-Collection" class="headerlink" title="1. Collection"></a>1. Collection</h2><h3 id="1-2-集合类结构体"><a href="#1-2-集合类结构体" class="headerlink" title="1,2 集合类结构体"></a>1,2 集合类结构体</h3><p>** 集合分为Collection和Map**<br>** Cpllection 分为list \ set  **</p><h3 id="1-3Collection"><a href="#1-3Collection" class="headerlink" title="1.3Collection"></a>1.3Collection</h3><h4 id="1-3-1创建Collection集合的对象"><a href="#1-3-1创建Collection集合的对象" class="headerlink" title="1.3.1创建Collection集合的对象"></a>1.3.1创建Collection集合的对象</h4><ul><li>多态的方式</li><li>具体的实现类ArrayList</li></ul><h3 id="1-4-Collection的常用方法"><a href="#1-4-Collection的常用方法" class="headerlink" title="1.4 Collection的常用方法"></a>1.4 Collection的常用方法</h3><p><img src="D:\面向对象课件资料\黑马基础图片\集合体系结构\M(]U7X8VZ3QLJGM]Z4RI%JW.png"></p><h3 id="1-5Collection遍历"><a href="#1-5Collection遍历" class="headerlink" title="1.5Collection遍历"></a>1.5Collection遍历</h3><p><strong>iterator 迭代器,集合专用遍历方式</strong><br> iterator<E> iterator(): 返回集合中元素的迭代器，通过iterator()方法得到 <strong>==        Iterator<String> it = list.iterator();==</strong></p><ul><li>依赖与集合存在</li></ul><p><strong>常用方法</strong></p><p><img src="D:\面向对象课件资料\黑马基础图片\集合体系结构[9Z(}TRZWC%_UI5)C@QL~5B.png"></p><h3 id="1-6集合的使用步骤"><a href="#1-6集合的使用步骤" class="headerlink" title="1.6集合的使用步骤"></a>1.6集合的使用步骤</h3><ol><li>创建集合对象</li><li>添加元素</li><li>遍历集合（三总遍历方式）<blockquote><p>利用size（）和for循环<br>增强for循环<br>迭代器iterator</p></blockquote></li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p><strong>== 如何把多个对象一起加入集合==</strong><br><strong>== hashCode==</strong></p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p><strong>AlT + 7 打开一个窗口，可以看到类的所有信息</strong><br>**ctrl + alt + v 、补全代码</p><h2 id="2-List"><a href="#2-List" class="headerlink" title="2. List"></a>2. List</h2><h3 id="2-1-List集合概述和特点"><a href="#2-1-List集合概述和特点" class="headerlink" title="2.1 List集合概述和特点"></a>2.1 List集合概述和特点</h3><ul><li>概述：</li><li>有序集合（也称为序列 ）。 该界面的用户可以精确控制列表中每个元素的插入位置。 用户可以通过整数索引（列表中的位置）访问元素，并搜索列表中的元素。 </li><li>与Set集合不同，列表允许重复元素</li><li>特点：</li><li>有序：存储和取出的元素顺序一致</li><li>可重复：存储的元素可重复<h3 id="2-2-List集合特有方法"><a href="#2-2-List集合特有方法" class="headerlink" title="2.2 List集合特有方法"></a>2.2 List集合特有方法</h3></li></ul><p><img src="D:\面向对象课件资料\黑马基础图片\集合体系结构\list特有方法.png"></p><h3 id="2-3并发修改异常"><a href="#2-3并发修改异常" class="headerlink" title="2.3并发修改异常"></a>2.3并发修改异常</h3><ul><li>ConcurrentModificationException</li><li>产生原因：</li><li>迭代器遍历的过程中，通过集合对象修改了集合中元素的长度，造成了迭代器获取元素中判断预期修改值和实际修改值不一致。</li></ul><h3 id="2-4Listlterator"><a href="#2-4Listlterator" class="headerlink" title="2.4Listlterator"></a>2.4Listlterator</h3><blockquote><p>列表迭代器</p></blockquote><ul><li><p>集合特有的迭代器</p></li><li><p>用于允许程序员沿任一方向遍历列表的列表的迭代器，在迭代期间修改列表，并获取列表中迭代器的当前位置。</p></li><li><p>常用方法：</p></li><li><p>next（）、hasNext()、previous（）、hasPrevious（）</p></li><li><p>addE e() ** 不会出现并发异常##</p></li></ul><h3 id="2-5-增强for循环"><a href="#2-5-增强for循环" class="headerlink" title="2.5 增强for循环"></a>2.5 增强for循环</h3><blockquote><p>简化数组和Collection集合的遍历<br>实际上为iterator迭代器</p></blockquote><ul><li>格式</li><li>for(元素类型 变量名 ：数组或集合名 ) { 变量既为该元素}</li></ul><h3 id="2-6数据结构"><a href="#2-6数据结构" class="headerlink" title="2.6数据结构"></a>2.6数据结构</h3><h3 id="2-7-常见数据结构"><a href="#2-7-常见数据结构" class="headerlink" title="2.7 常见数据结构"></a>2.7 常见数据结构</h3><h3 id="2-8-linkedList常用方法"><a href="#2-8-linkedList常用方法" class="headerlink" title="2.8 linkedList常用方法"></a>2.8 linkedList常用方法</h3><p><img src="D:\面向对象课件资料\黑马基础图片\集合体系结构\852.png"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>//调用迭代器方法 不是new一个迭代器对象，不用new<pre><code> ListIterator&lt;String&gt; lit =  list.listIterator();</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 黑马程序员 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程单词积累</title>
      <link href="/2022/01/19/EnglishStudy/%E7%BC%96%E7%A8%8B%E5%8D%95%E8%AF%8D/"/>
      <url>/2022/01/19/EnglishStudy/%E7%BC%96%E7%A8%8B%E5%8D%95%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="编程单词"><a href="#编程单词" class="headerlink" title="编程单词"></a>编程单词</h1><ol><li>object 对象</li><li>geometric 几何图形</li><li>circle 圆</li><li>rectangle 长方体</li><li>radius 半径</li><li>Perimeter周长</li><li>Diameter 直径</li><li>introduce 介绍</li><li>query 查询</li><li>coach 教练</li><li>alter 改变</li><li>column 柱</li><li>method方法</li><li>文件file</li><li>领域field</li><li>regex 正则表达式</li><li>valid 有效的</li><li>module 单元、模块</li><li>title 标题、称谓</li><li>untitled 无标题的</li><li>until 直到</li><li>configured 安置、配置</li><li>kit 配套元件</li><li>SDK(Software Development Kit)</li><li>API(Application Programming Interface) 应用编程接口</li><li>appear 显得、看来</li><li>appearance 外貌、外观</li><li>plugins 插件</li><li>version 版本</li><li>advance 前进、预先的</li><li>advanced 高级的</li><li>contrast 对比</li><li>theme 主题</li><li>mouse 老鼠、鼠标</li><li>ambiguous 模棱两可的</li><li>post 邮递、投递</li><li>postman 邮局</li><li>scheme 计划、方案</li><li>block 块</li><li>template 样板</li><li>deployed 部署、调动</li><li>compiler 编译程序、汇编者</li><li>automatically 自动的、机械的</li><li>binary 二进制的</li><li>displacement 移位</li><li>fill 填满</li><li>pattern 图案</li><li>hard adj-坚固的，adv-努力地</li><li>scroll n-纸卷，v-滚动</li><li>dimension n-维，尺寸 adj-切成特定尺寸的</li><li>parse 作语法分析</li><li>judge 判断</li><li>Frame 窗体</li><li>farm 农场</li><li>expression 表示</li><li>stream n-流，v-流动</li><li>interrupt 打断</li><li>trace vt-查出，n-痕迹</li><li>dialog 对话框，对话</li><li>suspend 暂停</li><li>tempory 临时</li><li>MVC （Model-View-Controller)</li><li>organizations 社团</li><li>component 组成成分</li><li>override 推翻</li><li>current 现在的</li><li>sort 分类，排序</li><li>commons 平民、公地</li><li>stereo 立体声</li><li>podcast 博客</li><li>social 社会的</li><li>customer 顾客</li><li>address 地址</li><li>delivery 派送、分发</li><li>State 状态</li><li>query 查询</li><li>info 信息</li><li>prefer 更喜欢</li><li>validate 验证、确认</li><li>register 注册</li><li>foreground 前景、强调</li><li>check 检测</li><li>edit 编辑</li><li>preferred 首选</li><li>dimension 维，尺寸</li><li>internal 内部的</li><li>validate 验证</li><li>column 列</li><li>row 行</li><li>truncate 截断、adj.被删节的</li><li>restore 恢复</li><li>compression 压缩</li><li>canvas 帆布、油画</li><li>handler 处理器</li><li>warning 警告</li><li>native 出生地的</li><li>assets 资产</li><li>res 物、事件</li><li>blank 空白的</li><li>black 黑的</li><li>handle 把手、处理</li><li>kit 配套元件、装备</li><li>observe 看到、注意到</li><li>gap 缺口、缝隙</li><li>picture 相片、图片、想象</li><li>stroke 打一下、轻抚</li><li>round 圆形的</li><li>miter 斜接</li><li>adapter 适配器</li><li>press v按，n-记者、报刊</li><li>release 释放</li><li>instanceof 运算符，关键字</li><li>performed 做、执行、表演</li><li>internal 内部的</li><li>dispose 处置</li><li>category 类别</li><li>deploy 部署</li><li>catch 接住</li><li>Catch you late  待会见</li><li>fatal 致命的</li><li>archives 档案</li><li>categoties 类别</li><li>tags 标签</li><li>host 主办</li><li>config 配置</li><li>branch 分枝</li><li>token 代币、装样子、令牌</li><li>archive 档案文件</li><li>shrink 收缩</li><li>envelope 信封</li><li>mailto 电子邮件</li><li>sticky 粘性的、告事帖</li><li>matter 事情、要紧</li><li>copyright 版权</li><li>license 许可证、许可</li><li>common 常用的、共有的</li><li><strong>footer 页脚</strong></li><li>since 自从、因为</li><li>custon 风俗、定做</li><li>storage 存储</li><li>configure 配置</li><li>plugin 插件</li><li>prefix 前缀</li><li>fancy v.设想、n.想象的事情、adj.花哨的</li><li>ensure 确保</li><li>cooperate 合作</li><li>compatibility 兼容性</li><li>npm Node Package Manager</li><li>asset 资产</li><li>secure 保护</li><li>license 许可证</li><li>appearance 外貌</li><li>wheel 轮、推</li></ol>]]></content>
      
      
      <categories>
          
          <category> 英语学习 </category>
          
          <category> 单词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
            <tag> 单词积累 </tag>
            
            <tag> 编程单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day02-27-移除元素</title>
      <link href="/2022/01/18/Algorithm/Day02-27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
      <url>/2022/01/18/Algorithm/Day02-27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27.移除元素"></a>27.移除元素</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并原地修改输入数组。<br>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2]</span><br><span class="line">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure><h3 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">输出：5, nums = [0,1,4,0,3]</span><br><span class="line">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p>你不需要考虑数组中超出新长度后面的元素。</p><h2 id="第一想法"><a href="#第一想法" class="headerlink" title="第一想法"></a>第一想法</h2><ul><li>用一个for循环遍历数组，遇到相同的元素，从该位置开始，后面元素前移</li><li>代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == val) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; nums.length; j++) &#123;</span><br><span class="line">                    nums[j] = nums[j+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>结果:  nums[j] = nums[j+1];索引越界报错，假如j为最后一个元素，是没有j+1个元素的<h2 id="改错后"><a href="#改错后" class="headerlink" title="改错后"></a>改错后</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == val) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; nums.length; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j != size-<span class="number">1</span>) &#123;</span><br><span class="line">                        nums[j] = nums[j+<span class="number">1</span>];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        nums[j] = <span class="number">101</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>结果： 加了对最后一个元素的判断还是不行。仔细想了想其实是，若有目标元素size就减小了，而我for循环里用的.length。 同时元素向前移动，i的值也应减小<h2 id="再次改进"><a href="#再次改进" class="headerlink" title="再次改进"></a>再次改进</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int removeElement(int[] nums, int val) &#123;</span><br><span class="line">        int size = nums.length;</span><br><span class="line">        for(int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">            if(nums[i] == val) &#123;</span><br><span class="line">                for(int j = i; j &lt; size; j++) &#123;</span><br><span class="line">                    if (j != size-1) &#123;</span><br><span class="line">                        nums[j] = nums[j+1];</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        nums[j] = 101;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                size--;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>结果： 正确解答! 但是内存消耗和时间复杂度都太高</li></ul><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int removeElement(int[] nums, int val) &#123;</span><br><span class="line"></span><br><span class="line">        // 快慢指针</span><br><span class="line">        int fastIndex = 0;</span><br><span class="line">        int slowIndex;</span><br><span class="line">        for (slowIndex = 0; fastIndex &lt; nums.length; fastIndex++) &#123;</span><br><span class="line">            if (nums[fastIndex] != val) &#123;</span><br><span class="line">                nums[slowIndex] = nums[fastIndex];</span><br><span class="line">                slowIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return slowIndex;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这是参考别人的代码，实在妙。</li><li>思想：利用两个‘指针’一前一后对数组进行遍历。若前面’指针’遇到了目标元素，则后面指针没有值，若没有遇上，就等于前面’指针’的元素。</li></ul><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><ul><li>还是考虑不够周到</li><li>慢慢来吧</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day01-7004-二分查找</title>
      <link href="/2022/01/17/Algorithm/Day01-704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2022/01/17/Algorithm/Day01-704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>704.给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 9     </span><br><span class="line">输出: 4       </span><br><span class="line">解释: 9 出现在 nums 中并且下标为 4    </span><br></pre></td></tr></table></figure><h3 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 2     </span><br><span class="line">输出: -1        </span><br><span class="line">解释: 2 不存在 nums 中因此返回 -1   </span><br></pre></td></tr></table></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ul><li><p>你可以假设 nums 中的所有元素是不重复的。</p></li><li><p>n 将在 [1, 10000]之间。</p></li><li><p>nums 的每个元素都将在 [-9999, 9999]之间。</p><h2 id="第一想法"><a href="#第一想法" class="headerlink" title="第一想法"></a>第一想法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int search(int[] nums, int target) &#123;</span><br><span class="line">        int first = 0;</span><br><span class="line">        int last = nums.length - 1;</span><br><span class="line">        while(first &lt; last) &#123;</span><br><span class="line">            int mid = (first + last) / 2;</span><br><span class="line">            if(target &gt; nums[mid]) &#123;</span><br><span class="line">                first = first + 1;</span><br><span class="line">            &#125; else if(target &lt; nums[mid]) &#123;</span><br><span class="line">                last = last - 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提示有部分测试解答错误，并且该答案只是将时间复杂度降到了O(n/2)。</p></li></ul><h2 id="第二次改进"><a href="#第二次改进" class="headerlink" title="第二次改进"></a>第二次改进</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int search(int[] nums, int target) &#123;</span><br><span class="line">        int first = 0;</span><br><span class="line">        int last = nums.length - 1;</span><br><span class="line">        while (first &lt;= last) &#123;</span><br><span class="line">            int mid = first + (last - first)/2;</span><br><span class="line">            if (nums[mid] &lt; target)</span><br><span class="line">                first = mid + 1;</span><br><span class="line">            else if (nums[mid] &gt; target)</span><br><span class="line">                last = mid - 1;</span><br><span class="line">            else return mid;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>每次循环都使mid为最中间的数，成功的把时间复杂度降为O(log2(n)),并且测试通过</li></ul><h2 id="完善"><a href="#完善" class="headerlink" title="完善"></a>完善</h2><ul><li>在查看答案后发现忽略了目标数target的范围<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int search(int[] nums, int target) &#123;</span><br><span class="line">     // 避免当 target 小于nums[0] nums[nums.length - 1]时多次循环运算</span><br><span class="line">        if (target &lt; nums[0] || target &gt; nums[nums.length - 1]) &#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        int first = 0;</span><br><span class="line">        int last = nums.length - 1;</span><br><span class="line">        while (first &lt;= last) &#123;</span><br><span class="line">            int mid = first + (last - first)/2;</span><br><span class="line">            if (nums[mid] &lt; target)</span><br><span class="line">                first = mid + 1;</span><br><span class="line">            else if (nums[mid] &gt; target)</span><br><span class="line">                last = mid - 1;</span><br><span class="line">            else return mid;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>加入一个目标是范围判断可以有效避免程序做无用功。</li></ul><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><ol><li>还是考虑的太少，对算法不熟悉</li><li>要多练</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
